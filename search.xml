<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【题解】[Luogu5494]多项式双曲函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5494-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题并没有什么很难的东西，我就主要讲讲怎么降低常数。正文首先众所周知双曲三角函数是可以化成几个基本初等函数的运算的，具体来说：\sinh(x)=\frac{e^x-e^{-x}}{2}\cosh(x)=\frac{e^x+e^{-x}}{2}\operatorname{sech}(x)=\frac{2}{e^x+e^{-x}}接下来就很容易了，直接按照这个算即可。常数优化但是你会发现，有的人写的多项式跑得就是比你快，而且快好几倍！现在我就介绍一些比较常用的优化常数的方法：优化开关$\text{O2}$ 比什么都管用，先打开再说取模优化众所周知 $\text{C++}$ 取模运算慢得出奇，如果能优化取模肯定是会快的。加法取模加法取模可以用在结果小于 $2\times\text{MOD}$ 的情况下，具体来说基本就是两个数相加减的时候。123inline void upd(int&amp;x) &#123; x+=x&gt;&gt;31&amp;MOD;&#125;上面的代码等价于下面的代码：123inline void upd(int&amp;x) &#123; if(x&lt;0) x+=MOD;&#125;但是第一份代码运用了位运算，速度十分可观。它的原理是对于一个 32位有符号整数 ，负数右移 $31$ 位会变成 $-1$ ，二进制位下就是全 $1$ ，而非负数右移 $31$ 位会变成 $0$ 。使用的时候就是两个数相加之后减去 $\text{MOD}$ ，再将结果 upd 一下。乘法取模乘法取模要复杂一些，一般不常用。有兴趣可以去 $\text{Min_25}$ 的博客了解一下：地址。预处理原根这是个大优化，有的时候能让你的常数减小到原来的 $\frac 25$ ！一般写 $\text{NTT}$ 的时候每次要根据长度重新处理蝴蝶变换的数组，做 $\text{NTT}$ 的过程中还要现场算原根的各次幂。这部分要做大量的乘法和取模运算，如果能预处理出来，只做一次，常数就能有极大优化！另外有的人预处理的时候数组大小是 $O(n\log n)$ 的，其实有一维并不需要，因为长度总是 $2$ 的整数次幂，只要按照最大的长度预处理即可。其它优化有时候你需要将数组一段清空或者移到另一个数组中，可以使用 cstring 库里的 memset 和 memcpy 完成。但我感觉优化效果不大，所以就没用。最后还有一些从过程上进行的比较复杂的优化，我也不会所以就不讲了，有兴趣可以去论文哥的博客了解一下：地址。贴一下此题代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 262210typedef long long i64;typedef unsigned long long u64;inline void upd(int&amp;x) &#123; x+=x&gt;&gt;31&amp;MOD;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int inv[N];inline void pre(int n) &#123; inv[1]=1; for(int i=2;i&lt;=n;++i) inv[i]=(i64)(MOD-MOD/i)*inv[MOD%i]%MOD;&#125;int lmt(1),r[N],w[N],qaq;inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); int l(getLen(deg&lt;&lt;1)); for(int i=0;i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) &#123; qaq=b[i]; b[i]=2ll-(i64)qaq*tmp[i]%MOD; upd(b[i]); b[i]=(i64)b[i]*qaq%MOD; &#125; IDFT(b,l); for(int i=deg;i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(int i=0;i+1&lt;deg;++i) b[i]=(i64)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;inline void getInt(int*a,int*b,int deg) &#123; for(int i=1;i&lt;deg;++i) b[i]=(i64)a[i-1]*inv[i]%MOD; b[0]=0;&#125;inline void getLn(int*a,int*b,int deg) &#123; static int tmp[N]; getInv(a,tmp,deg); getDer(a,b,deg); int l(getLen(deg&lt;&lt;1)); DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) tmp[i]=(i64)tmp[i]*b[i]%MOD; IDFT(tmp,l); getInt(tmp,b,deg); for(int i=0;i&lt;l;++i) tmp[i]=0; for(int i=deg;i&lt;l;++i) b[i]=0;&#125;void getExp(int*a,int*b,int deg) &#123; if(deg==1) b[0]=1; else &#123; static int tmp[N]; getExp(a,b,(deg+1)&gt;&gt;1); getLn(b,tmp,deg); int l(getLen(deg&lt;&lt;1)); for(int i=0;i&lt;l;++i) &#123; if(i&lt;deg) &#123; tmp[i]=a[i]-tmp[i]; upd(tmp[i]); &#125; else tmp[i]=0; &#125; ++tmp[0]; DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) b[i]=(i64)b[i]*tmp[i]%MOD; IDFT(b,l); for(int i=deg;i&lt;l;++i) b[i]=tmp[i]=0; &#125;&#125;int n,type,f[N];int xp[N],ixp[N],sm[N],dc[N];int Sinh[N],Cosh[N],Sech[N];int main() &#123; scanf("%d%d",&amp;n,&amp;type); pre(n); init(n&lt;&lt;1); for(int i=0;i&lt;n;++i) scanf("%d",f+i); getExp(f,xp,n); getInv(xp,ixp,n); if(type&amp;1) &#123; for(int i=0;i&lt;n;++i) &#123; dc[i]=xp[i]-ixp[i]; upd(dc[i]); Sinh[i]=(i64)dc[i]*inv[2]%MOD; &#125; for(int i=0;i&lt;n;++i) printf("%d ",Sinh[i]); putchar('\n'); &#125; if(type&amp;2) &#123; for(int i=0;i&lt;n;++i) &#123; sm[i]=xp[i]+ixp[i]-MOD; upd(sm[i]); Cosh[i]=(i64)sm[i]*inv[2]%MOD; &#125; for(int i=0;i&lt;n;++i) printf("%d ",Cosh[i]); putchar('\n'); &#125; if(type&amp;4) &#123; if(type&amp;2) &#123; getInv(Cosh,Sech,n); for(int i=0;i&lt;n;++i) printf("%d ",Sech[i]); &#125; else &#123; for(int i=0;i&lt;n;++i) &#123; sm[i]=xp[i]+ixp[i]-MOD; upd(sm[i]); &#125; getInv(sm,Sech,n); for(int i=0;i&lt;n;++i) &#123; Sech[i]=(Sech[i]&lt;&lt;1)-MOD; upd(Sech[i]); &#125; for(int i=0;i&lt;n;++i) printf("%d ",Sech[i]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.8杂题选讲]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-8%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意给你一个长度为 $n$ 的序列 $a$ 和一个常数 $m$ 。定义 $f_{l,x}$ 为区间 $[l,l+m]$ 中 $&lt;x$ 的数的个数。有 $m$ 组询问，每组询问给定 $l,r,x$ ，询问 $\min\{f_{i,x}\}~~(l\leqslant i\leqslant r)$ 。$n,m\leqslant10^5$强制在线，空间 $\text{64MiB}$ 。题解分块，维护块内最大值暂咕T2题意有一棵 $n$ 个点的树，每条边有一个颜色黑或白，求有多少条路径，其中黑白边的数量满足 $2\times\min(w,b)\geqslant\max(w,b)$ 。$n\leqslant10^5$题解暂咕T3题意天空中有 $n$ 朵云，第 $i$ 朵云出现的时间是 $[l_i,r_i]$ ，你可以用 $c_i$ 的代价使第 $i$ 朵云消失，你最多可以花费 $C$ 的代价，保证 $C$ 最多让两朵云消失， $m$ 次询问，第 $i$ 次询问从 $0$ 时刻开始走，要走多久才能共经过 $w_i$ 时间的无云区间。$n,m\leqslant10^5$题解暂咕T4题意给出一个长度为 $n$ 的不降序列 $A$求长度为 $n$ 的排列 $B$ ，满足 $\min\{|A_{B_i}-A_{B_{i-1}}|\}$ 最大$n\leqslant10^5$ , $A_i\leqslant10^9$题解暂咕T5题意有一张 $n$ 个点 $m$ 条边的简单无向图，每条边上有一个正整数边权， $s$ 号点到 $t$ 号点的最短路长度为 $L$ 。现在把 $m$ 条边中一些边的边权抹去，求出一组边的赋值方案使得最短路依旧是 $L$ 。$n,m\leqslant5\times10^5$ , $L\leqslant10^9$题解暂咕T6题意弑尽破净的第四分块题解咕咕咕T7题意给你一个长度为 $n$ 的序列 $a$ ， $m$ 次操作，每次操作在 $i$ 位置上放 $c$ 个球，并询问位置 $y$ 上有多少个球，然后把 $x$ 位置的球放到 $a_x$ 上去，强制在线。$n,m\leqslant10^5$题解等价于在基环内向树上游走，环上可以开数组维护树上有两种做法：重链剖分后用堆维护每个元素到链顶的距离二维线段树数子树内某一深度的点T8题意$n$ 个数 $w_1,w_2,\ldots,w_n$ ，求一个最大的 $k$ ，使得能选出 $k$ 个数，使得它们模某个数 $m$ 相等，求出 $k$ 的最大值，并使 $k$ 最大的情况下 $m$ 尽量大。$m\geqslant2$ , $n\leqslant10^5$ , $w_i\leqslant10^7$题解随机选出一个数，这个数在答案集合中的概率是大于 $\frac 12$ 的。暂咕T9题意给你两个数 $l,r$ ，求 $l\sim r$ 除掉一个最大质因子后的最大质因子的和。$1\leqslant l\leqslant r\leqslant10^{11}$题解$\text{Min_25}$ 筛T10题意给出一个 $n\times m$ 大小的矩阵，每个位置可以填 $[1,c]$ 中的任意一个数，要求填完之后不能有两行或两列完全相同，求方案数。$n,m\leqslant5000$题解斯特林反演]]></content>
      <tags>
        <tag>讲课</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.7模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-7%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5489]EntropyIncreaser与动态图]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5489-EntropyIncreaser%E4%B8%8E%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题其实没有多难，静下来慢慢写还是十分可做的，不失为一道 $\text{LCT}$ 练手好题。正文首先看到 $1$ 操作连边，第一反应应该就是 $\text{Link/Cut Tree}$ 了，然而怎么维护割边割点数量呢？我们分开讨论。割边考虑对于一个环，环上所有边一定不会是割边；而对于一条链，链上所有边一定是割边。我们可以直接维护每条边是不是割边，初始时所有边都是割边，当某次加边操作产生了环，则环上所有边都不会成为割边了。具体来讲，边转点后所有边权值均为 $1$ ，当某次 $\text{Link}$ 的两结点已经连通，则将两结点间的链上的边全部赋值为 $0$ ，同时维护和即可。割点割点不像割边那样好处理了。考虑静态的情况，静态割点有一个比较套路的方法是用圆方树，我们可以尝试动态地维护一棵圆方树：每次连边产生环就将环上所有点连到一个方点上来。考虑这样做的复杂度：假设环的长度是 $L$ ，每次会用 $O(L\log n)$ 的复杂度删去一个长为 $O(L)$ 的环，均摊复杂度为 $O(n\log n)$ 。最后于是使用两棵 $\text{LCT}$ 分别维护割边和割点即可。参考代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;namespace Summer &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],mark[N]; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void NaCly_Fish_Orz(int x) &#123; if(x) &#123; val[x]=sumv[x]=0; mark[x]=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; if(mark[x]) &#123; NaCly_Fish_Orz(lc(x)); NaCly_Fish_Orz(rc(x)); mark[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125;&#125;namespace Pockets &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],st[N],num; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125; void print(int now) &#123; if(now) &#123; down(now); print(lc(now)); st[++num]=now; print(rc(now)); &#125; &#125;&#125;int n,q,opt,u,v,last,tot,ans,SummerPockets;int fa[N];inline int find(int x) &#123; return x==fa[x]?x:fa[x]=find(fa[x]);&#125;inline void getEdge(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Summer::mrt(u); Summer::access(v); Summer::splay(v); ans=Summer::sumv[v];&#125;inline void getPoint(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); ans=Pockets::sumv[v];&#125;inline void link(int u,int v) &#123; int x=find(u),y=find(v); if(x==y) &#123; Summer::mrt(u); Summer::access(v); Summer::splay(v); Summer::NaCly_Fish_Orz(v); getPoint(u,v); if(ans&gt;2) &#123; ++SummerPockets; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); Pockets::num=0; Pockets::print(v); for(int i=1;i&lt;Pockets::num;++i) Pockets::cut(Pockets::st[i],Pockets::st[i+1]); for(int i=1;i&lt;=Pockets::num;++i) Pockets::link(Pockets::st[i],SummerPockets); &#125; &#125; else &#123; ++tot; fa[y]=x; Summer::val[tot]=1; Summer::link(u,tot); Summer::link(tot,v); Pockets::link(u,v); &#125;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;q); tot=SummerPockets=n; for(int i=1;i&lt;=n;++i) fa[i]=i,Pockets::val[i]=1; while(q--) &#123; scanf("%d%d%d",&amp;opt,&amp;u,&amp;v); u^=last,v^=last; switch(opt) &#123; case 1: &#123; link(u,v); break; &#125; case 2: &#123; getEdge(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; default: &#123; getPoint(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu2617]DynamicRankings]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu2617-DynamicRankings%2F</url>
    <content type="text"><![CDATA[此处题面前言在题解区看见了一个用分块写这个题的，但是在数据加强到 $10^5$ 后貌似已经过不去了（或许卡卡常还有救），难道分块真的就比不过这些树套树整体二分？不不不，分块的潜力远远不止这些！分块无快读无 $\text{O2}$ 评测记录正文之前那篇分块题解的做法是二分答案，然后块内二分检验，这样做的时间复杂度是 $O(n\sqrt n\log n\log V)$ 的，其中 $V$ 是值域。然而二分跟分块就很不搭，我们考虑一个不需要二分也能求第 $k$ 小的方法。先离散化，对序列分块，考虑维护块内每个数的出现次数，再将值域分块，维护每个块内每个值域块中数的出现次数。然后做前缀和，这样我们就能 $O(1)$ 查询一段块中每个数的出现次数以及每个值域块中数的出现次数。这部分的预处理是 $O(n\sqrt n)$ 的。查询时考虑将散块中每个数及值域块中数的出现次数先记录下来，这部分是 $O(\sqrt n)$ 的，然后跳值域块，超过 $k$ 了就跳块内的数，直到找到正好超过 $k$ 的位置，这样可以 $O(\sqrt n)$ 查询第 $k$ 小。修改时只要考虑对预处理的信息的影响即可，由于我们预处理的是前缀和，所以每次修改至多修改 $O(\sqrt n)$ 个块。这样我们就得到了一个 $O(n\sqrt n)$ 的优秀算法，可以通过此题。最后这个做法是另一个题的 $trick$ ，有兴趣的可以去试一下：望月悲叹的最初分块。最后给出代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using std::sort;using std::unique;using std::lower_bound;#define N 100010inline int min(int a,int b) &#123; return a&lt;b?a:b;&#125;struct node&#123;int opt,l,r,k;&#125;q[N];int n,m,a[N],b[N&lt;&lt;1],tot,l,r,k;char opt;int L[320],R[320];int siz,szv,num,numsz;int bl[N],blv[N&lt;&lt;1];int sumc[320][N&lt;&lt;1];int sums[320][450];inline void modify(int x,int y) &#123; for(int i=bl[x];i&lt;=num;++i) &#123; --sumc[i][a[x]]; --sums[i][blv[a[x]]]; ++sumc[i][y]; ++sums[i][blv[y]]; &#125; a[x]=y;&#125;int tmpa[N&lt;&lt;1],tmpc[450];inline int query(int l,int r,int k) &#123; int ans; if(bl[l]==bl[r]) &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; else &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=R[bl[l]];++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=L[bl[r]];i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]+sumc[bl[r]-1][i]-sumc[bl[l]][i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=R[bl[l]];++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; for(int i=L[bl[r]];i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; return ans;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf("%d",a+i); b[++tot]=a[i]; &#125; for(int i=1;i&lt;=m;++i) &#123; scanf("\n%c%d%d",&amp;opt,&amp;l,&amp;r); if(opt=='Q') &#123; scanf("%d",&amp;k); q[i]=(node)&#123;1,l,r,k&#125;; &#125; else &#123; q[i]=(node)&#123;2,l,r,0&#125;; b[++tot]=r; &#125; &#125; sort(b+1,b+tot+1); tot=unique(b+1,b+tot+1)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+tot+1,a[i])-b; siz=ceil(sqrt(n)); szv=ceil(sqrt(tot)); for(int i=1;i&lt;=n;++i) bl[i]=(i-1)/siz+1; for(int i=1;i&lt;=tot;++i) blv[i]=(i-1)/szv+1; num=bl[n],numsz=blv[tot]; for(int i=1;i&lt;=num;++i) &#123; L[i]=R[i-1]+1; R[i]=min(L[i]+siz-1,n); for(int j=1;j&lt;=tot;++j) sumc[i][j]=sumc[i-1][j]; for(int j=1;j&lt;=numsz;++j) sums[i][j]=sums[i-1][j]; for(int j=L[i];j&lt;=R[i];++j) &#123; ++sumc[i][a[j]]; ++sums[i][blv[a[j]]]; &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; if(q[i].opt==1) printf("%d\n",query(q[i].l,q[i].r,q[i].k)); else modify(q[i].l,lower_bound(b+1,b+tot+1,q[i].r)-b); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.6字符串]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-6%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意有一个长度为 $n$ 的字符串，已知第 $i$ 种字符刚好有 $a_i$ 个，求 $kmp$ 数组之和最小是多少。$n,字符种数\leqslant10^5$题解将出现次数最少的字符放 $1$ 个在最前面，然后放其它字符，最后放剩下的字符特判只有 $1$ 种字符的情况T2题意定义两个字符串相同为它们的最小字符表示法相同给定 $S,T$ ，求 $T$ 在 $S$ 中的出现次数$总串长\leqslant10^6$题解以每个字符上一次出现的位置为值做 $kmp$T3题意求有多少个长度为 $n$ 的字符串， $kmp$ 数组 $next[n]=0$ ，并输出满足条件的字典序第 $k$ 大的 $01$ 串。$n\leqslant64$ , $T\leqslant1000$题解设 $f_i$ 表示长度为 $i$ 的，没有前缀等于后缀的字符串数量。暂咕T4题意有多少个长度为 $k$ 的，最小循环表示法唯一且最小表示法就是本身的串的个数。$k\leqslant10^6$题解枚举循环节，莫比乌斯反演容斥T5题意如果两个长度为 $n$ 的字符串 $S,T$ 满足对于任意一对整数 $(i,j)$ ，如果 $S[i,j]$ 为回文串， $T[i,j]$ 也为回文串，我们称 $S,T$ 为回文等价，给出 $S$ ，求有多少 $T$ 满足与 $S$ 回文等价。$|S|,|T|\leqslant10^6$题解做 $Manacher$ 时将字符相同的位置用并查集连起来T6题意给你一个长度为 $n$ 的字符串，求一个最大的 $k$ ，使得存在一个字符串序列 $a_1,a_2,\ldots,a_k$ ，其中 $a_i$ 在 $a_{i+1}$ 中出现两次，且 $a_i$ 为给出的串的子串$n\leqslant10^5$题解暂咕T7题意给一个字符串，求一个最大长度 $L\leqslant\frac n2$ ，使得前 $L$ 个字符与后 $L$ 个字符循环同构。$n\leqslant10^6$题解暂咕T8题意给一个长度为 $n$ 的字符串 $s$ ，有 $q$ 次询问，每次询问给出两个区间，求第一个区间中字典序最小的子串使得该子串的字典序大于第二个区间的串。$n\leqslant10^5$ , $q\leqslant2\times10^5$题解建 $\text{SAM}$ ，二分 + 倍增 + 线段树查询T9题意给你长度为 $n$ 的字符串 $T$ ，你可以用 $T$ 中的子串去拼另一个字符串，能拼出字符串 $S$ 的方案中我们选择步数最少的作为拼出 $S$ 的方案，求长度为 $m$ 的能拼出的字符串中，方案步数最大是多少。$n\leqslant10^5$ , $m\leqslant10^{18}$题解二分 + 矩阵乘法]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.5模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-5%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.4计数]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-4%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意小 $\text{A}$ 会投 $a$ 次硬币，小 $\text{B}$ 会投 $b$ 次硬币，求有多少种情况，小 $\text{A}$ 投出的硬币正面向上的次数严格大于小 $\text{B}$ 投出的硬币正面向上的次数，答案保留最后 $k$ 位$1\leqslant a,b\leqslant10^{15}$ , $b\leqslant a\leqslant b+10000$ , $1\leqslant k\leqslant9$题解设 $x$ 为小 $\text{A}$ 投出的向上的次数，设 $y$ 为小 $\text{B}$ 投出的向下的次数。有 $x+y&gt;b$ ，枚举 $x+y$答案即是 $\sum_{i=b+1}^{a+b}{\binom{a+b}{i}}$T2题意求 $n$ 个点 $m$ 条边的无向连通图的个数，点有标号$n\leqslant30$ , $m\leqslant100$题解设 $f_{i,j}$ 表示 $i$ 个点 $j$ 条边的无向连通图，枚举与 $1$ 相连的连通块转移$f_{i,j}=\binom{\frac{i(i-1)}{2}}{j}-\sum_{x=1}^{i}{\sum_{k=0}^{j}{f_{x,k}\times\binom{\frac{(i-x)(i-x-1)}{2}}{j-k}\times\binom{n-1}{x-1}}}$T3题意给定一个 $n$ 个点的图，初始时没有边每次随机选择两个不相同的点连接起来求期望要多少次才能使整个图连通$n\leqslant30$题解考虑到 $30$ 的拆分数只有 $5600$ 左右，可以直接将图的连通情况作为状态，然后 $O(n^2)$ 转移T4题意给出一个 $n$ 个点 $m$ 条边的无向图，每条边的权值不固定，为 $[0,1]$ 内的随机变量，无重边无自环，求最小生成树上最大边的期望边权$n\leqslant10$ , $m\leqslant\frac{n(n-1)}{2}$题解设 $f_{s,i}$ 表示连通块 $s$ 里连了 $i$ 条边的方案数设 $g_{s,i}$ 表示在点集 $s$ 里连了 $i$ 条边且不连通的方案数暂咕[SHOI2017] 分手是祝愿题面题目链接Zeit und Raum trennen dich und mich.时空将你我分开。$\text{B}$ 君在玩一个游戏，这个游戏由 $n$ 个灯和 $n$ 个开关组成，给定这 $n$ 个灯的初始状态，下标为 $1\sim n$ 的正整数。每个灯有两个状态亮或灭，我们用 $1$ 来表示这个灯是亮的，用 $0$ 表示这个灯是灭的，游戏的目标是使所有灯都灭掉。但是当操作第 $i$ 个开关时，所有编号为 $i$ 的约数（包括 $1$ 和 $i$ ）的灯的状态都会被改变，即从亮变成灭，或者是从灭变成亮。$\text{B}$ 君发现这个游戏很难，于是想到了这样的一个策略，每次等概率随机操作一个开关，直到所有灯都灭掉。这个策略需要的操作次数很多， $\text{B}$ 君想到这样的一个优化。如果当前局面，可以通过操作小于等于 $k$ 个开关使所有灯都灭掉，那么他将不再随机，直接选择操作次数最小的操作方法（这个策略显然小于等于 $k$ 步）操作这些开关。$\text{B}$ 君想知道按照这个策略（也就是先随机操作，最后小于等于 $k$ 步，使用操作次数最小的操作方法）的操作次数的期望。这个期望可能很大，但是 $\text{B}$ 君发现这个期望乘以 $n!$ 一定是整数，所以他只需要知道这个整数对 $100003$ 取模之后的结果。$n\leqslant100000$题解设 $f_i$ 为从还剩 $i$ 个位置到还剩 $i-1$ 个位置的期望步数暂咕T6题意在一个直角坐标系上依次插入 $n$ 个点，每次插入之后输出当前有多少个三角形严格覆盖原点。（强制在线）$n\leqslant100000$题解考虑一个不合法的方案，对一个极角最小的点，另两个点一定在原点到该点连线的半平面内用平衡树维护即可T7题意“奋战三星期，举重五百斤”，一大群鸽子来到了 $\text{CJ}$ 的健身房，发现房间里有一排共 $n$ 个铁饼。有 $Q$ 次操作，你需要支持三种操作：1 x y 将第 $x$ 个铁饼的重量设置为 $y$2 L R 翻转第 $L$ 至第 $R$ 个铁饼3 L R W 询问仅使用 $L$ 到 $R$ 之间的铁饼能否拼出一个重量为 $W$ 的杠铃鸽子们还在健身房的天花板上发现了一个数字 $k$ 。机智的它们立刻发现，在任意时刻出现过的不同的铁饼数目是不会超过 $k$ 的。$n,Q,W\leqslant100000$ , $k\leqslant10$题解[HAOI2008]硬币购物暂咕T8题意给你一个长度为 $n$ 的序列 $A$ ，如果 $n$ 不是非降，你必须删掉一个数，直到非降为止，求不同方案数，对 $1000000007$ 取模。$n\leqslant2000$题解设 $f_i$ 表示删到长度为 $i$ 的非降序列的方案数（包含不合法）预处理 $g_i$ 为长度为 $i$ 的非降序列的个数$f_i=g_i\times(n-i)!$从小到大容斥掉不合法的方案T9题意给你一个长度为 $2n$ 的序列 $a$ ，其中有些位置上的元素是 $-1$ ，保证 $1\sim 2n$ 最多只出现一次，定义一个长度为 $n$ 的数组 $b$ ， $b_i=\min(a_{2i-1},a_{2i})$ ，求有多少种不同的 $b$ 数组。$n\leqslant300$题解把 $a$ 分成 $n$ 个二元组，则每个二元组只有 $3$ 种情况$f_{i,j,k}$ 表示从大往小考虑到第 $i$ 个数，有 $j$ 个 $(-1,x)$ ，有 $k$ 个 $(-1,y)$ 。（ $y$ 为已经填进去的）暂咕T10题意给定一个长度为 $n$ 的正整数序列 $a$求有多少个长度为 $n$ 的正整数序列 $x$ 满足对于任意 $1\leqslant i\leqslant n$ , $1\leqslant x_i\leqslant D$对于任意 $1\leqslant i&lt;j\leqslant n$ , $\max(a_i,a_j)&lt;|x_i-x_j|$$n\leqslant50$ , $a_i\leqslant40$题解按 $a_i$ 排序依次插入设 $f_{i,j,s}$ 表示插入到第 $i$ 个，还有 $j$ 个缝隙，压紧后长度为 $s$ 的方案数枚举第 $i$ 个是放在两端还是合并两个已有段转移T11题意给定一个长度为 $n$ 的整数序列 $S$求有多少个长度为 $n$ 的正整数序列 $T$使得将 $S$ 和 $T$ 排序后， $S$ 的每一位都不小于 $T$ 的每一位$n\leqslant1000$题解对 $S$ 和 $T$ 排序设 $f_i$ 表示有多少个 $T$ 的前 $i$ 位满足条件枚举第一个不满足条件的位置，用总方案减去不满足的转移]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.3模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-3%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.2网络流]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-2%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！[bzoj1280] $\text{Emmy}$卖猪pigs题面题目链接$\text{Emmy}$ 在一个养猪场工作。这个养猪场有 $m$ 个锁着的猪圈，但 $\text{Emmy}$ 并没有钥匙。有 $n$ 个顾客会到养猪场来买猪，一个接着一个。每一位顾客都会有一些猪圈的钥匙，他们会将这些猪圈打开并买走固定数目的猪。所有顾客有的钥匙和他们需要买猪的数量在事先都告诉了 $\text{Emmy}$，于是 $\text{Emmy}$ 要订一个计划，使得卖出去的猪最多。买卖的过程是这样的：一个顾客前来，并打开所有他可以打开的猪圈。然后 $\text{Emmy}$ 从这些猪圈里牵出固定数目的猪卖给顾客（最多只能和顾客需要数相等），并可以重新安排这些开着的猪圈中的猪。每个猪圈可以存放任意数目的猪。写一个程序，使得 $\text{Emmy}$ 能够卖出去尽可能多的猪。$n\leqslant100$ , $m\leqslant1000$题解暂咕[bzoj2406] 矩阵题面题目链接给定一个整数矩阵 $A[n\times m]$ ，求一个矩阵 $B[n\times m]$ 满足 $\forall1\leqslant i\leqslant n,1\leqslant j\leqslant m,B_{ij}\in[L,R]$ ，且使下式值最小：\large max= \begin{cases} \mathop{max}\limits_{1\leqslant j\leqslant m} \{|\sum_{i=1}^{n}{(A_{ij}-B_{ij})}|\}\\ \mathop{max}\limits_{1\leqslant i\leqslant n} \{|\sum_{j=1}^{m}{(A_{ij}-B_{ij})}|\} \end{cases}$n,m\leqslant 200$题解暂咕[TJOI2015] 组合数学题面题目链接为了提高智商， $\text{ZJY}$ 开始学习组合数学。某一天她解决了这样一个问题：给一个 $n\times m$ 的网格图，其中某些格子有财宝。每次从左上角出发，只能往右或下走。问至少要走几次才可能把财宝全捡完。但是她还不知足，想到了这个问题的一个变形：假设每个格子中有好多块财宝，而每一次经过一个格子至多只能捡走一块财宝，其它条件不变，至少要走几次才可能把财宝全捡完？这次她不会做了，你能帮帮她吗？$n,m\leqslant1000$题解最长链等于最少反链覆盖每个点向不能到达它的点连边，跑最长路[bzoj1189] 紧急疏散evacuate题面题目链接发生了火警，所有人员需要紧急疏散！假设每个房间是一个 $n\times m$ 的矩形区域。每个格子可以是空地、墙或者门，人们可以从门撤出房间。已知门一定在房间的边界上，并且边界上不会有空地。最初，每块空地上都有一个人，在疏散的时候，每一秒钟每个人都可以向上下左右四个方向移动一格，当然他也可以站着不动。疏散开始后，每块空地上就没有人数限制了（也就是说每块空地可以同时站无数个人）。但是，由于门很窄，每一秒钟只能有一个人移动到门的位置，一旦移动到门的位置，就表示他已经安全撤离了。现在的问题是：如果希望所有的人安全撤离，最短需要多少时间？或者告知根本不可能。$3\leqslant n,m\leqslant20$题解对时间建分层图[POI2010] Bridges题面题目链接$\text{YYD}$ 为了减肥，他来到了瘦海，这是一个巨大的海，海中有 $n$ 个小岛，小岛之间有 $m$ 座桥连接，两个小岛之间不会有两座桥，并且从一个小岛可以到另外任意一个小岛。现在 $\text{YYD}$ 想骑单车从小岛 $1$ 出发，骑过每一座桥，到达每一个小岛，然后回到小岛 $1$ 。霸中同学为了让 $\text{YYD}$ 减肥成功，召唤了大风，由于是海上，风变得十分大，经过每一座桥都有不可避免的风阻碍 $\text{YYD}$ ， $\text{YYD}$ 十分 $ddt$ ，于是用泡芙贿赂了你，希望你能帮他找出一条承受的最大风力最小的路线。$2\leqslant n\leqslant1000$ , $1\leqslant m\leqslant2000$题解二分答案，网络流检验先随机定向，检查每个点的度数对于一个点入度减出度为正的，源点向其连边，否则该点向汇点连边边权为度数差的绝对值[bzoj4213] 贪吃蛇题面题目链接最近 $\text{lwher}$ 迷上了贪吃蛇游戏，在玩了几天却从未占满全地图的情况下，他不得不承认自己是一个弱菜，只能改去开发一款更弱的贪吃蛇游戏。在开发的过程中， $\text{lwher}$ 脑洞大开，搞了一个多条蛇的模式。但由于这种模式太难操作，于是他只好改变游戏的玩法，稍微变化一下游戏目标。新的游戏是这样的：一些蛇覆盖了一个网格。每个格子要么是一个障碍物，要么是蛇的一部分。每条蛇占据了一条折线（拐角处只能水平和竖直连接），且至少占据两个格子。蛇与蛇之间不能重叠，蛇也不会与自己重叠。每条蛇还必须满足以下两个条件中的一个：两个端点所在的格子在网格的边界。蛇构成一个环，即两个端点相邻（垂直或水平，不能斜着），至少要占据 $4$ 个格子（否则没法形成环）。给定一个网格，在满足前面所述的条件下覆盖所有空地，并使得端点在网格边界（即不构成环）的蛇尽量少。（如果一条蛇既构成环，又是端点在边界，那么不计入答案）例如，以下网格：可以由下面三种方案覆盖。还有其它的方案，但是没法仅用一条不构成环的蛇就覆盖整个网格。$n,m\leqslant12$题解黑白染色，边界的点下界为 $1$ ，上界为 $2$内部的点上下界皆为 $2$ ，障碍不连边[CEOI2008] order题面题目链接有 $n$ 个工作， $m$ 种机器，每种机器你可以租或者买过来。每个工作包括若干道工序，每道工序需要某种机器来完成，你可以通过购买或租用机器来完成。现在给出这些参数，求最大利润。$1\leqslant n,m\leqslant1200$题解源点向工作连收益工作向机器连租的价格机器向汇点连买的价格用总收益减去最小割[bzoj3774] 最优选择题面题目链接小 $\text{N}$ 手上有一个 $n\times m$ 的方格图，控制某一个点要付出 $A_{ij}$ 的代价，然后某个点如果被控制了，或者它周围的所有点（上下左右）都被控制了，那么它就算是被选择了的。一个点如果被选择了，那么可以得到 $B_{ij}$ 的回报。现在请你帮小 $\text{N}$ 选一个最优的方案，使得回报减代价尽可能大。$n,m\leqslant 50$题解暂咕T9题意$p\times q$ 的网格，每个位置有 $r$ 种选择，编号为 $1\sim r$ ，每种选择都有对应收益（可能为负）限制每个点分别和它上下左右相邻的 $4$ 个点的选择编号之和不能超过 $d$最大化总收益$p,q,r\leqslant40$题解暂咕]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3383]线性筛素数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3383-%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言首先说一下，这个科技是我在 $\text{Min_25}$ 的博客里看见的，那篇博客是 $2017$ 年的了，去翻了下提交记录发现论文哥也用了这个科技，所以也并不是什么新东西。有兴趣的也可以去阅读一下那篇博客。然后，虽然这个题是线性筛素数，但是这篇题解并不是讲筛法的，而是一些奇技淫巧。若是想学习素数筛法的可以跳过这篇题解了。正文相信各位都知道一个 $O(\sqrt n)$ 判断素数的方法，也就是枚举 $2\sim\lfloor\sqrt n\rfloor$ 检查每个数是否是 $n$ 的约数。具体代码如下：123456bool check(int x) &#123; if(x==0||x==1) return false; for(int i=2;i*i&lt;=x;++i) if(x%i==0) return false; return true;&#125;这个题我们只要对于每个询问都这样判断一次即可，复杂度上界 $O(M\sqrt N)$ 。如果我的数据是 $10^6$ 个 $9840769$ ，并且你的程序没有记忆化，这个程序需要 $\text{7.7s}$ 左右的时间才能出解。我们考虑怎样优化。我们判断约数的时候需要取模，而众所周知 $\text{C++}$ 的取模是很慢的，如果能加快取模的效率，就能对运行速度有很大优化。$\text{Min_25}$ 在他的博客里讲到了这样一种优化方法：考虑到判断约数时我们只需要得知取模结果是否为 $0$ ，并不需要知道实际结果。若 $m$ 为奇数， $m’$ 为 $m$ 模 $2^{64}$ 下的逆元，且有 $n\in\left[0,2^{64}\right)$ ，则：n\equiv0\pmod{m}\ \Leftrightarrow\ (n\cdot m')\%2^{64}\leqslant\lfloor\frac{2^{64}}{m}\rfloor对于一个模数 $m$ 我们预处理出 $m’$ 和 $\lfloor\frac{2^{64}}{m}\rfloor$ ，然后我们就可以把判断 $n\%m$ 是否为 $0$ 转化为一次乘法和一次比较大小。使用这个方法，刚刚跑 $\text{7.7s}$ 的程序只需要 $\text{1.9s}$ 即可出解， $4$ 倍的效率优化！最后这个技巧不仅可以用于判断素数，也可以用于质因数分解，杜教筛、洲阁筛、 $\text{Min_25}$ 筛的预处理。但使用场合还是较少，不过效率优化还是十分明显的！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【更新中】浅谈模意义下形式幂级数的几种操作]]></title>
    <url>%2F%E3%80%90%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%91%E6%B5%85%E8%B0%88%E6%A8%A1%E6%84%8F%E4%B9%89%E4%B8%8B%E5%BD%A2%E5%BC%8F%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言近几年信息学竞赛中出现了一类利用 生成函数 进行计数的题目，这类题目往往需要一顿推导之后得出一个或几个容易计算的生成函数与代表答案的生成函数间的关系。由于这类题目往往需要将结果对一个大质数取模，因此我们可以用模意义下形式幂级数的一些操作来进行这些生成函数之间的运算。本文将从简单的离散傅里叶变换开始，逐步带你了解这一类基于离散卷积的形式幂级数操作。你需要知道的几点多项式由数或字母或两者的乘积组成的代数式叫单项式（单个数或字母也为单项式）单项式中的常数因子为单项式的系数单项式中所有字母的指数之和为单项式的次数由若干个单项式相加组成的代数式叫多项式多项式各项中次数最大的单项式的次数为多项式的次数形式幂级数定义域为 $\mathbb Z^+$ 或其有限子集的函数叫数列（也就是一些有序的数）将数列的每一项求和得到的函数叫级数，一般所讲的级数大多指无穷级数，即数列有无穷项形如 $\sum_{i=0}^{\infty}{a_i(x-x_0)^i}$ 的级数叫幂级数（ $x_0$ 为常数）其中 $a_i$ 为幂级数的系数（可以类比多项式的各项系数）若存在一个非负实数 $r$ 使得幂级数在 $ | x - x_0 | &lt; r $ 时趋近于一个确定的值（收敛），在 $ | x - x_0 | &gt; r $ 时不趋于任何值（发散），则称 $ r $ 为幂级数的收敛半径，否则称该幂级数的收敛半径为 $ +\infty $将一个数列的各项作为幂级数的系数，所得到的幂级数不一定是收敛的（收敛半径可能为 $0$ ）。但我们淡化其收敛与发散的性质，认为它是收敛的，则可以得到一个形式上类似幂级数的东西（也就是长得像幂级数），我们将其称为形式幂级数若一个形式幂级数从某一项开始，后面项的系数全部为 $0$ ，则我们称其为形式多项式离散卷积令 $f(x)$ 和 $g(x)$ 为定义在 $\mathbb R$ 上的两个可积函数，则称 $\int_{-\infty}^{\infty}{f(\tau)g(x-\tau)d\tau}$ 关于 $x$ 的函数为 $f(x)$ 与 $g(x)$ 的卷积与卷积类似，我们称数列 $c_n=\sum_{i=-\infty}^{\infty}{a_ib_{n-i}}$ 为数列 $a_n$ 与数列 $b_n$ 的离散卷积形式幂级数与幂级数一样可以进行运算，其加减运算即是将对应位的系数相加减，而其乘法运算结果定义为两个形式幂级数系数的离散卷积构成的形式幂级数形式幂级数存在乘法逆元当且仅当 $a_0\ne0$ ，且若存在，则逆元唯一后面的形式幂级数运算若无特殊说明，全部在 $\pmod{x^{n+1}}$ 意义下进行，也即为形式多项式记号与约定我们记以数列 $\{f_n\}$ 为系数的形式幂级数为 $F(x)$ 。我们记 $[x^n]F(x)$ 为 $F(x)$ 的 $n$ 次项系数。我们记 $f_ig_i$ 为 $f_i\times g_i$ ，而 $F(x)G(x)$ 为 $F(x)$ 与 $G(x)$ 的离散卷积。多项式乘法快速傅里叶变换我们知道，两个形式幂级数做乘法即为它们系数的离散卷积。假设我们已知 $F(x)$ 和 $G(x)$ 的系数，我们要求得 $H(x)=F(x)G(x)$根据定义：h_n=\sum_{i=0}^{n}{f_ig_{n-i}}\Rightarrow H(x)=\sum_{i=0}^{\infty}{\sum_{j=0}^{i}{f_jg_{i-j}x^i}}很显然，我们求出 $H(x)$ 一项的时间复杂度是 $\Theta(n)$ 的，求出 $n$ 项的时间复杂度是 $\Theta(n^2)$ 的，这肯定是不能接受的。我们来考虑怎样更快速地求得 $H(x)$ 。上面的运算是基于用系数来表示多项式的，事实上，由于 $n+1$ 个点可以唯一确定一个 $n$ 次多项式，我们可以改用 $n+1$ 个点来描述我们的多项式。并且由于我们并不关心形式幂级数的 $x$ 的取值，我们可以任意选取实数甚至虚数作为 $x$ 的值。这样做的好处是什么呢？我们发现，两个点值表达式相乘只需要将对应点的值相乘即可，也就是说，两个点值表达式做乘法运算是 $\Theta(n)$ 的！如果我们可以快速地将系数表达式转化成点值表达式，并快速地将点值表达式转化回来，就可以快速地完成多项式乘法。那么具体如何来做呢？我们先介绍一类神奇的数——单位根 $\omega$ 。单位根$n$ 次单位根是 $n$ 次幂为 $1$ 的复数。也即， $n$ 次单位根 $\omega_n$ 满足 $\omega_n^n=1$ 。由欧拉公式有 $\omega_n^k=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})$ 。在后文中，我们假设 $n$ 为 $2$ 的正整数次幂：于是单位根有这几个性质$\omega_n^{k+\frac n2}=-\omega_n^k$$\omega_{2n}^{2k}=\omega_n^k$$\omega_n^0=\omega_n^n=1$我们来简单证明一下这几个性质：$\omega_n^{k+\frac n2}=-\omega_n^k$\begin{align*} \omega_n^{k+\frac n2}&=\cos((k+\frac n2)\frac{2\pi}{n})+i\sin((k+\frac n2)\frac{2\pi}{n}) \\ &=\cos(k\times\frac{2\pi}{n}+\pi)+i\sin(k\times\frac{2\pi}{n}+\pi) \\ &=-(\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})) \\ &=-\omega_n^k \end{align*}$\omega_{2n}^{2k}=\omega_n^k$\begin{align*} \omega_{2n}^{2k}&=\cos(2k\times\frac{2\pi}{2n})+i\sin(2k\times\frac{2\pi}{2n}) \\ &=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n}) \\ &=\omega_n^k \end{align*}有了这两个性质，我们就能使用膜法了！快速傅里叶变换我们考虑将 $\omega_n$ 的 $0\sim n-1$ 次幂作为 $x$ 代入多项式 $F(x)$ 并求出点值。也即求出原多项式的离散傅里叶变换（DFT）我们先将 $F(x)$ 的各项按次数奇偶性分类：\begin{align*} F(x)&=\sum_{i=0}^{n-1}{f_ix^i} \\ &=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}+\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}} \\ \end{align*}令 $F_1(x)=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}$ ， $F_2(x)=\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}}$ ，则有 $F(x)=F_1(x^2)+xF_2(x^2)$ 。将 $\omega_n^k$ 代入 $x$ ：F(\omega_n^k)=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})再将 $\omega_n^{k+\frac n2}$ 代入 $x$ ：\begin{align*} F(\omega_n^{k+\frac n2})&=F_1(\omega_n^{2k+n})+\omega_n^{k+\frac n2}F_2(\omega_n^{2k+n}) \\ &=F_1(\omega_n^{2k}\times\omega_n^n)+(\omega_n^k\times\omega_{2n}^n)F_2(\omega_n^{2k}\times\omega_n^n) \\ &=F_1(\omega_n^{2k})-\omega_n^kF_2(\omega_n^{2k}) \end{align*}发现了吗？这是膜法！这两个式子间只有第二部分的符号有区别，也就是说，我们计算第一个式子的同时可以直接得到第二个式子的值！将这种奇偶分类求一半的操作递归下去，我们就得到了一个可以在 $\Theta(n\log n)$ 的时间复杂度内将多项式从系数表达式转化为以单位根各次幂为自变量的点值表达式的算法。快速傅里叶逆变换接下来我们再来考虑将这样的点值表达式转化回系数表达式的方法。也即离散傅里叶逆变换（IDFT）我们令 $\{y_0,y_1,y_2,\cdots,y_{n-1}\}$ 为 $\{f_0,f_1,f_2,\cdots,f_{n-1}\}$ 的离散傅里叶变换假设存在 $\{c_0,c_1,c_1,\cdots,c_{n-1}\}$ 满足 $c_k=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i}$也即 $Y(x)$ 在 $\omega_n^{-k}$ 处的点值，则有：\begin{align*} c_k&=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{(\sum_{j=0}^{n-1}{f_j(\omega_n^i)^j})(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_n^j)^i}(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_{n}^{j-k})^i}} \\ &=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}} \end{align*}令 $S(x)=\sum_{i=0}^{n-1}{x^i}$ ，将 $\omega_n^k(k\ne0)$ 代入：\because \begin{cases}\begin{align*} S(\omega_n^k)&=\sum_{i=0}^{n-1}{(\omega_n^k)^i} \\ \omega_n^kS(\omega_n^k)&=\sum_{i=1}^{n}{(\omega_n^k)^i} \\ \end{align*}\end{cases} \Rightarrow\omega_n^kS(\omega_n^k)-S(\omega_n^k)=(\omega_n^k)^n-1 \\ \therefore S(\omega_n^k)=\frac{(\omega_n^k)^n-1}{\omega_n^k-1}=0而当 $k=0$ 时显然 $S(\omega_n^0)=n$ 。接着来看之前的式子：c_k=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}}式子里面的 $\Sigma$ 当 $j\ne k$ 时值为 $0$ ，而 $j=k$ 时值为 $n$ 。因此有 $c_k=nf_k\Rightarrow f_k=\frac{c_k}{n}$于是只要对原多项式的离散傅里叶变换，以 $\omega_n^{-k}$ 为单位根做一次快速傅里叶变换，再将结果除以 $n$ 即可转化回原多项式。代码实现根据上面的理论可以很容易地写出快速傅里叶变换（FFT）的递归实现，但是一般使用时由于递归实现的常数过大，我们一般使用的是迭代实现的快速傅里叶变换。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N],b[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;b[i].re); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*b[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].re+0.1); return 0;&#125;优化三次变两次用刚刚所讲的内容做多项式乘法，需要使用三次 $\text{FFT}$ ：两次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。事实上有一个优化可以优化到只做一次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。我们把 $G(x)$ 的系数放到 $F(x)$ 的虚部里，然后对 $F(x)$ 进行 $\text{DFT}$ ，将 $F(x)$ 平方后进行 $\text{IDFT}$ ，将虚部的系数除以 $2$ 即是答案。考虑为什么这样是对的：对于 $a$ 和 $b$ ，有 $(a+bi)^2=a^2-b^2+(2abi)$ ，因此虚部系数即为答案两倍。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;a[i].im); getRev(n+m+2); DFT(a); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*a[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].im/2+0.1); return 0;&#125;MTT暂咕快速数论变换如果是在模意义下做运算，我们还有一种算法可以胜任，那就是快速数论变换（NTT）考虑到做快速傅里叶变换时我们将单位根代入求出点值，如果模意义下有与单位根性质类似的数，是否可以代替单位根完成一样的工作呢？答案是肯定的，这一类数是——原根 $g$ 。原根我们先给出阶的定义：若 $a\perp p$ 且 $p&gt;1$ ， $a$ 模 $p$ 的阶为满足 $a^n\equiv1\pmod{p}$ 的最小的 $n$ ，记为 $\delta_p(a)$ 。若 $p$ 为正整数， $a$ 是整数，且 $\delta_p(a)=\varphi(p)$ ，则 $a$ 为模 $p$ 的一个原根。（ $\varphi(n)$ 为小于等于 $n$ 的数中与 $n$ 互质的数的个数）原根有一些很有意思的性质：若模 $p$ 存在原根，则其一定有 $\varphi(\varphi(p))$ 个原根。若 $p$ 为质数， $g$ 为 $p$ 的一个原根，则 $g^i\pmod{p}$ 对于不同的 $i\in[1,p)$ 值都不同同时原根在模意义下与单位根有相同的性质，因此我们可以使用原根代替单位根在模意义下做快速数论变换。代码实现类似快速傅里叶变换，只把里面的单位根相应地换成原根，并注意取模即可。【例题】[Luogu3803] 多项式乘法 评测记录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#define MOD 998244353#define N 2100010typedef long long i64;inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(3,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125;&#125;inline void IDFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(332748118,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125; int bk(pow(lmt,MOD-2)); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N];int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;预处理原根我们来考虑一个优化：在 $\text{NTT}$ 的过程中我们多次使用了原根的各次幂，如果我们能将原根的各次幂预处理出来，而不是每次使用都计算一遍，就能有很大的常数优化！在多项式乘法中我们只做了 $3$ 次 $\text{NTT}$ ，所以看上去常数优化并不明显。但是在后面的内容中，随着 $\text{NTT}$ 次数的增多，预处理原根的优化效果将愈发明显。【例题】[Luogu3803] 多项式乘法 评测记录：$1.83s\rightarrow1.3s$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 2100010typedef long long i64;typedef unsigned long long u64;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt(1),r[N],w[N];inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N],l;int main() &#123; scanf("%d%d",&amp;n,&amp;m); init(n+m+2); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); l=getLen(n+m+2); DFT(a,l); DFT(b,l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a,l); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;分治 FFT暂咕多项式求导 &amp; 积分多项式求导稍微会一点微积分的应该都知道幂法则：\frac{d(x^n)}{dx}=nx^{n-1}以及和法则：\frac{d(f(x)+g(x))}{dx}=\frac{d(f(x))}{dx}+\frac{d(g(x))}{dx}因此多项式求导就是将每一项求导后相加，时间复杂度 $\Theta(n)$ 。代码实现12345inline void getDer(int*a,int*b,int deg) &#123; for(int i=0;i+1&lt;deg;++i) b[i]=(i64)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;多项式积分与求导同理，有积分公式：\int x^ndx=\frac{x^{n+1}}{n+1}+C由不定积分的性质有：\int(f(x)+g(x))dx=\int f(x)dx+\int g(x)dx于是多项式积分也可以每一项积分后相加，时间复杂度 $\Theta(n)$ 。代码实现12345inline void getInt(int*a,int*b,int deg) &#123; for(int i=1;i&lt;deg;++i) b[i]=(i64)a[i-1]*inv[i]%MOD; b[0]=0;&#125;多项式求逆【例题】[Luogu4238] 多项式求逆我们已经知道，当 $f_0\ne0$ 时 $F(x)$ 存在唯一乘法逆元。接下来我们就探讨一下如何求得一个多项式的乘法逆元。考虑已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $F(x)G(x)\equiv1\pmod{x^n}$如果 $F(x)$ 只有常数项，答案显然是常数项的乘法逆元，在此基础上，我们考虑倍增地求出整个 $G(x)$ 。假设我们已经求出了一个 $G’(x)$ 满足：F(x)G'(x)\equiv1\pmod{x^{\lceil\frac{n}{2}\rceil}}由于 $F(x)G(x)\equiv1\pmod{x^n}$ ，有：(G'(x)-G(x))\equiv0\pmod{x^{\lceil\frac n2\rceil}}两边同时平方，有：(G'(x)-G(x))^2\equiv0\pmod{x^n}G'(x)^2+G(x)^2-2G'(x)G(x)\equiv0\pmod{x^n}F(x)G'(x)^2+G(x)-2G'(x)\equiv0\pmod{x^n}G(x)\equiv2G'(x)-F(x)G'(x)^2\pmod{x^n}于是我们得到了从 $G’(x)$ 推到 $G(x)$ 的方式。时间复杂度 $T(n)=T(\frac n2)+\Theta(n\log n)$ ，由主定理有 $T(n)=\Theta(n\log n)$ 。代码实现123456789101112131415161718void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); int len=getLen(deg&lt;&lt;1); for(int i=0;i&lt;deg;++i) tmp[i]=a[i]; for(int i=deg;i&lt;len;++i) tmp[i]=0; DFT(tmp,len); DFT(b,len); for(int i=0;i&lt;len;++i) b[i]=(2ll-(i64)b[i]*tmp[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,len); for(int i=deg;i&lt;len;++i) b[i]=0; &#125;&#125;多项式开根【例题】[Luogu5205] 多项式开根已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $G(x)^2\equiv F(x)\pmod{x^n}$ 。同样如果 $F(x)$ 只有常数项，答案显然是常数项的二次剩余，在此基础上我们仍然考虑倍增。假设我们已经求出了一个 $G’(x)$ 满足：G'(x)^2\equiv F(x)\pmod{x^{\lceil\frac n2\rceil}}则有：G'(x)^2-G(x)^2\equiv0\pmod(x^{\lceil\frac n2\rceil})G'(x)^4+G(x)^4-2G'(x)^2G(x)^2\equiv0\pmod{x^n}G'(x)^4+G(x)^4+2G'(x)^2G(x)^2\equiv4G'(x)^2G(x)^2\pmod{x^n}G'(x)^2+G(x)^2\equiv2G'(x)G(x)\pmod{x^n}G(x)\equiv\frac{G'(x)^2+G(x)^2}{2G'(x)}\pod{x^n}因此有 $G(x)\equiv\frac{G’(x)^2+F(x)}{2G’(x)}\pmod{x^n}$ ，于是可以倍增，时间复杂度同样是 $\Theta(n\log n)$ 。代码实现12345678910111213141516171819202122/// 假设常数项为 1void getSqrt(int*a,int*b,int deg) &#123; if(deg==1) b[0]=1; else &#123; static int tmpA[N],tmpB[N]; getSqrt(a,b,(deg+1)&gt;&gt;1); getInv(b,tmpB,deg); int len=getLen(deg&lt;&lt;1); for(int i=0;i&lt;deg;++i) tmpA[i]=a[i]; for(int i=deg;i&lt;len;++i) tmpA[i]=0; DFT(tmpA,len); DFT(tmpB,len); for(int i=0;i&lt;len;++i) tmpB[i]=(i64)tmpB[i]*tmpA[i]%MOD; IDFT(tmpB,len); for(int i=0;i&lt;deg;++i) b[i]=(i64)inv[2]*(b[i]+tmpB[i])%MOD; for(int i=0;i&lt;len;++i) tmpB[i]=0; &#125;&#125;多项式反三角函数（选学）【例题】[Luogu5265] 多项式反三角函数已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $G(x)\equiv\arcsin(F(x))\pmod{x^n}$ 。如果你对导数表熟悉，你会想起反三角函数的导函数十分地……单纯！\frac{d(\arcsin(x))}{dx}=\frac{1}{\sqrt{1-x^2}}于是我们考虑先求出 $G(x)$ 的导数再对其积分：G(x)\equiv\int{\frac{F'(x)}{\sqrt{1-F(x)^2}}dx}\pmod{x^n}$\arccos$ 和 $\arctan$ 也是同理，时间复杂度 $\Theta(n\log n)$ 。多项式对数函数【例题】[Luogu4725] 多项式对数函数已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $G(x)\equiv\ln(F(x))\pmod{x^n}$ 。组合意义什么？你从来没听说过多项式还可以取对数？你不知道它的意义？别着急。假设我们有一个 $F(x)$ 满足：F(x)=\sum_{i=0}^{\infty}{\frac{G(x)^i}{i!}}若 $G(x)$ 的第 $i$ 项系数表示集合大小为 $i$ 的方案数，则 $F(x)$ 的第 $i$ 项表示选出若干个集合，使其大小之和恰好为 $i$ 的方案数。你会发现 $\sum_{i=0}^{\infty}{\frac{G(x)^i}{i!}}$ 恰好为 $e^{G(x)}$ 的麦克劳林级数，于是有：F(x)=e^{G(x)}~~\Longleftrightarrow~~G(x)=\ln(F(x))计算方法对两边求导，有：G'(x)\equiv\frac{F'(x)}{F(x)}\pmod{x^n}于是得到：G(x)\equiv\int{\frac{F'(x)}{F(x)}dx}\pmod{x^n}只要将 $F(x)$ 分别求导和求逆后相乘，将其结果积分即可得到 $G(x)$ ，时间复杂度 $\Theta(n\log n)$ 。代码实现12345678910111213141516/// 假设常数项为 1inline void getLn(int*a,int*b,int deg) &#123; static int tmp[N]; getInv(a,tmp,deg); getDer(a,b,deg); int len=getLen(deg&lt;&lt;1); DFT(tmp,len); DFT(b,len); for(int i=0;i&lt;len;++i) tmp[i]=(i64)tmp[i]*b[i]%MOD; IDFT(tmp,len); getInt(tmp,b,deg); for(int i=deg;i&lt;len;++i) b[i]=0; for(int i=0;i&lt;len;++i) tmp[i]=0;&#125;多项式指数函数【例题】[Luogu4726] 多项式指数函数已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $G(x)\equiv e^{F(x)}\pmod{x^n}$ 。多项式牛顿迭代想必大家都知道求函数零点除了二分还有一个著名的方法叫牛顿迭代法，也即，求解 $f(x)=0$ ，可以选取一个 $x_0$ 作为根的近似值，然后令 $x_{i+1}=x_i-\frac{f(x_i)}{f’(x_i)}$ 。事实上，牛顿迭代法也可以用在多项式身上！已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $F(G(x))\equiv0\pmod{x^n}$ 。假设我们已经求出了一个 $G_0(x)$ 满足：F(G_0(x))\equiv0\pmod{x^{\lceil\frac n2\rceil}}对 $F(x)$ 泰勒展开后取前两项，则有：F(G(x))\equiv F(G_0(x))+F'(G_0(x))(G(x)-G_0(x))\pmod{x^n}可以解出 $G(x)\equiv G_0(x)-\frac{F(G_0(x))}{F’(G_0(x))}\pmod{x^n}$ ，与原来的牛顿迭代公式几乎一致！事实上之前的多项式开根我们就是用多项式牛顿迭代求解的！计算方法现在回归正题，由 $G(x)\equiv e^{F(x)}\pmod{x^n}$ ：\ln(G(x))-F(x)\equiv0\pmod{x^n}我们相当于要求上面的方程的零点，对左边求导，可得 $\frac{1}{G(x)}$ ，代入牛顿迭代公式：G(x)\equiv G_0(x)-\frac{\ln(G_0(x))-F(x)}{\frac{1}{G_0(x)}}\pmod{x^n}G(x)\equiv G_0(x)(1-\ln(G_0(x))+F(x))\pmod{x^n}像前面一样倍增即可，时间复杂度 $\Theta(n\log n)$ 。代码实现123456789101112131415161718192021/// 假设常数项为 0void getExp(int*a,int*b,int deg) &#123; if(deg==1) b[0]=1; else &#123; static int tmp[N]; getExp(a,b,(deg+1)&gt;&gt;1); getLn(b,tmp,deg); int len=getLen(deg&lt;&lt;1); for(int i=0;i&lt;deg;++i) tmp[i]=(a[i]-tmp[i]+MOD)%MOD; for(int i=deg;i&lt;len;++i) tmp[i]=0; ++tmp[0]; DFT(tmp,len); DFT(b,len); for(int i=0;i&lt;len;++i) b[i]=(i64)b[i]*tmp[i]%MOD; IDFT(b,len); for(int i=deg;i&lt;len;++i) b[i]=tmp[i]=0; &#125;&#125;多项式双曲函数（选学）【例题】[Luogu5494] 多项式双曲函数已知多项式 $F(x)$ ，要求出多项式 $G(x)$ 满足 $G(x)\equiv\sinh(F(x))\pmod{x^n}$ 。众所周知 $\sinh(x)=\frac{e^x-e^{-x}}{2}$ ，于是我们就可以直接计算：G(x)\equiv\frac{e^{F(x)}-e^{-F(x)}}{2}\pmod{x^n}$\cosh$ 和 $\operatorname{sech}$ 也是同理，时间复杂度 $\Theta(n\log n)$ 。多项式三角函数（选学）【例题】[Luogu5264] 多项式三角函数已知多项式 $F(x)$ ，要求出多项式 $G(x)$ 满足 $G(x)\equiv\sin(F(x))\pmod{x^n}$ 。这个看起来好像不是很好做：三角函数的导数仍然是三角函数，而其本身也没有什么容易计算的变形式。所以，接下来的一切全部都是膜法！想到三角函数，应该有不少人会想起 $\text{Euler}$ 公式：e^{i\theta}=\cos(\theta)+i\sin(\theta)将 $\theta$ 用 $-\theta$ 替换，可得：e^{-i\theta}=\cos(\theta)-i\sin(\theta)两式相减，有：\begin{align*} e^{i\theta}-e^{-i\theta}&=2i\sin(\theta) \\ \sin(\theta)&=\frac{e^{i\theta}-e^{-i\theta}}{2i} \end{align*}于是有：G(x)\equiv\frac{e^{iF(x)}-e^{-iF(x)}}{2i}\pmod{x^n}至于 $i$ 的取值，由于 $i^2\equiv-1$ ，解一个二次剩余即可算出来。同理，也有：cos(\theta)=\frac{e^{i\theta}+e^{-i\theta}}{2}于是可以计算，时间复杂度 $\Theta(n\log n)$ 。多项式快速幂【例题】[Luogu5245] 多项式快速幂已知多项式 $F(x)$ ，要求出多项式 $G(x)$ 满足 $G(x)\equiv F(x)^k\pmod{x^n}$ 。类似普通快速幂一样做，有一个很容易想的 $\Theta(n\log n\log k)$ 算法。但是仔细思考一波，发现 $F(x)^k\equiv e^{k\ln(F(x))}\pmod{x^n}$ ，于是问题变得简单。直接将 $F(x)$ 求对数后系数乘上 $k$ ，再做 $\text{Exp}$ 就是答案，时间复杂度 $\Theta(n\log n)$多项式高阶前缀和 &amp; 差分【例题】[Luogu5488] 差分与前缀和已知多项式 $F(x)$ ，要求出其系数的 $k$ 阶前缀和或差分。多项式高阶前缀和考略一阶前缀和的系数：[x^i]G_1(x)=\sum_{j=1}^{i}{f_j}你会发现这就是 $F(x)$ 和一个系数为全 $1$ 的多项式的离散卷积，即相当于 $G_1(x)=\frac{F(x)}{1-x}$ 。因此：G_k(x)=\frac{F(x)}{(1-x)^k}牛顿广义二项式定理告诉我们：\begin{align*} \frac{1}{(1-x)^k}&=\sum_{i=0}^{\infty}{\binom{-k}{i}(-x)^i} \\ &=\sum_{i=0}^{n-1}{\binom{i+k-1}{k-1}x^i} \end{align*}于是可以直接计算出这个式子的值，再与 $F(x)$ 进行离散卷积，时间复杂度 $\Theta(n\log n)$ 。多项式高阶差分与前缀和相反，一阶差分相当于与 $1-x$ 进行卷积，因此：G_k(x)=F(x)(1-x)^k使用牛顿二项式定理，有：\begin{align*} (1-x)^k&=\sum_{i=0}^{k}{\binom{k}{i}(-x)^i} \\ &=\sum_{i=0}^{k}{(-1)^i\binom{k}{i}x^i} \end{align*}发现这个式子只有 $k+1$ 项，并且可以直接计算，时间复杂度 $\Theta(n\log n)$ 。多项式除法 &amp; 取模多项式多点求值线性递推多项式快速插值]]></content>
      <tags>
        <tag>资料</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5373]多项式复合函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5373-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这是这道题复杂度比较正确的一个常数奇大无比的算法，源自 $\text{R.P.BRENT}$ 和 $\text{H.T.KUNG}$ 在 $1978$ 年发表的论文（也就是题面里说的那个全嘤文pdf），我在 $\text{5月15日}$ 蒯到手之后肝了一个晚上，在神犇 rqy 的帮助下成功地写出了66分点名被卡做法awsl，后来研究别人代码的时候发现了 预处理原根 这种神奇操作，于是总算成功AC。正文这种做法基于对外层函数的泰勒展开，我们把内层函数 $G$ 的前 $m$ 项拆出来，记作 $G_m$ ，把剩下的记作 $G_r$ 。(这个 $m$ 到底取多少我们分析复杂度的时候再确定)然后进行泰勒展开：F(G)=F(G_m+G_r)=F(G_m)+F'(G_m)G_r+\frac12F''(G_m)G_r^2+\cdots由于我们只需要求 $F(G)$ 前 $n+1$ 项的值，所以我们只需要知道这个展开式前 $\lceil\frac nm\rceil$ 项的值即可，即：令 $l=\lceil\frac nm\rceil$ ，有F(G(x))\equiv F(G_m(x))+F'(G_m(x))G_r(x)+\cdots+\frac1{l!}F^{(l)}(G_m(x))G_r^l(x)\pmod{x^{n+1}}因此我们只要计算出 $F(G_m(x))$ 的各阶导和 $G_r(x)$ 的各次幂，就可以累加得到 $F(G(x))$ 了。$G_r(x)$ 只需要从 $G(x)$ 中截出来即可，那么如何计算 $F(G_m(x))$ 呢？考虑外层函数最高次项次数为 $2$ 的幂的情况，即：令 $F(x)=f_0+\cdots+f_jx^j$ 且 $j$ 为 $2$ 的正整数次幂，有F(G)=F_1(G)+G^{\frac j2}\cdot F_2(G)这里 $F_1$ 和 $F_2$ 都是最高次项次数为 $\frac j2$ 的多项式，这样一来我们就能递归地计算 $F(G_m(x))$ 了。考虑这一步的时间复杂度：我们令 $M(n)$ 为完成两个 $n$ 次多项式的乘法的时间，即： $M(n)=O(n\log n)$我们设 $T(j)$ 为计算 $G^{\frac j2}$ 和 $F(G)$ 的时间，则有T(j)\leqslant2T(\frac j2)+O(M(\min(jm,n)))我们令 $r$ 为满足 $n\cdot2^k\leqslant jm$ 的最大的 $k$ ，则有T(j)=O(M(n)+2M(n)+\cdots+2^rM(n))+2^{r+1}T(\frac{j}{2^{r+1}})T(j)\leqslant O(\frac{jmM(n)}{n})+(\frac{2jm}{n})T(\frac{j}{2^{r+1}})又因为 $n\cdot2^{r+1}&gt;jm$ ，有T(\frac{j}{2^{r+1}})=O(M(\frac{jm}{2^{r+1}})+2M(\frac{jm}{2^{r+2}})+\cdots)=O(M(n)+2M(\lceil\frac n2\rceil)+4M(\lceil\frac n4\rceil)+\cdots)=O(\log nM(n))因此，我们有 $T(j)=O(\frac{jm\log n}{n}M(n))$ ，所以求解 $F(G_m(x))$ 的时间复杂度为 $O(mn\log^2n)$ 。我们再来考虑对 $F(G_m(x))$ 求导：令 $H(x)=F(G(x))$根据复合函数求导法则，我们有 $H’(x)=F’(G(x))\cdot G’(x)$ ，因此 $F’(G_m(x))=H’(x)\cdot(G_m’(x))^{-1}$ ，由此我们可以计算出泰勒展开式中某一项之后与之前的结果累加得到 $H(x)$ ，同时计算出下一项中 $F(G_m(x))$ 的对应阶导。每计算一次导数的时间复杂度是 $O(n\log n)$ 的，因此计算出所有项的时间复杂度是 $O(l\cdot n\log n)=O(\frac{n^2\log n}{m})$ 。我们已经得到了 $F(G_m(x))$ 的各阶导，而 $G_r(x)$ 的各次幂只需要挨个乘起来即可，时间复杂度也是 $O(\frac{n^2\log n}{m})$ 的。之后各项的计算和累加同样是 $O(\frac{n^2\log n}{m})$ 的，因此这个算法的总复杂度为 $O(mn\log^2n+\frac{n^2\log n}{m})$ 。我们考虑 $m$ 的取值：根据均值不等式，当 $mn\log^2n\sim\frac{n^2\log n}{m}$ 时时间复杂度最优，因此解得当 $m\sim\sqrt{\frac{n}{\log n}}$ 时有最优时间复杂度 $O((n\log n)^{1.5})$ 。最后还是附上参考代码比较好，这个东西由于常数原因必须 预处理原根 才能卡过去，而且好像也没有什么实际用处。。就当是练习码力了 2333123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206#pragma GCC optimize("Ofast,inline")#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native")#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define MOD 998244353#define G 332748118#define N 262210#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(v==0) *pp++=48; else &#123; re int tp(0); while(v) st[++tp]=v%10+48,v/=10; while(tp) *pp++=st[tp--]; &#125; *pp++=32;&#125;inline int pow(re int a,re int b) &#123; re int ans(1); while(b) ans=b&amp;1?(ll)ans*a%MOD:ans,a=(ll)a*a%MOD,b&gt;&gt;=1; return ans;&#125;int inv[N],ifac[N];inline void pre(re int n) &#123; inv[1]=ifac[0]=1; for(re int i(2);i&lt;=n;++i) inv[i]=(ll)(MOD-MOD/i)*inv[MOD%i]%MOD; for(re int i(1);i&lt;=n;++i) ifac[i]=(ll)ifac[i-1]*inv[i]%MOD;&#125;inline int getLen(re int t) &#123; return 1&lt;&lt;(32-__builtin_clz(t));&#125;int lmt(1),r[N],w[N];inline void init(re int n) &#123; re int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(re int i(1);i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); re int wn(pow(3,(MOD-1)/lmt)); w[lmt&gt;&gt;1]=1; for(re int i((lmt&gt;&gt;1)+1);i&lt;lmt;++i) w[i]=(ll)w[i-1]*wn%MOD; for(re int i((lmt&gt;&gt;1)-1);i;--i) w[i]=w[i&lt;&lt;1];&#125;inline void DFT(int*a,re int l) &#123; static unsigned long long tmp[N]; re int u(__builtin_ctz(lmt)-__builtin_ctz(l)),t; for(re int i(0);i&lt;l;++i) tmp[i]=(a[r[i]&gt;&gt;u])%MOD; for(re int i(1);i&lt;l;i&lt;&lt;=1) for(re int j(0),step(i&lt;&lt;1);j&lt;l;j+=step) for(re int k(0);k&lt;i;++k) t=(ll)w[i+k]*tmp[i+j+k]%MOD, tmp[i+j+k]=tmp[j+k]+MOD-t, tmp[j+k]+=t; for(re int i(0);i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,re int l) &#123; std::reverse(a+1,a+l);DFT(a,l); re int bk(MOD-(MOD-1)/l); for(re int i(0);i&lt;l;++i) a[i]=(ll)a[i]*bk%MOD;&#125;int n,m;int a[N],b[N],c[N];void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); re int l(getLen(deg&lt;&lt;1)); for(re int i(0);i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l),DFT(b,l); for(re int i(0);i&lt;l;++i) b[i]=(2ll-(ll)tmp[i]*b[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,l); for(re int i(deg);i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(re int i(0);i+1&lt;deg;++i) b[i]=(ll)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;void getComp(int*a,int*b,int k,int m,int&amp;n,int*c,int*d) &#123; if(k==1) &#123; for(re int i(0);i&lt;m;++i) c[i]=0,d[i]=b[i]; n=m,c[0]=a[0]; &#125; else &#123; static int t1[N],t2[N]; int nl(n),nr(n),*cl,*cr,*dl,*dr; getComp(a,b,k&gt;&gt;1,m,nl,cl=c,dl=d); getComp(a+(k&gt;&gt;1),b,(k+1)&gt;&gt;1,m,nr,cr=c+nl,dr=d+nl); n=std::min(n,nl+nr-1); re int _l(getLen(nl+nr)); for(re int i(0);i&lt;_l;++i) t1[i]=i&lt;nl?dl[i]:0; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?cr[i]:0; DFT(t1,_l),DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) c[i]=((i&lt;nl?cl[i]:0)+t2[i])%MOD; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?dr[i]:0; DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) d[i]=t2[i]; &#125;&#125;inline void getComp(int*a,int*b,int*c,int deg) &#123; static int ts[N],ps[N],c0[N],_t1[N],idM[N]; int M(std::max((int)ceil(sqrt(deg/log2(deg))*2.5),2)),_n(deg+deg/M); getComp(a,b,deg,M,_n,c0,_t1); re int _l(getLen(_n+deg)); for(re int i(_n);i&lt;_l;++i) c0[i]=0; for(re int i(0);i&lt;_l;++i) ps[i]=i==0; for(re int i(0);i&lt;_l;++i) ts[i]=M&lt;=i&amp;&amp;i&lt;deg?b[i]:0; getDer(b,_t1,M); for(re int i(M-1);i&lt;deg;++i) _t1[i]=0; /// Important!!! getInv(_t1,idM,deg); for(int i=deg;i&lt;_l;++i) idM[i]=0; DFT(ts,_l),DFT(idM,_l); for(re int t(0);t*M&lt;deg;++t) &#123; for(re int i(0);i&lt;_l;++i) _t1[i]=i&lt;deg?c0[i]:0; DFT(ps,_l),DFT(_t1,_l); for(re int i(0);i&lt;_l;++i) _t1[i]=(ll)_t1[i]*ps[i]%MOD, ps[i]=(ll)ps[i]*ts[i]%MOD; IDFT(ps,_l),IDFT(_t1,_l); for(re int i(deg);i&lt;_l;++i) ps[i]=0; for(re int i(0);i&lt;deg;++i) c[i]=((ll)_t1[i]*ifac[t]+c[i])%MOD; getDer(c0,c0,_n); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; DFT(c0,_l); for(re int i(0);i&lt;_l;++i) c0[i]=(ll)c0[i]*idM[i]%MOD; IDFT(c0,_l); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; &#125;&#125;int main() &#123; n=read(),m=read(); for(re int i(0);i&lt;=n;++i) a[i]=read(); for(re int i(0);i&lt;=m;++i) b[i]=read(); m=(n&gt;m?n:m)+1; pre(m);init(m*5); getComp(a,b,c,m); for(re int i(0);i&lt;=n;++i) write(c[i]); fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5431]乘法逆元2]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5431-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832%2F</url>
    <content type="text"><![CDATA[此处题面题外话其实我觉得这道题的考点是快读.jpg没有快读的后果正文\large\text{以下运算均在模 }p\text{ 意义下进行}\large\sum_{i=1}^{n}{\frac{k^i}{a_i}}=\sum_{i=1}^{n}{k^i\cdot a_i^{-1}}我们考虑先求出 $a$ 序列的前缀积，记为 $s$ ：\large s_i=\prod_{j=1}^{i}{a_j}记 $a$ 序列前缀积的逆元为 $t$ ，此时如果我们知道这个序列，我们就可以知道 $a$ 中任意一个数的逆元：\large a_i^{-1}=s_{i-1}\cdot t_i而 前缀积的逆元 就等于 逆元的前缀积 ，所以我们只要求出 $t_n$ 就可以线性递推出整个 $t$ 序列了：\large t_n=s_n^{p-2}\large t_i=a_{i+1}\cdot t_{i+1}这样我们就求得了 $a$ 序列的逆元，再用秦九韶算法就能在线性时间内算出题目的式子了。参考代码前方极差码风警告！123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#define N 5000010#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline int pow(int a,int b,int p) &#123; int ans(1); while(b) ans=b&amp;1?(ll)ans*a%p:ans,a=(ll)a*a%p,b&gt;&gt;=1; return ans;&#125;int n,p,k,a[N],s[N]=&#123;1&#125;,inv_s[N],ans;int main() &#123; n=read(),p=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(),s[i]=(ll)s[i-1]*a[i]%p; inv_s[n]=pow(s[n],p-2,p); for(int i=n-1;i;--i) inv_s[i]=(ll)inv_s[i+1]*a[i+1]%p; for(int i=n;i;--i) ans=((ll)inv_s[i]*s[i-1]%p+ans)*k%p; printf("%d",ans); return 0;&#125;5e6 的输入，千万记得快读！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu4315]月下“毛景树”]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu4315-%E6%9C%88%E4%B8%8B%E2%80%9C%E6%AF%9B%E6%99%AF%E6%A0%91%E2%80%9D%2F</url>
    <content type="text"><![CDATA[此处题面前言这道题其实就是把 单点修改 、 区间染色 、 区间加 以及 区间最大值 这四种基本的序列操作出到了树上，很明显是用 树链剖分 + 线段树 解决，但是因为我太蒻了，树剖码到一半码不下去了，所以就全删了改码了个 Link/Cut Tree ，顺便 拿了这个题的RANK1 。边转点树剖的边转点大家都知道是把每条边的权值给深度较深的那个点，但是我们不能在 LCT 上也这么做，因为有 makeroot 操作的存在， LCT 上结点的父子关系不是确定的，所以我们采取建立 虚拟结点 的方式：1234// 第 i 条边连接 u 和 v 这两个点，权值为 wval[n+i]=maxv[n+i]=w;link(u,n+i);link(n+i,v);用 $n$ + $i$ 号结点表示第 $i$ 条边，再用它去分别连接原先的边连接的结点。需要注意的地方这种写法会产生 $2n$ 个结点， 空间千万要开够！标记上传下传的时候要分 原结点 和 虚拟结点 两种情况讨论！标记这道题我们只需要维护一个 区间染色 的标记和一个 区间加 的标记就行，我多维护了一个 siz 数组储存子树内 虚拟结点 的数量，上传时判断当前结点是不是 虚拟结点 就行。标记下传的时候要 先下传区间染色，再下传区间加 ，若是先下传了 区间加 ，后面 区间染色 的时候就会 覆盖掉最后附上此题 $AC$ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++inline int max(int a,int b)&#123;return b&lt;a?a:b;&#125;inline void swap(int&amp;a,int&amp;b)&#123;int tmp(a);a=b,b=tmp;&#125;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline char gtc() &#123; re char c(gc); while(c!='S'&amp;&amp;c!='h'&amp;&amp;c!='o'&amp;&amp;c!='d'&amp;&amp;c!='a') c=gc; return c;&#125;inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(!v) *pp++=48; else &#123; re char*tp(st); while(v) *++tp=v%10+48,v/=10; while(tp!=st) *pp++=*tp--; &#125; *pp++='\n';&#125;int n,u,v,w;char opt;int ch[N][2],fa[N],rev[N],val[N],maxv[N],ass[N],addv[N],siz[N];inline void assign(int x,int y)&#123;val[x]=x&gt;n?y:0,maxv[x]=siz[x]&gt;0?y:0,addv[x]=0,ass[x]=y;&#125;inline void add(int x,int y)&#123;val[x]+=x&gt;n?y:0,maxv[x]+=siz[x]&gt;0?y:0,addv[x]+=siz[x]&gt;0?y:0;&#125;inline void up(int x)&#123;siz[x]=siz[lc(x)]+siz[rc(x)]+(x&gt;n),maxv[x]=max(val[x],max(maxv[lc(x)],maxv[rc(x)]));&#125;inline void down(int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,rev[x]=0,swap(lc(x),rc(x)); if(ass[x]) assign(lc(x),ass[x]),assign(rc(x),ass[x]),ass[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z,up(y);&#125;inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;up(x);&#125;inline void access(int x)&#123;for(int y(0);x;x=fa[y=x])splay(x),rc(x)=y,up(x);&#125;inline void mrt(int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void split(int x,int y)&#123;mrt(x),access(y),splay(y);&#125;inline void link(int x,int y)&#123;mrt(x),fa[x]=y;&#125;int main() &#123; n=read(); for(re int i(1);i&lt;n;++i) siz[n+i]=1; for(re int i(1);i&lt;n;++i) u=read(),v=read(),val[n+i]=maxv[n+i]=read(),link(u,n+i),link(n+i,v); opt=gtc(); while(opt!='S') &#123; u=read(),v=read(); switch(opt) &#123; case'h': access(n+u),splay(n+u),val[n+u]=v; break; case'o': split(u,v),assign(v,read()); break; case'd': split(u,v),add(v,read()); break; case'a': split(u,v),write(maxv[v]); &#125; opt=gtc(); &#125; fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【置顶】学习资料]]></title>
    <url>%2F%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[收集的一些资料，留给自己慢慢啃。各路OJ洛谷、bzoj、POJ、UOJ、LibreOJ、51Nod、OIH、评测鸭、hihoCoder、OHO-OJ、Vijos、ZHZXOJ、ZOJ博文索引yzhang、bztMinamoto、自为风月马前卒、JasonZhan、huyufeifei、xehoth、饕餮传奇、Venus、yyb、rqy、Mrsrz、xht37、Victor、fcwww、EI、诗乃、Siyuan、zzq、zkw数据结构猫树、zkw线段树、Leafy Tree、Link-Cut Tree、树套树、后缀数组、回文自动机算法分治、动态dp、生成函数、计算几何其它OI Wiki、算法可视化、SAM可视化、题号查找器、图可视化、OEIS、MaHua在线Markdown编辑器、矩阵乘法、图床搭建、MiNa]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3372]线段树1]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3372-%E7%BA%BF%E6%AE%B5%E6%A0%911%2F</url>
    <content type="text"><![CDATA[此处题面去了 WC2019 的同学应该对 指令集 有些印象，没去的同学 ( 比如我 ) 可能也通过一些途径了解到了这个暴力踩标程的毒瘤 ( 据说现场踩 Ynoi五彩斑斓的世界 ) 。但是由于我太弱，实在过不了那道题 dllxl Orz ，所以我就来拿这道题练手了。一、指令集是什么？其实就是压位，常用的是压256位。也有能压512位的，但大部分情况不支持 ( 硬件 + 软件 ) 。二、它为什么快？就像压位高精会比裸高精快， bitset 比 bool数组 快一样，你把8个32位的 int 压成一个256位的玩意儿，每次操作可以看成是同时对8个 int 进行操作 ( 但其实并不是这样 ) ，所以理论上常数会是原来的 $\frac{1}{8}$ ( 但其实做不到 $\frac{1}{8}$ ) 。三、它要怎么用？请自行摸索首先你需要 immintrin.h 库，里面啥都有然后再在程序前加上 #pragma GCC target(&quot;avx,avx2&quot;) ，这样你就可以把你的 int 啊 long long 啊什么的压成 __m256i ，把 float 压成 __m256 ，还能把 double 压成 __m256d 。什么你问我具体怎么做？我不知道啊.jpg这里是连快读都没用的$O\left(n^2\right)$暴力评测记录。最后附上这道题的程序，想学学指令集的可以看看：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#pragma GCC optimize("Ofast,fast-math")#pragma GCC target("avx,avx2")#include &lt;cstdio&gt;#include &lt;immintrin.h&gt;int n,m,num,x[5],opt,p,q,k;__m256i a[25010];inline void add(int l,int r,int v) &#123; while(((l-1)&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1]+=v,++l; if(l==r+1)return; while((r&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1]+=v,--r; if(l==r+1)return; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(v,v,v,v); while(l&lt;=r)a[l]=_mm256_add_epi64(a[l],s),++l;&#125;inline long long query(int l,int r) &#123; long long ans(0); while(((l-1)&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1],++l; if(l==r+1)return ans; while((r&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1],--r; if(l==r+1)return ans; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(0,0,0,0); while(l&lt;=r)s=_mm256_add_epi64(a[l],s),++l; for(int i=0;i&lt;4;++i) ans+=((long long*)&amp;s)[i]; return ans;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m);num=n&gt;&gt;2; for(int i=1;i&lt;=num;++i) &#123; for(int j=1;j&lt;=4;++j) scanf("%d",x+j); a[i]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); &#125; for(int i=1;i&lt;=(n&amp;3);++i) scanf("%d",x+i); a[++num]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); while(m--) &#123; scanf("%d%d%d",&amp;opt,&amp;p,&amp;q); if(opt==1) scanf("%d",&amp;k),add(p,q,k); else printf("%lld\n",query(p,q)); &#125; return 0;&#125;这道题要开 long long ，如果是 int 的话程序第一句的 Ofast 优化去掉也能过！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[JLOI2014]松鼠的新家]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-JLOI2014-%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[此处题面由于树上两点路径唯一，维尼的路线也是唯一的，因此我们只要 统计维尼经过每个点的次数 即可。而树上路径又跟 LCA 什么的有关，因此这道题的做法就多种多样了。由于只有一次询问，比较容易想到的做法是 树上差分 后求 LCA 轻松搞定。再想深一点你会发现这道题简直就是 树链剖分 的板子，再加上这道题不用维护什么子树信息，所以 树链剖分 能做 Link/Cut Tree 当然也能做！需要注意的几点：这道题 LCT 得卡常，写的时候注意不要太飘；由于两条链相交的点会被重复计算，因此每次加的时候链头链尾要有一个减 1 (我是链尾)；最后一个点是不需要准备糖果的！输出答案的时候记得把标记都下放了 (我是先 makeroot 再输出) 。1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;cstdio&gt;#define N 300010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re registerinline void swap(re int&amp;a,re int&amp;b)&#123;re int tmp(a);a=b,b=tmp;&#125;int ch[N][2],fa[N],rev[N],val[N],addv[N];inline void add(re int x,re int y)&#123;val[x]+=y,addv[x]+=y;&#125;inline void down(re int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(re int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(re int x) &#123; re int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;&#125;inline void splay(re int x) &#123; re int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;&#125;inline void access(re int x)&#123;for(re int y(0);x;x=fa[y=x])splay(x),rc(x)=y;&#125;inline void mrt(re int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void link(re int x,re int y)&#123;mrt(x),fa[x]=y;&#125;int n,a[N],x,y;int main() &#123; scanf("%d",&amp;n); for(re int i(1);i&lt;=n;++i) scanf("%d",a+i); for(re int i(1);i&lt;n;++i) scanf("%d%d",&amp;x,&amp;y),link(x,y); for(re int i(1);i&lt;n;++i) --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1); for(re int i(1);i&lt;=n;++i) mrt(i),printf("%d\n",val[i]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[SDOI2011]染色]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-SDOI2011-%E6%9F%93%E8%89%B2%2F</url>
    <content type="text"><![CDATA[此处题面这道题的做法其实已经很明显了， 树链剖分 + 线段树 ，只是看到区间赋值心血来潮想用 珂朵莉树 水，结果就过了╮(╯▽╰)╭操作 1 就是 区间推平 ( assign ) ，操作 2 可以像找 最近公共祖先 ( LCA ) 一样一边往上方跳一边统计，由于珂朵莉树的结点存储的是一段值相同的连续区间，我们只需要记录上一次访问的结点的值与当前结点的值比较，若不同则更新并计数。值得注意的 $3$ 点：由于我们是统计链上的连续段，所以我们应从深度大的结点往小的枚举。由于我们是从链的两端分别往上跳，所以我们需要分别记录两边上次访问的结点的值。最后处于同一条链上时，需要考虑两端的值相同的情况。最后放上 $AC$ 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include &lt;cstdio&gt;#include &lt;set&gt;using std::set;#define N 100010struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V)&#123;&#125; inline int operator&lt;(const node&amp;x)const&#123;return l&lt;x.l;&#125;&#125;;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;inline IT split(int pos) &#123; IT it(--s.upper_bound(node(pos))); if(it-&gt;l==pos) return it; int L(it-&gt;l),R(it-&gt;r),V(it-&gt;v); s.erase(it),s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;inline void assign(int l,int r,int v) &#123; IT itr(split(r+1)),itl(split(l)); s.erase(itl,itr);s.insert(node(l,r,v));&#125;int n,m,a[N],x,y,z;char opt;int e,bg[N],nx[N&lt;&lt;1],to[N&lt;&lt;1];inline void link(int u,int v)&#123;to[++e]=v,nx[e]=bg[u],bg[u]=e;&#125;int fa[N],dep[N],siz[N],ws[N];void dfs1(int now,int f) &#123; fa[now]=f,dep[now]=dep[f]+1,siz[now]=1; int mx(-1); for(int i=bg[now];i;i=nx[i]) if(to[i]!=f) &#123; dfs1(to[i],now); siz[now]+=siz[to[i]]; if(siz[to[i]]&gt;mx) mx=siz[to[i]],ws[now]=to[i]; &#125;&#125;int cnt,top[N],id[N],wt[N];void dfs2(int now,int tp) &#123; top[now]=tp,id[now]=++cnt,wt[cnt]=a[now]; if(!ws[now]) return; dfs2(ws[now],tp); for(int i=bg[now];i;i=nx[i]) if(to[i]!=fa[now]&amp;&amp;to[i]!=ws[now]) dfs2(to[i],to[i]);&#125;inline void change(int x,int y,int z) &#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; assign(id[top[x]],id[x],z); x=fa[top[x]]; &#125; else &#123; assign(id[top[y]],id[y],z); y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) assign(id[y],id[x],z); else assign(id[x],id[y],z);&#125;inline int query(int x,int y) &#123; int ans(0),lasta(0),lastb(0); IT itl,itr; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; itr=split(id[x]+1),itl=split(id[top[x]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; x=fa[top[x]]; &#125; else &#123; itr=split(id[y]+1),itl=split(id[top[y]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) &#123; itr=split(id[x]+1),itl=split(id[y]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; else &#123; itr=split(id[y]+1),itl=split(id[x]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; return ans-(lasta==lastb);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) scanf("%d",a+i); for(int i=1;i&lt;n;++i) &#123; scanf("%d%d",&amp;x,&amp;y); link(x,y),link(y,x); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=n;++i) s.insert(node(i,i,wt[i])); while(m--) &#123; scanf("\n%c%d%d",&amp;opt,&amp;x,&amp;y); if(opt=='C') &#123; scanf("%d",&amp;z); change(x,y,z); &#125; else printf("%d\n",query(x,y)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu1047]校门外的树]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu1047-%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[此处题面看见一堆 dalao 题解写树状数组线段树，蒟蒻在这里安利一种毒瘤数据结构——珂朵莉树。一、介绍。珂朵莉树 (ChthollyTree) ，又名 OldDriverTree (老司机树)，简称 ODT ，是一种非常暴力的数据结构，它将一段值相同的区间以三元组 &lt; 左端点，右端点，值 &gt; 的方式存储起来，因此它的效率是建立在区间推平操作 (assign) 上的(也就是本题的砍树)。二、存储方式。珂朵莉树的存储基于平衡树(我这里为了方便用了 STL 的 set )，这里定义珂朵莉树的结点为：1234567struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;这里的 l 和 r 是区间的左右端点(闭区间)，v 是该区间的值(表示这一区间内所有元素的值都是v)，然后是构造函数和重载运算符，这里重载成比较区间左端点。最后把区间扔进平衡树就行了：12set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;三、核心操作。珂朵莉树的操作是基于一个核心操作 split 的，传入参数 pos 后，它能返回左端点值为 pos 的结点的迭代器，如果不存在这样的结点，它就会把包含 pos 的结点 &lt; l，r，v &gt; 拆成 &lt; l , pos-1 , v &gt; 和 &lt; pos , r , v &gt; ，然后返回后面这个结点的迭代器。先上代码：123456789IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;一行行来看：1IT it=s.lower_bound(node(pos));lower_bound 是获取左端点大于等于 pos 的第一个结点。1if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it;如果这个结点的左端点正好是 pos ，我们就直接返回它。12--it;int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v;否则的话 —it 得到的就是包含 pos 的结点，我们用 L、R、V 储存它的左右端点和值。1s.erase(it);然后我们删掉这个结点。12s.insert(node(L,pos-1,V));return s.insert(node(pos,R,V)).first;最后我们插入两个新的结点，左右端点分别是 &lt; L、pos-1 &gt; 和 &lt; pos、R &gt; ，顺便返回后面这个结点的迭代器。这样我们就完成了 split 操作。四、区间推平。这是保证珂朵莉树复杂度不至于爆炸的重要操作，它能将一个区间内的值变得一样，本题的砍树就是区间赋值为 0 。先上代码：12345void assign(int l,int r,int v) &#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,v));&#125;看上去十分的暴力，事实上珂朵莉树就是这么暴力的数据结构。稍微解释一下代码：1IT itl=split(l),itr=split(r+1);itl 指向的结点左端点为 l ，itr 指向的结点左端点为 r+1 。1s.erase(itl,itr);删去平衡树中 [ itl , itr ) 的结点(左闭右开区间)。1s.insert(node(l,r,v));直接插入一个 &lt; l , r &gt; ，值为v的区间。就是这么直接暴力！Upd：由于某些未知原因（珂学规定），珂朵莉树提取区间时需要先 split 右端点！五、其他操作。1. 初始化初始化操作就是直接插入，本题所有树默认都是种上的，全部赋值为 1 就行：1s.insert(node(0,l,1));2. 区间操作区间操作的话这里就以题目的求和为例，先上代码：1234567int sum(int l,int r) &#123; int _sum=0; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) _sum+=(itl-&gt;v)*((itl-&gt;r)-(itl-&gt;l)+1); return _sum;&#125;同样是非常的暴力，直接取出所有区间内的结点暴力求和就行了，其他的操作如区间加法乘法什么的也是一样的，取出结点遍历一遍就行。六、本题代码。最后放上本题AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;cstdio&gt;#include&lt;set&gt;using namespace std;struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;int l,m,x,y,_sum;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;void remove(int l,int r) &#123; IT itl=split(l),itr=split(r+1); s.erase(itl,itr); s.insert(node(l,r,0));&#125;void sum() &#123; for(IT it=s.begin();it!=s.end();++it) _sum+=it-&gt;v*(it-&gt;r-it-&gt;l+1);&#125;int main() &#123; scanf("%d%d",&amp;l,&amp;m); s.insert(node(0,l,1)); for(int i=1;i&lt;=m;++i) &#123; scanf("%d%d",&amp;x,&amp;y); remove(x,y); &#125; sum(); printf("%d",_sum);&#125;七、总结珂朵莉树的效率建立在区间推平操作 (assign) 上，它能使结点数量快速减小从而保证时间复杂度，因此珂朵莉树十分容易被卡，不到万不得已还是得乖乖用别的数据结构，不过它的代码十分简单，考场上写不出别的数据结构时也是可以交一个珂朵莉树的。]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
</search>
