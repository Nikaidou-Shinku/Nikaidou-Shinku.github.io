<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【题解】[Luogu5494]多项式双曲函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5494-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题并没有什么很难的东西，我就主要讲讲怎么降低常数。正文首先众所周知双曲三角函数是可以化成几个基本初等函数的运算的，具体来说：\sinh(x)=\frac{e^x-e^{-x}}{2}\cosh(x)=\frac{e^x+e^{-x}}{2}\operatorname{sech}(x)=\frac{2}{e^x+e^{-x}}接下来就很容易了，直接按照这个算即可。常数优化但是你会发现，有的人写的多项式跑得就是比你快，而且快好几倍！现在我就介绍一些比较常用的优化常数的方法：优化开关$\text{O2}$ 比什么都管用，先打开再说取模优化众所周知 $\text{C++}$ 取模运算慢得出奇，如果能优化取模肯定是会快的。加法取模加法取模可以用在结果小于 $2\times\text{MOD}$ 的情况下，具体来说基本就是两个数相加减的时候。123inline void upd(int&amp;x) &#123; x+=x&gt;&gt;31&amp;MOD;&#125;上面的代码等价于下面的代码：123inline void upd(int&amp;x) &#123; if(x&lt;0) x+=MOD;&#125;但是第一份代码运用了位运算，速度十分可观。它的原理是对于一个 32位有符号整数 ，负数右移 $31$ 位会变成 $-1$ ，二进制位下就是全 $1$ ，而非负数右移 $31$ 位会变成 $0$ 。使用的时候就是两个数相加之后减去 $\text{MOD}$ ，再将结果 upd 一下。乘法取模乘法取模要复杂一些，一般不常用。有兴趣可以去 $\text{Min_25}$ 的博客了解一下：地址。预处理原根这是个大优化，有的时候能让你的常数减小到原来的 $\frac 25$ ！一般写 $\text{NTT}$ 的时候每次要根据长度重新处理蝴蝶变换的数组，做 $\text{NTT}$ 的过程中还要现场算原根的各次幂。这部分要做大量的乘法和取模运算，如果能预处理出来，只做一次，常数就能有极大优化！另外有的人预处理的时候数组大小是 $O(n\log n)$ 的，其实有一维并不需要，因为长度总是 $2$ 的整数次幂，只要按照最大的长度预处理即可。其它优化有时候你需要将数组一段清空或者移到另一个数组中，可以使用 cstring 库里的 memset 和 memcpy 完成。但我感觉优化效果不大，所以就没用。最后还有一些从过程上进行的比较复杂的优化，我也不会所以就不讲了，有兴趣可以去论文哥的博客了解一下：地址。贴一下此题代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 262210typedef long long i64;typedef unsigned long long u64;inline void upd(int&amp;x) &#123; x+=x&gt;&gt;31&amp;MOD;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int inv[N];inline void pre(int n) &#123; inv[1]=1; for(int i=2;i&lt;=n;++i) inv[i]=(i64)(MOD-MOD/i)*inv[MOD%i]%MOD;&#125;int lmt(1),r[N],w[N],qaq;inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); int l(getLen(deg&lt;&lt;1)); for(int i=0;i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) &#123; qaq=b[i]; b[i]=2ll-(i64)qaq*tmp[i]%MOD; upd(b[i]); b[i]=(i64)b[i]*qaq%MOD; &#125; IDFT(b,l); for(int i=deg;i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(int i=0;i+1&lt;deg;++i) b[i]=(i64)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;inline void getInt(int*a,int*b,int deg) &#123; for(int i=1;i&lt;deg;++i) b[i]=(i64)a[i-1]*inv[i]%MOD; b[0]=0;&#125;inline void getLn(int*a,int*b,int deg) &#123; static int tmp[N]; getInv(a,tmp,deg); getDer(a,b,deg); int l(getLen(deg&lt;&lt;1)); DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) tmp[i]=(i64)tmp[i]*b[i]%MOD; IDFT(tmp,l); getInt(tmp,b,deg); for(int i=0;i&lt;l;++i) tmp[i]=0; for(int i=deg;i&lt;l;++i) b[i]=0;&#125;void getExp(int*a,int*b,int deg) &#123; if(deg==1) b[0]=1; else &#123; static int tmp[N]; getExp(a,b,(deg+1)&gt;&gt;1); getLn(b,tmp,deg); int l(getLen(deg&lt;&lt;1)); for(int i=0;i&lt;l;++i) &#123; if(i&lt;deg) &#123; tmp[i]=a[i]-tmp[i]; upd(tmp[i]); &#125; else tmp[i]=0; &#125; ++tmp[0]; DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) b[i]=(i64)b[i]*tmp[i]%MOD; IDFT(b,l); for(int i=deg;i&lt;l;++i) b[i]=tmp[i]=0; &#125;&#125;int n,type,f[N];int xp[N],ixp[N],sm[N],dc[N];int Sinh[N],Cosh[N],Sech[N];int main() &#123; scanf("%d%d",&amp;n,&amp;type); pre(n); init(n&lt;&lt;1); for(int i=0;i&lt;n;++i) scanf("%d",f+i); getExp(f,xp,n); getInv(xp,ixp,n); if(type&amp;1) &#123; for(int i=0;i&lt;n;++i) &#123; dc[i]=xp[i]-ixp[i]; upd(dc[i]); Sinh[i]=(i64)dc[i]*inv[2]%MOD; &#125; for(int i=0;i&lt;n;++i) printf("%d ",Sinh[i]); putchar('\n'); &#125; if(type&amp;2) &#123; for(int i=0;i&lt;n;++i) &#123; sm[i]=xp[i]+ixp[i]-MOD; upd(sm[i]); Cosh[i]=(i64)sm[i]*inv[2]%MOD; &#125; for(int i=0;i&lt;n;++i) printf("%d ",Cosh[i]); putchar('\n'); &#125; if(type&amp;4) &#123; if(type&amp;2) &#123; getInv(Cosh,Sech,n); for(int i=0;i&lt;n;++i) printf("%d ",Sech[i]); &#125; else &#123; for(int i=0;i&lt;n;++i) &#123; sm[i]=xp[i]+ixp[i]-MOD; upd(sm[i]); &#125; getInv(sm,Sech,n); for(int i=0;i&lt;n;++i) &#123; Sech[i]=(Sech[i]&lt;&lt;1)-MOD; upd(Sech[i]); &#125; for(int i=0;i&lt;n;++i) printf("%d ",Sech[i]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.8杂题选讲]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-8%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意给你一个长度为 $n$ 的序列 $a$ 和一个常数 $m$ 。定义 $f_{l,x}$ 为区间 $[l,l+m]$ 中 $&lt;x$ 的数的个数。有 $m$ 组询问，每组询问给定 $l,r,x$ ，询问 $\min\{f_{i,x}\}~~(l\leqslant i\leqslant r)$ 。$n,m\leqslant10^5$强制在线，空间 $\text{64MiB}$ 。题解分块，维护块内最大值暂咕T2题意有一棵 $n$ 个点的树，每条边有一个颜色黑或白，求有多少条路径，其中黑白边的数量满足 $2\times\min(w,b)\geqslant\max(w,b)$ 。$n\leqslant10^5$题解暂咕T3题意天空中有 $n$ 朵云，第 $i$ 朵云出现的时间是 $[l_i,r_i]$ ，你可以用 $c_i$ 的代价使第 $i$ 朵云消失，你最多可以花费 $C$ 的代价，保证 $C$ 最多让两朵云消失， $m$ 次询问，第 $i$ 次询问从 $0$ 时刻开始走，要走多久才能共经过 $w_i$ 时间的无云区间。$n,m\leqslant10^5$题解暂咕T4题意给出一个长度为 $n$ 的不降序列 $A$求长度为 $n$ 的排列 $B$ ，满足 $\min\{|A_{B_i}-A_{B_{i-1}}|\}$ 最大$n\leqslant10^5$ , $A_i\leqslant10^9$题解暂咕T5题意有一张 $n$ 个点 $m$ 条边的简单无向图，每条边上有一个正整数边权， $s$ 号点到 $t$ 号点的最短路长度为 $L$ 。现在把 $m$ 条边中一些边的边权抹去，求出一组边的赋值方案使得最短路依旧是 $L$ 。$n,m\leqslant5\times10^5$ , $L\leqslant10^9$题解暂咕T6题意弑尽破净的第四分块题解咕咕咕T7题意给你一个长度为 $n$ 的序列 $a$ ， $m$ 次操作，每次操作在 $i$ 位置上放 $c$ 个球，并询问位置 $y$ 上有多少个球，然后把 $x$ 位置的球放到 $a_x$ 上去，强制在线。$n,m\leqslant10^5$题解等价于在基环内向树上游走，环上可以开数组维护树上有两种做法：重链剖分后用堆维护每个元素到链顶的距离二维线段树数子树内某一深度的点T8题意$n$ 个数 $w_1,w_2,\ldots,w_n$ ，求一个最大的 $k$ ，使得能选出 $k$ 个数，使得它们模某个数 $m$ 相等，求出 $k$ 的最大值，并使 $k$ 最大的情况下 $m$ 尽量大。$m\geqslant2$ , $n\leqslant10^5$ , $w_i\leqslant10^7$题解随机选出一个数，这个数在答案集合中的概率是大于 $\frac 12$ 的。暂咕T9题意给你两个数 $l,r$ ，求 $l\sim r$ 除掉一个最大质因子后的最大质因子的和。$1\leqslant l\leqslant r\leqslant10^{11}$题解$\text{Min_25}$ 筛T10题意给出一个 $n\times m$ 大小的矩阵，每个位置可以填 $[1,c]$ 中的任意一个数，要求填完之后不能有两行或两列完全相同，求方案数。$n,m\leqslant5000$题解斯特林反演]]></content>
      <tags>
        <tag>讲课</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.7模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-7%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5489]EntropyIncreaser与动态图]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5489-EntropyIncreaser%E4%B8%8E%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题其实没有多难，静下来慢慢写还是十分可做的，不失为一道 $\text{LCT}$ 练手好题。正文首先看到 $1$ 操作连边，第一反应应该就是 $\text{Link/Cut Tree}$ 了，然而怎么维护割边割点数量呢？我们分开讨论。割边考虑对于一个环，环上所有边一定不会是割边；而对于一条链，链上所有边一定是割边。我们可以直接维护每条边是不是割边，初始时所有边都是割边，当某次加边操作产生了环，则环上所有边都不会成为割边了。具体来讲，边转点后所有边权值均为 $1$ ，当某次 $\text{Link}$ 的两结点已经连通，则将两结点间的链上的边全部赋值为 $0$ ，同时维护和即可。割点割点不像割边那样好处理了。考虑静态的情况，静态割点有一个比较套路的方法是用圆方树，我们可以尝试动态地维护一棵圆方树：每次连边产生环就将环上所有点连到一个方点上来。考虑这样做的复杂度：假设环的长度是 $L$ ，每次会用 $O(L\log n)$ 的复杂度删去一个长为 $O(L)$ 的环，均摊复杂度为 $O(n\log n)$ 。最后于是使用两棵 $\text{LCT}$ 分别维护割边和割点即可。参考代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;namespace Summer &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],mark[N]; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void NaCly_Fish_Orz(int x) &#123; if(x) &#123; val[x]=sumv[x]=0; mark[x]=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; if(mark[x]) &#123; NaCly_Fish_Orz(lc(x)); NaCly_Fish_Orz(rc(x)); mark[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125;&#125;namespace Pockets &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],st[N],num; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125; void print(int now) &#123; if(now) &#123; down(now); print(lc(now)); st[++num]=now; print(rc(now)); &#125; &#125;&#125;int n,q,opt,u,v,last,tot,ans,SummerPockets;int fa[N];inline int find(int x) &#123; return x==fa[x]?x:fa[x]=find(fa[x]);&#125;inline void getEdge(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Summer::mrt(u); Summer::access(v); Summer::splay(v); ans=Summer::sumv[v];&#125;inline void getPoint(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); ans=Pockets::sumv[v];&#125;inline void link(int u,int v) &#123; int x=find(u),y=find(v); if(x==y) &#123; Summer::mrt(u); Summer::access(v); Summer::splay(v); Summer::NaCly_Fish_Orz(v); getPoint(u,v); if(ans&gt;2) &#123; ++SummerPockets; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); Pockets::num=0; Pockets::print(v); for(int i=1;i&lt;Pockets::num;++i) Pockets::cut(Pockets::st[i],Pockets::st[i+1]); for(int i=1;i&lt;=Pockets::num;++i) Pockets::link(Pockets::st[i],SummerPockets); &#125; &#125; else &#123; ++tot; fa[y]=x; Summer::val[tot]=1; Summer::link(u,tot); Summer::link(tot,v); Pockets::link(u,v); &#125;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;q); tot=SummerPockets=n; for(int i=1;i&lt;=n;++i) fa[i]=i,Pockets::val[i]=1; while(q--) &#123; scanf("%d%d%d",&amp;opt,&amp;u,&amp;v); u^=last,v^=last; switch(opt) &#123; case 1: &#123; link(u,v); break; &#125; case 2: &#123; getEdge(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; default: &#123; getPoint(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu2617]DynamicRankings]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu2617-DynamicRankings%2F</url>
    <content type="text"><![CDATA[此处题面前言在题解区看见了一个用分块写这个题的，但是在数据加强到 $10^5$ 后貌似已经过不去了（或许卡卡常还有救），难道分块真的就比不过这些树套树整体二分？不不不，分块的潜力远远不止这些！分块无快读无 $\text{O2}$ 评测记录正文之前那篇分块题解的做法是二分答案，然后块内二分检验，这样做的时间复杂度是 $O(n\sqrt n\log n\log V)$ 的，其中 $V$ 是值域。然而二分跟分块就很不搭，我们考虑一个不需要二分也能求第 $k$ 小的方法。先离散化，对序列分块，考虑维护块内每个数的出现次数，再将值域分块，维护每个块内每个值域块中数的出现次数。然后做前缀和，这样我们就能 $O(1)$ 查询一段块中每个数的出现次数以及每个值域块中数的出现次数。这部分的预处理是 $O(n\sqrt n)$ 的。查询时考虑将散块中每个数及值域块中数的出现次数先记录下来，这部分是 $O(\sqrt n)$ 的，然后跳值域块，超过 $k$ 了就跳块内的数，直到找到正好超过 $k$ 的位置，这样可以 $O(\sqrt n)$ 查询第 $k$ 小。修改时只要考虑对预处理的信息的影响即可，由于我们预处理的是前缀和，所以每次修改至多修改 $O(\sqrt n)$ 个块。这样我们就得到了一个 $O(n\sqrt n)$ 的优秀算法，可以通过此题。最后这个做法是另一个题的 $trick$ ，有兴趣的可以去试一下：望月悲叹的最初分块。最后给出代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using std::sort;using std::unique;using std::lower_bound;#define N 100010inline int min(int a,int b) &#123; return a&lt;b?a:b;&#125;struct node&#123;int opt,l,r,k;&#125;q[N];int n,m,a[N],b[N&lt;&lt;1],tot,l,r,k;char opt;int L[320],R[320];int siz,szv,num,numsz;int bl[N],blv[N&lt;&lt;1];int sumc[320][N&lt;&lt;1];int sums[320][450];inline void modify(int x,int y) &#123; for(int i=bl[x];i&lt;=num;++i) &#123; --sumc[i][a[x]]; --sums[i][blv[a[x]]]; ++sumc[i][y]; ++sums[i][blv[y]]; &#125; a[x]=y;&#125;int tmpa[N&lt;&lt;1],tmpc[450];inline int query(int l,int r,int k) &#123; int ans; if(bl[l]==bl[r]) &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; else &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=R[bl[l]];++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=L[bl[r]];i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]+sumc[bl[r]-1][i]-sumc[bl[l]][i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=R[bl[l]];++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; for(int i=L[bl[r]];i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; return ans;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf("%d",a+i); b[++tot]=a[i]; &#125; for(int i=1;i&lt;=m;++i) &#123; scanf("\n%c%d%d",&amp;opt,&amp;l,&amp;r); if(opt=='Q') &#123; scanf("%d",&amp;k); q[i]=(node)&#123;1,l,r,k&#125;; &#125; else &#123; q[i]=(node)&#123;2,l,r,0&#125;; b[++tot]=r; &#125; &#125; sort(b+1,b+tot+1); tot=unique(b+1,b+tot+1)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+tot+1,a[i])-b; siz=ceil(sqrt(n)); szv=ceil(sqrt(tot)); for(int i=1;i&lt;=n;++i) bl[i]=(i-1)/siz+1; for(int i=1;i&lt;=tot;++i) blv[i]=(i-1)/szv+1; num=bl[n],numsz=blv[tot]; for(int i=1;i&lt;=num;++i) &#123; L[i]=R[i-1]+1; R[i]=min(L[i]+siz-1,n); for(int j=1;j&lt;=tot;++j) sumc[i][j]=sumc[i-1][j]; for(int j=1;j&lt;=numsz;++j) sums[i][j]=sums[i-1][j]; for(int j=L[i];j&lt;=R[i];++j) &#123; ++sumc[i][a[j]]; ++sums[i][blv[a[j]]]; &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; if(q[i].opt==1) printf("%d\n",query(q[i].l,q[i].r,q[i].k)); else modify(q[i].l,lower_bound(b+1,b+tot+1,q[i].r)-b); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.6字符串]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-6%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意有一个长度为 $n$ 的字符串，已知第 $i$ 种字符刚好有 $a_i$ 个，求 $kmp$ 数组之和最小是多少。$n,字符种数\leqslant10^5$题解将出现次数最少的字符放 $1$ 个在最前面，然后放其它字符，最后放剩下的字符特判只有 $1$ 种字符的情况T2题意定义两个字符串相同为它们的最小字符表示法相同给定 $S,T$ ，求 $T$ 在 $S$ 中的出现次数$总串长\leqslant10^6$题解以每个字符上一次出现的位置为值做 $kmp$T3题意求有多少个长度为 $n$ 的字符串， $kmp$ 数组 $next[n]=0$ ，并输出满足条件的字典序第 $k$ 大的 $01$ 串。$n\leqslant64$ , $T\leqslant1000$题解设 $f_i$ 表示长度为 $i$ 的，没有前缀等于后缀的字符串数量。暂咕T4题意有多少个长度为 $k$ 的，最小循环表示法唯一且最小表示法就是本身的串的个数。$k\leqslant10^6$题解枚举循环节，莫比乌斯反演容斥T5题意如果两个长度为 $n$ 的字符串 $S,T$ 满足对于任意一对整数 $(i,j)$ ，如果 $S[i,j]$ 为回文串， $T[i,j]$ 也为回文串，我们称 $S,T$ 为回文等价，给出 $S$ ，求有多少 $T$ 满足与 $S$ 回文等价。$|S|,|T|\leqslant10^6$题解做 $Manacher$ 时将字符相同的位置用并查集连起来T6题意给你一个长度为 $n$ 的字符串，求一个最大的 $k$ ，使得存在一个字符串序列 $a_1,a_2,\ldots,a_k$ ，其中 $a_i$ 在 $a_{i+1}$ 中出现两次，且 $a_i$ 为给出的串的子串$n\leqslant10^5$题解暂咕T7题意给一个字符串，求一个最大长度 $L\leqslant\frac n2$ ，使得前 $L$ 个字符与后 $L$ 个字符循环同构。$n\leqslant10^6$题解暂咕T8题意给一个长度为 $n$ 的字符串 $s$ ，有 $q$ 次询问，每次询问给出两个区间，求第一个区间中字典序最小的子串使得该子串的字典序大于第二个区间的串。$n\leqslant10^5$ , $q\leqslant2\times10^5$题解建 $\text{SAM}$ ，二分 + 倍增 + 线段树查询T9题意给你长度为 $n$ 的字符串 $T$ ，你可以用 $T$ 中的子串去拼另一个字符串，能拼出字符串 $S$ 的方案中我们选择步数最少的作为拼出 $S$ 的方案，求长度为 $m$ 的能拼出的字符串中，方案步数最大是多少。$n\leqslant10^5$ , $m\leqslant10^{18}$题解二分 + 矩阵乘法]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.5模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-5%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.4计数]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-4%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意小 $\text{A}$ 会投 $a$ 次硬币，小 $\text{B}$ 会投 $b$ 次硬币，求有多少种情况，小 $\text{A}$ 投出的硬币正面向上的次数严格大于小 $\text{B}$ 投出的硬币正面向上的次数，答案保留最后 $k$ 位$1\leqslant a,b\leqslant10^{15}$ , $b\leqslant a\leqslant b+10000$ , $1\leqslant k\leqslant9$题解设 $x$ 为小 $\text{A}$ 投出的向上的次数，设 $y$ 为小 $\text{B}$ 投出的向下的次数。有 $x+y&gt;b$ ，枚举 $x+y$答案即是 $\sum_{i=b+1}^{a+b}{\binom{a+b}{i}}$T2题意求 $n$ 个点 $m$ 条边的无向连通图的个数，点有标号$n\leqslant30$ , $m\leqslant100$题解设 $f_{i,j}$ 表示 $i$ 个点 $j$ 条边的无向连通图，枚举与 $1$ 相连的连通块转移$f_{i,j}=\binom{\frac{i(i-1)}{2}}{j}-\sum_{x=1}^{i}{\sum_{k=0}^{j}{f_{x,k}\times\binom{\frac{(i-x)(i-x-1)}{2}}{j-k}\times\binom{n-1}{x-1}}}$T3题意给定一个 $n$ 个点的图，初始时没有边每次随机选择两个不相同的点连接起来求期望要多少次才能使整个图连通$n\leqslant30$题解考虑到 $30$ 的拆分数只有 $5600$ 左右，可以直接将图的连通情况作为状态，然后 $O(n^2)$ 转移T4题意给出一个 $n$ 个点 $m$ 条边的无向图，每条边的权值不固定，为 $[0,1]$ 内的随机变量，无重边无自环，求最小生成树上最大边的期望边权$n\leqslant10$ , $m\leqslant\frac{n(n-1)}{2}$题解设 $f_{s,i}$ 表示连通块 $s$ 里连了 $i$ 条边的方案数设 $g_{s,i}$ 表示在点集 $s$ 里连了 $i$ 条边且不连通的方案数暂咕[SHOI2017] 分手是祝愿题面题目链接Zeit und Raum trennen dich und mich.时空将你我分开。$\text{B}$ 君在玩一个游戏，这个游戏由 $n$ 个灯和 $n$ 个开关组成，给定这 $n$ 个灯的初始状态，下标为 $1\sim n$ 的正整数。每个灯有两个状态亮或灭，我们用 $1$ 来表示这个灯是亮的，用 $0$ 表示这个灯是灭的，游戏的目标是使所有灯都灭掉。但是当操作第 $i$ 个开关时，所有编号为 $i$ 的约数（包括 $1$ 和 $i$ ）的灯的状态都会被改变，即从亮变成灭，或者是从灭变成亮。$\text{B}$ 君发现这个游戏很难，于是想到了这样的一个策略，每次等概率随机操作一个开关，直到所有灯都灭掉。这个策略需要的操作次数很多， $\text{B}$ 君想到这样的一个优化。如果当前局面，可以通过操作小于等于 $k$ 个开关使所有灯都灭掉，那么他将不再随机，直接选择操作次数最小的操作方法（这个策略显然小于等于 $k$ 步）操作这些开关。$\text{B}$ 君想知道按照这个策略（也就是先随机操作，最后小于等于 $k$ 步，使用操作次数最小的操作方法）的操作次数的期望。这个期望可能很大，但是 $\text{B}$ 君发现这个期望乘以 $n!$ 一定是整数，所以他只需要知道这个整数对 $100003$ 取模之后的结果。$n\leqslant100000$题解设 $f_i$ 为从还剩 $i$ 个位置到还剩 $i-1$ 个位置的期望步数暂咕T6题意在一个直角坐标系上依次插入 $n$ 个点，每次插入之后输出当前有多少个三角形严格覆盖原点。（强制在线）$n\leqslant100000$题解考虑一个不合法的方案，对一个极角最小的点，另两个点一定在原点到该点连线的半平面内用平衡树维护即可T7题意“奋战三星期，举重五百斤”，一大群鸽子来到了 $\text{CJ}$ 的健身房，发现房间里有一排共 $n$ 个铁饼。有 $Q$ 次操作，你需要支持三种操作：1 x y 将第 $x$ 个铁饼的重量设置为 $y$2 L R 翻转第 $L$ 至第 $R$ 个铁饼3 L R W 询问仅使用 $L$ 到 $R$ 之间的铁饼能否拼出一个重量为 $W$ 的杠铃鸽子们还在健身房的天花板上发现了一个数字 $k$ 。机智的它们立刻发现，在任意时刻出现过的不同的铁饼数目是不会超过 $k$ 的。$n,Q,W\leqslant100000$ , $k\leqslant10$题解[HAOI2008]硬币购物暂咕T8题意给你一个长度为 $n$ 的序列 $A$ ，如果 $n$ 不是非降，你必须删掉一个数，直到非降为止，求不同方案数，对 $1000000007$ 取模。$n\leqslant2000$题解设 $f_i$ 表示删到长度为 $i$ 的非降序列的方案数（包含不合法）预处理 $g_i$ 为长度为 $i$ 的非降序列的个数$f_i=g_i\times(n-i)!$从小到大容斥掉不合法的方案T9题意给你一个长度为 $2n$ 的序列 $a$ ，其中有些位置上的元素是 $-1$ ，保证 $1\sim 2n$ 最多只出现一次，定义一个长度为 $n$ 的数组 $b$ ， $b_i=\min(a_{2i-1},a_{2i})$ ，求有多少种不同的 $b$ 数组。$n\leqslant300$题解把 $a$ 分成 $n$ 个二元组，则每个二元组只有 $3$ 种情况$f_{i,j,k}$ 表示从大往小考虑到第 $i$ 个数，有 $j$ 个 $(-1,x)$ ，有 $k$ 个 $(-1,y)$ 。（ $y$ 为已经填进去的）暂咕T10题意给定一个长度为 $n$ 的正整数序列 $a$求有多少个长度为 $n$ 的正整数序列 $x$ 满足对于任意 $1\leqslant i\leqslant n$ , $1\leqslant x_i\leqslant D$对于任意 $1\leqslant i&lt;j\leqslant n$ , $\max(a_i,a_j)&lt;|x_i-x_j|$$n\leqslant50$ , $a_i\leqslant40$题解按 $a_i$ 排序依次插入设 $f_{i,j,s}$ 表示插入到第 $i$ 个，还有 $j$ 个缝隙，压紧后长度为 $s$ 的方案数枚举第 $i$ 个是放在两端还是合并两个已有段转移T11题意给定一个长度为 $n$ 的整数序列 $S$求有多少个长度为 $n$ 的正整数序列 $T$使得将 $S$ 和 $T$ 排序后， $S$ 的每一位都不小于 $T$ 的每一位$n\leqslant1000$题解对 $S$ 和 $T$ 排序设 $f_i$ 表示有多少个 $T$ 的前 $i$ 位满足条件枚举第一个不满足条件的位置，用总方案减去不满足的转移]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.3模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-3%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.2网络流]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-2%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！[bzoj1280] $\text{Emmy}$卖猪pigs题面题目链接$\text{Emmy}$ 在一个养猪场工作。这个养猪场有 $m$ 个锁着的猪圈，但 $\text{Emmy}$ 并没有钥匙。有 $n$ 个顾客会到养猪场来买猪，一个接着一个。每一位顾客都会有一些猪圈的钥匙，他们会将这些猪圈打开并买走固定数目的猪。所有顾客有的钥匙和他们需要买猪的数量在事先都告诉了 $\text{Emmy}$，于是 $\text{Emmy}$ 要订一个计划，使得卖出去的猪最多。买卖的过程是这样的：一个顾客前来，并打开所有他可以打开的猪圈。然后 $\text{Emmy}$ 从这些猪圈里牵出固定数目的猪卖给顾客（最多只能和顾客需要数相等），并可以重新安排这些开着的猪圈中的猪。每个猪圈可以存放任意数目的猪。写一个程序，使得 $\text{Emmy}$ 能够卖出去尽可能多的猪。$n\leqslant100$ , $m\leqslant1000$题解暂咕[bzoj2406] 矩阵题面题目链接给定一个整数矩阵 $A[n\times m]$ ，求一个矩阵 $B[n\times m]$ 满足 $\forall1\leqslant i\leqslant n,1\leqslant j\leqslant m,B_{ij}\in[L,R]$ ，且使下式值最小：\large max= \begin{cases} \mathop{max}\limits_{1\leqslant j\leqslant m} \{|\sum_{i=1}^{n}{(A_{ij}-B_{ij})}|\}\\ \mathop{max}\limits_{1\leqslant i\leqslant n} \{|\sum_{j=1}^{m}{(A_{ij}-B_{ij})}|\} \end{cases}$n,m\leqslant 200$题解暂咕[TJOI2015] 组合数学题面题目链接为了提高智商， $\text{ZJY}$ 开始学习组合数学。某一天她解决了这样一个问题：给一个 $n\times m$ 的网格图，其中某些格子有财宝。每次从左上角出发，只能往右或下走。问至少要走几次才可能把财宝全捡完。但是她还不知足，想到了这个问题的一个变形：假设每个格子中有好多块财宝，而每一次经过一个格子至多只能捡走一块财宝，其它条件不变，至少要走几次才可能把财宝全捡完？这次她不会做了，你能帮帮她吗？$n,m\leqslant1000$题解最长链等于最少反链覆盖每个点向不能到达它的点连边，跑最长路[bzoj1189] 紧急疏散evacuate题面题目链接发生了火警，所有人员需要紧急疏散！假设每个房间是一个 $n\times m$ 的矩形区域。每个格子可以是空地、墙或者门，人们可以从门撤出房间。已知门一定在房间的边界上，并且边界上不会有空地。最初，每块空地上都有一个人，在疏散的时候，每一秒钟每个人都可以向上下左右四个方向移动一格，当然他也可以站着不动。疏散开始后，每块空地上就没有人数限制了（也就是说每块空地可以同时站无数个人）。但是，由于门很窄，每一秒钟只能有一个人移动到门的位置，一旦移动到门的位置，就表示他已经安全撤离了。现在的问题是：如果希望所有的人安全撤离，最短需要多少时间？或者告知根本不可能。$3\leqslant n,m\leqslant20$题解对时间建分层图[POI2010] Bridges题面题目链接$\text{YYD}$ 为了减肥，他来到了瘦海，这是一个巨大的海，海中有 $n$ 个小岛，小岛之间有 $m$ 座桥连接，两个小岛之间不会有两座桥，并且从一个小岛可以到另外任意一个小岛。现在 $\text{YYD}$ 想骑单车从小岛 $1$ 出发，骑过每一座桥，到达每一个小岛，然后回到小岛 $1$ 。霸中同学为了让 $\text{YYD}$ 减肥成功，召唤了大风，由于是海上，风变得十分大，经过每一座桥都有不可避免的风阻碍 $\text{YYD}$ ， $\text{YYD}$ 十分 $ddt$ ，于是用泡芙贿赂了你，希望你能帮他找出一条承受的最大风力最小的路线。$2\leqslant n\leqslant1000$ , $1\leqslant m\leqslant2000$题解二分答案，网络流检验先随机定向，检查每个点的度数对于一个点入度减出度为正的，源点向其连边，否则该点向汇点连边边权为度数差的绝对值[bzoj4213] 贪吃蛇题面题目链接最近 $\text{lwher}$ 迷上了贪吃蛇游戏，在玩了几天却从未占满全地图的情况下，他不得不承认自己是一个弱菜，只能改去开发一款更弱的贪吃蛇游戏。在开发的过程中， $\text{lwher}$ 脑洞大开，搞了一个多条蛇的模式。但由于这种模式太难操作，于是他只好改变游戏的玩法，稍微变化一下游戏目标。新的游戏是这样的：一些蛇覆盖了一个网格。每个格子要么是一个障碍物，要么是蛇的一部分。每条蛇占据了一条折线（拐角处只能水平和竖直连接），且至少占据两个格子。蛇与蛇之间不能重叠，蛇也不会与自己重叠。每条蛇还必须满足以下两个条件中的一个：两个端点所在的格子在网格的边界。蛇构成一个环，即两个端点相邻（垂直或水平，不能斜着），至少要占据 $4$ 个格子（否则没法形成环）。给定一个网格，在满足前面所述的条件下覆盖所有空地，并使得端点在网格边界（即不构成环）的蛇尽量少。（如果一条蛇既构成环，又是端点在边界，那么不计入答案）例如，以下网格：可以由下面三种方案覆盖。还有其它的方案，但是没法仅用一条不构成环的蛇就覆盖整个网格。$n,m\leqslant12$题解黑白染色，边界的点下界为 $1$ ，上界为 $2$内部的点上下界皆为 $2$ ，障碍不连边[CEOI2008] order题面题目链接有 $n$ 个工作， $m$ 种机器，每种机器你可以租或者买过来。每个工作包括若干道工序，每道工序需要某种机器来完成，你可以通过购买或租用机器来完成。现在给出这些参数，求最大利润。$1\leqslant n,m\leqslant1200$题解源点向工作连收益工作向机器连租的价格机器向汇点连买的价格用总收益减去最小割[bzoj3774] 最优选择题面题目链接小 $\text{N}$ 手上有一个 $n\times m$ 的方格图，控制某一个点要付出 $A_{ij}$ 的代价，然后某个点如果被控制了，或者它周围的所有点（上下左右）都被控制了，那么它就算是被选择了的。一个点如果被选择了，那么可以得到 $B_{ij}$ 的回报。现在请你帮小 $\text{N}$ 选一个最优的方案，使得回报减代价尽可能大。$n,m\leqslant 50$题解暂咕T9题意$p\times q$ 的网格，每个位置有 $r$ 种选择，编号为 $1\sim r$ ，每种选择都有对应收益（可能为负）限制每个点分别和它上下左右相邻的 $4$ 个点的选择编号之和不能超过 $d$最大化总收益$p,q,r\leqslant40$题解暂咕]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3383]线性筛素数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3383-%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言首先说一下，这个科技是我在 $\text{Min_25}$ 的博客里看见的，那篇博客是 $2017$ 年的了，去翻了下提交记录发现论文哥也用了这个科技，所以也并不是什么新东西。有兴趣的也可以去阅读一下那篇博客。然后，虽然这个题是线性筛素数，但是这篇题解并不是讲筛法的，而是一些奇技淫巧。若是想学习素数筛法的可以跳过这篇题解了。正文相信各位都知道一个 $O(\sqrt n)$ 判断素数的方法，也就是枚举 $2\sim\lfloor\sqrt n\rfloor$ 检查每个数是否是 $n$ 的约数。具体代码如下：123456bool check(int x) &#123; if(x==0||x==1) return false; for(int i=2;i*i&lt;=x;++i) if(x%i==0) return false; return true;&#125;这个题我们只要对于每个询问都这样判断一次即可，复杂度上界 $O(M\sqrt N)$ 。如果我的数据是 $10^6$ 个 $9840769$ ，并且你的程序没有记忆化，这个程序需要 $\text{7.7s}$ 左右的时间才能出解。我们考虑怎样优化。我们判断约数的时候需要取模，而众所周知 $\text{C++}$ 的取模是很慢的，如果能加快取模的效率，就能对运行速度有很大优化。$\text{Min_25}$ 在他的博客里讲到了这样一种优化方法：考虑到判断约数时我们只需要得知取模结果是否为 $0$ ，并不需要知道实际结果。若 $m$ 为奇数， $m’$ 为 $m$ 模 $2^{64}$ 下的逆元，且有 $n\in\left[0,2^{64}\right)$ ，则：n\equiv0\pmod{m}\ \Leftrightarrow\ (n\cdot m')\%2^{64}\leqslant\lfloor\frac{2^{64}}{m}\rfloor对于一个模数 $m$ 我们预处理出 $m’$ 和 $\lfloor\frac{2^{64}}{m}\rfloor$ ，然后我们就可以把判断 $n\%m$ 是否为 $0$ 转化为一次乘法和一次比较大小。使用这个方法，刚刚跑 $\text{7.7s}$ 的程序只需要 $\text{1.9s}$ 即可出解， $4$ 倍的效率优化！最后这个技巧不仅可以用于判断素数，也可以用于质因数分解，杜教筛、洲阁筛、 $\text{Min_25}$ 筛的预处理。但使用场合还是较少，不过效率优化还是十分明显的！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【更新中】浅谈模意义下形式幂级数的几种操作]]></title>
    <url>%2F%E3%80%90%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%91%E6%B5%85%E8%B0%88%E6%A8%A1%E6%84%8F%E4%B9%89%E4%B8%8B%E5%BD%A2%E5%BC%8F%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言近几年信息学竞赛中出现了一类利用 生成函数 进行计数的题目，这类题目往往需要一顿推导之后得出一个或几个容易计算的生成函数与代表答案的生成函数间的关系。由于这类题目往往需要将结果对一个大质数取模，因此我们可以用模意义下形式幂级数的一些操作来进行这些生成函数之间的运算。本文将从简单的离散傅里叶变换开始，逐步带你了解这一类基于离散卷积的形式幂级数操作。你需要知道的几点多项式由数或字母或两者的乘积组成的代数式叫单项式（单个数或字母也为单项式）单项式中的常数因子为单项式的系数单项式中所有字母的指数之和为单项式的次数由若干个单项式相加组成的代数式叫多项式多项式各项中次数最大的单项式的次数为多项式的次数形式幂级数定义域为 $\mathbb Z^+$ 或其有限子集的函数叫数列（也就是一些有序的数）将数列的每一项求和得到的函数叫级数，一般所讲的级数大多指无穷级数，即数列有无穷项形如 $\sum_{i=0}^{\infty}{a_i(x-x_0)^i}$ 的级数叫幂级数（ $x_0$ 为常数）其中 $a_i$ 为幂级数的系数（可以类比多项式的各项系数）若存在一个非负实数 $r$ 使得幂级数在 $ | x - x_0 | &lt; r $ 时趋近于一个确定的值（收敛），在 $ | x - x_0 | &gt; r $ 时不趋于任何值（发散），则称 $ r $ 为幂级数的收敛半径，否则称该幂级数的收敛半径为 $ +\infty $将一个数列的各项作为幂级数的系数，所得到的幂级数不一定是收敛的（收敛半径可能为 $0$ ）。但我们淡化其收敛与发散的性质，认为它是收敛的，则可以得到一个形式上类似幂级数的东西（也就是长得像幂级数），我们将其称为形式幂级数若一个形式幂级数从某一项开始，后面项的系数全部为 $0$ ，则我们称其为形式多项式离散卷积令 $f(x)$ 和 $g(x)$ 为定义在 $\mathbb R$ 上的两个可积函数，则称 $\int_{-\infty}^{\infty}{f(\tau)g(x-\tau)d\tau}$ 关于 $x$ 的函数为 $f(x)$ 与 $g(x)$ 的卷积与卷积类似，我们称数列 $c_n=\sum_{i=-\infty}^{\infty}{a_ib_{n-i}}$ 为数列 $a_n$ 与数列 $b_n$ 的离散卷积形式幂级数与幂级数一样可以进行运算，其加减运算即是将对应位的系数相加减，而其乘法运算结果定义为两个形式幂级数系数的离散卷积构成的形式幂级数形式幂级数存在乘法逆元当且仅当 $a_0\ne0$ ，且若存在，则逆元唯一后面的形式幂级数运算若无特殊说明，全部在 $\pmod{x^{n+1}}$ 意义下进行，也即为形式多项式记号与约定我们记以数列 $\{f_n\}$ 为系数的形式幂级数为 $F(x)$ 。我们记 $[x^n]F(x)$ 为 $F(x)$ 的 $n$ 次项系数。我们记 $f_ig_i$ 为 $f_i\times g_i$ ，而 $F(x)G(x)$ 为 $F(x)$ 与 $G(x)$ 的离散卷积。多项式乘法快速傅里叶变换我们知道，两个形式幂级数做乘法即为它们系数的离散卷积。假设我们已知 $F(x)$ 和 $G(x)$ 的系数，我们要求得 $H(x)=F(x)G(x)$根据定义：h_n=\sum_{i=0}^{n}{f_ig_{n-i}}\Rightarrow H(x)=\sum_{i=0}^{\infty}{\sum_{j=0}^{i}{f_jg_{i-j}x^i}}很显然，我们求出 $H(x)$ 一项的时间复杂度是 $\Theta(n)$ 的，求出 $n$ 项的时间复杂度是 $\Theta(n^2)$ 的，这肯定是不能接受的。我们来考虑怎样更快速地求得 $H(x)$ 。上面的运算是基于用系数来表示多项式的，事实上，由于 $n+1$ 个点可以唯一确定一个 $n$ 次多项式，我们可以改用 $n+1$ 个点来描述我们的多项式。并且由于我们并不关心形式幂级数的 $x$ 的取值，我们可以任意选取实数甚至虚数作为 $x$ 的值。这样做的好处是什么呢？我们发现，两个点值表达式相乘只需要将对应点的值相乘即可，也就是说，两个点值表达式做乘法运算是 $\Theta(n)$ 的！如果我们可以快速地将系数表达式转化成点值表达式，并快速地将点值表达式转化回来，就可以快速地完成多项式乘法。那么具体如何来做呢？我们先介绍一类神奇的数——单位根 $\omega$ 。单位根$n$ 次单位根是 $n$ 次幂为 $1$ 的复数。也即， $n$ 次单位根 $\omega_n$ 满足 $\omega_n^n=1$ 。由欧拉公式有 $\omega_n^k=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})$ 。在后文中，我们假设 $n$ 为 $2$ 的正整数次幂：于是单位根有这几个性质$\omega_n^{k+\frac n2}=-\omega_n^k$$\omega_{2n}^{2k}=\omega_n^k$$\omega_n^0=\omega_n^n=1$我们来简单证明一下这几个性质：$\omega_n^{k+\frac n2}=-\omega_n^k$\begin{align*} \omega_n^{k+\frac n2}&=\cos((k+\frac n2)\frac{2\pi}{n})+i\sin((k+\frac n2)\frac{2\pi}{n}) \\ &=\cos(k\times\frac{2\pi}{n}+\pi)+i\sin(k\times\frac{2\pi}{n}+\pi) \\ &=-(\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})) \\ &=-\omega_n^k \end{align*}$\omega_{2n}^{2k}=\omega_n^k$\begin{align*} \omega_{2n}^{2k}&=\cos(2k\times\frac{2\pi}{2n})+i\sin(2k\times\frac{2\pi}{2n}) \\ &=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n}) \\ &=\omega_n^k \end{align*}有了这两个性质，我们就能使用膜法了！快速傅里叶变换我们考虑将 $\omega_n$ 的 $0\sim n-1$ 次幂作为 $x$ 代入多项式 $F(x)$ 并求出点值。也即求出原多项式的离散傅里叶变换（DFT）我们先将 $F(x)$ 的各项按次数奇偶性分类：\begin{align*} F(x)&=\sum_{i=0}^{n-1}{f_ix^i} \\ &=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}+\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}} \\ \end{align*}令 $F_1(x)=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}$ ， $F_2(x)=\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}}$ ，则有 $F(x)=F_1(x^2)+xF_2(x^2)$ 。将 $\omega_n^k$ 代入 $x$ ：F(\omega_n^k)=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})再将 $\omega_n^{k+\frac n2}$ 代入 $x$ ：\begin{align*} F(\omega_n^{k+\frac n2})&=F_1(\omega_n^{2k+n})+\omega_n^{k+\frac n2}F_2(\omega_n^{2k+n}) \\ &=F_1(\omega_n^{2k}\times\omega_n^n)+(\omega_n^k\times\omega_{2n}^n)F_2(\omega_n^{2k}\times\omega_n^n) \\ &=F_1(\omega_n^{2k})-\omega_n^kF_2(\omega_n^{2k}) \end{align*}发现了吗？这是膜法！这两个式子间只有第二部分的符号有区别，也就是说，我们计算第一个式子的同时可以直接得到第二个式子的值！将这种奇偶分类求一半的操作递归下去，我们就得到了一个可以在 $\Theta(n\log n)$ 的时间复杂度内将多项式从系数表达式转化为以单位根各次幂为自变量的点值表达式的算法。快速傅里叶逆变换接下来我们再来考虑将这样的点值表达式转化回系数表达式的方法。也即离散傅里叶逆变换（IDFT）我们令 $\{y_0,y_1,y_2,\cdots,y_{n-1}\}$ 为 $\{f_0,f_1,f_2,\cdots,f_{n-1}\}$ 的离散傅里叶变换假设存在 $\{c_0,c_1,c_1,\cdots,c_{n-1}\}$ 满足 $c_k=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i}$也即 $Y(x)$ 在 $\omega_n^{-k}$ 处的点值，则有：\begin{align*} c_k&=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{(\sum_{j=0}^{n-1}{f_j(\omega_n^i)^j})(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_n^j)^i}(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_{n}^{j-k})^i}} \\ &=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}} \end{align*}令 $S(x)=\sum_{i=0}^{n-1}{x^i}$ ，将 $\omega_n^k(k\ne0)$ 代入：\because \begin{cases}\begin{align*} S(\omega_n^k)&=\sum_{i=0}^{n-1}{(\omega_n^k)^i} \\ \omega_n^kS(\omega_n^k)&=\sum_{i=1}^{n}{(\omega_n^k)^i} \\ \end{align*}\end{cases} \Rightarrow\omega_n^kS(\omega_n^k)-S(\omega_n^k)=(\omega_n^k)^n-1 \\ \therefore S(\omega_n^k)=\frac{(\omega_n^k)^n-1}{\omega_n^k-1}=0而当 $k=0$ 时显然 $S(\omega_n^0)=n$ 。接着来看之前的式子：c_k=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}}式子里面的 $\Sigma$ 当 $j\ne k$ 时值为 $0$ ，而 $j=k$ 时值为 $n$ 。因此有 $c_k=nf_k\Rightarrow f_k=\frac{c_k}{n}$于是只要对原多项式的离散傅里叶变换，以 $\omega_n^{-k}$ 为单位根做一次快速傅里叶变换，再将结果除以 $n$ 即可转化回原多项式。代码实现根据上面的理论可以很容易地写出快速傅里叶变换（FFT）的递归实现，但是一般使用时由于递归实现的常数过大，我们一般使用的是迭代实现的快速傅里叶变换。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N],b[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;b[i].re); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*b[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].re+0.1); return 0;&#125;优化三次变两次用刚刚所讲的内容做多项式乘法，需要使用三次 $\text{FFT}$ ：两次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。事实上有一个优化可以优化到只做一次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。我们把 $G(x)$ 的系数放到 $F(x)$ 的虚部里，然后对 $F(x)$ 进行 $\text{DFT}$ ，将 $F(x)$ 平方后进行 $\text{IDFT}$ ，将虚部的系数除以 $2$ 即是答案。考虑为什么这样是对的：对于 $a$ 和 $b$ ，有 $(a+bi)^2=a^2-b^2+(2abi)$ ，因此虚部系数即为答案两倍。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;a[i].im); getRev(n+m+2); DFT(a); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*a[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].im/2+0.1); return 0;&#125;MTT暂咕快速数论变换如果是在模意义下做运算，我们还有一种算法可以胜任，那就是快速数论变换（NTT）考虑到做快速傅里叶变换时我们将单位根代入求出点值，如果模意义下有与单位根性质类似的数，是否可以代替单位根完成一样的工作呢？答案是肯定的，这一类数是——原根 $g$ 。原根我们先给出阶的定义：若 $a\perp p$ 且 $p&gt;1$ ， $a$ 模 $p$ 的阶为满足 $a^n\equiv1\pmod{p}$ 的最小的 $n$ ，记为 $\delta_p(a)$ 。若 $p$ 为正整数， $a$ 是整数，且 $\delta_p(a)=\varphi(p)$ ，则 $a$ 为模 $p$ 的一个原根。（ $\varphi(n)$ 为小于等于 $n$ 的数中与 $n$ 互质的数的个数）原根有一些很有意思的性质：若模 $p$ 存在原根，则其一定有 $\varphi(\varphi(p))$ 个原根。若 $p$ 为质数， $g$ 为 $p$ 的一个原根，则 $g^i\pmod{p}$ 对于不同的 $i\in[1,p)$ 值都不同同时原根在模意义下与单位根有相同的性质，因此我们可以使用原根代替单位根在模意义下做快速数论变换。代码实现类似快速傅里叶变换，只把里面的单位根相应地换成原根，并注意取模即可。【例题】[Luogu3803] 多项式乘法 评测记录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#define MOD 998244353#define N 2100010typedef long long i64;inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(3,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125;&#125;inline void IDFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(332748118,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125; int bk(pow(lmt,MOD-2)); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N];int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;预处理原根我们来考虑一个优化：在 $\text{NTT}$ 的过程中我们多次使用了原根的各次幂，如果我们能将原根的各次幂预处理出来，而不是每次使用都计算一遍，就能有很大的常数优化！在多项式乘法中我们只做了 $3$ 次 $\text{NTT}$ ，所以看上去常数优化并不明显。但是在后面的内容中，随着 $\text{NTT}$ 次数的增多，预处理原根的优化效果将愈发明显。【例题】[Luogu3803] 多项式乘法 评测记录：$1.83s\rightarrow1.3s$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 2100010typedef long long i64;typedef unsigned long long u64;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt(1),r[N],w[N];inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N],l;int main() &#123; scanf("%d%d",&amp;n,&amp;m); init(n+m+2); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); l=getLen(n+m+2); DFT(a,l); DFT(b,l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a,l); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;多项式求逆我们已经知道，当 $f_0\ne0$ 时 $F(x)$ 存在唯一乘法逆元。接下来我们就探讨一下如何求得一个多项式的乘法逆元。考虑已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $F(x)G(x)\equiv1\pmod{x^{n+1}}$如果 $F(x)$ 只有常数项，答案显然是常数项的乘法逆元，我们考虑]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5373]多项式复合函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5373-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这是这道题复杂度比较正确的一个常数奇大无比的算法，源自 $\text{R.P.BRENT}$ 和 $\text{H.T.KUNG}$ 在 $1978$ 年发表的论文（也就是题面里说的那个全嘤文pdf），我在 $\text{5月15日}$ 蒯到手之后肝了一个晚上，在神犇 rqy 的帮助下成功地写出了66分点名被卡做法awsl，后来研究别人代码的时候发现了 预处理原根 这种神奇操作，于是总算成功AC。正文这种做法基于对外层函数的泰勒展开，我们把内层函数 $G$ 的前 $m$ 项拆出来，记作 $G_m$ ，把剩下的记作 $G_r$ 。(这个 $m$ 到底取多少我们分析复杂度的时候再确定)然后进行泰勒展开：F(G)=F(G_m+G_r)=F(G_m)+F'(G_m)G_r+\frac12F''(G_m)G_r^2+\cdots由于我们只需要求 $F(G)$ 前 $n+1$ 项的值，所以我们只需要知道这个展开式前 $\lceil\frac nm\rceil$ 项的值即可，即：令 $l=\lceil\frac nm\rceil$ ，有F(G(x))\equiv F(G_m(x))+F'(G_m(x))G_r(x)+\cdots+\frac1{l!}F^{(l)}(G_m(x))G_r^l(x)\pmod{x^{n+1}}因此我们只要计算出 $F(G_m(x))$ 的各阶导和 $G_r(x)$ 的各次幂，就可以累加得到 $F(G(x))$ 了。$G_r(x)$ 只需要从 $G(x)$ 中截出来即可，那么如何计算 $F(G_m(x))$ 呢？考虑外层函数最高次项次数为 $2$ 的幂的情况，即：令 $F(x)=f_0+\cdots+f_jx^j$ 且 $j$ 为 $2$ 的正整数次幂，有F(G)=F_1(G)+G^{\frac j2}\cdot F_2(G)这里 $F_1$ 和 $F_2$ 都是最高次项次数为 $\frac j2$ 的多项式，这样一来我们就能递归地计算 $F(G_m(x))$ 了。考虑这一步的时间复杂度：我们令 $M(n)$ 为完成两个 $n$ 次多项式的乘法的时间，即： $M(n)=O(n\log n)$我们设 $T(j)$ 为计算 $G^{\frac j2}$ 和 $F(G)$ 的时间，则有T(j)\leqslant2T(\frac j2)+O(M(\min(jm,n)))我们令 $r$ 为满足 $n\cdot2^k\leqslant jm$ 的最大的 $k$ ，则有T(j)=O(M(n)+2M(n)+\cdots+2^rM(n))+2^{r+1}T(\frac{j}{2^{r+1}})T(j)\leqslant O(\frac{jmM(n)}{n})+(\frac{2jm}{n})T(\frac{j}{2^{r+1}})又因为 $n\cdot2^{r+1}&gt;jm$ ，有T(\frac{j}{2^{r+1}})=O(M(\frac{jm}{2^{r+1}})+2M(\frac{jm}{2^{r+2}})+\cdots)=O(M(n)+2M(\lceil\frac n2\rceil)+4M(\lceil\frac n4\rceil)+\cdots)=O(\log nM(n))因此，我们有 $T(j)=O(\frac{jm\log n}{n}M(n))$ ，所以求解 $F(G_m(x))$ 的时间复杂度为 $O(mn\log^2n)$ 。我们再来考虑对 $F(G_m(x))$ 求导：令 $H(x)=F(G(x))$根据复合函数求导法则，我们有 $H’(x)=F’(G(x))\cdot G’(x)$ ，因此 $F’(G_m(x))=H’(x)\cdot(G_m’(x))^{-1}$ ，由此我们可以计算出泰勒展开式中某一项之后与之前的结果累加得到 $H(x)$ ，同时计算出下一项中 $F(G_m(x))$ 的对应阶导。每计算一次导数的时间复杂度是 $O(n\log n)$ 的，因此计算出所有项的时间复杂度是 $O(l\cdot n\log n)=O(\frac{n^2\log n}{m})$ 。我们已经得到了 $F(G_m(x))$ 的各阶导，而 $G_r(x)$ 的各次幂只需要挨个乘起来即可，时间复杂度也是 $O(\frac{n^2\log n}{m})$ 的。之后各项的计算和累加同样是 $O(\frac{n^2\log n}{m})$ 的，因此这个算法的总复杂度为 $O(mn\log^2n+\frac{n^2\log n}{m})$ 。我们考虑 $m$ 的取值：根据均值不等式，当 $mn\log^2n\sim\frac{n^2\log n}{m}$ 时时间复杂度最优，因此解得当 $m\sim\sqrt{\frac{n}{\log n}}$ 时有最优时间复杂度 $O((n\log n)^{1.5})$ 。最后还是附上参考代码比较好，这个东西由于常数原因必须 预处理原根 才能卡过去，而且好像也没有什么实际用处。。就当是练习码力了 2333123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206#pragma GCC optimize("Ofast,inline")#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native")#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define MOD 998244353#define G 332748118#define N 262210#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(v==0) *pp++=48; else &#123; re int tp(0); while(v) st[++tp]=v%10+48,v/=10; while(tp) *pp++=st[tp--]; &#125; *pp++=32;&#125;inline int pow(re int a,re int b) &#123; re int ans(1); while(b) ans=b&amp;1?(ll)ans*a%MOD:ans,a=(ll)a*a%MOD,b&gt;&gt;=1; return ans;&#125;int inv[N],ifac[N];inline void pre(re int n) &#123; inv[1]=ifac[0]=1; for(re int i(2);i&lt;=n;++i) inv[i]=(ll)(MOD-MOD/i)*inv[MOD%i]%MOD; for(re int i(1);i&lt;=n;++i) ifac[i]=(ll)ifac[i-1]*inv[i]%MOD;&#125;inline int getLen(re int t) &#123; return 1&lt;&lt;(32-__builtin_clz(t));&#125;int lmt(1),r[N],w[N];inline void init(re int n) &#123; re int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(re int i(1);i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); re int wn(pow(3,(MOD-1)/lmt)); w[lmt&gt;&gt;1]=1; for(re int i((lmt&gt;&gt;1)+1);i&lt;lmt;++i) w[i]=(ll)w[i-1]*wn%MOD; for(re int i((lmt&gt;&gt;1)-1);i;--i) w[i]=w[i&lt;&lt;1];&#125;inline void DFT(int*a,re int l) &#123; static unsigned long long tmp[N]; re int u(__builtin_ctz(lmt)-__builtin_ctz(l)),t; for(re int i(0);i&lt;l;++i) tmp[i]=(a[r[i]&gt;&gt;u])%MOD; for(re int i(1);i&lt;l;i&lt;&lt;=1) for(re int j(0),step(i&lt;&lt;1);j&lt;l;j+=step) for(re int k(0);k&lt;i;++k) t=(ll)w[i+k]*tmp[i+j+k]%MOD, tmp[i+j+k]=tmp[j+k]+MOD-t, tmp[j+k]+=t; for(re int i(0);i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,re int l) &#123; std::reverse(a+1,a+l);DFT(a,l); re int bk(MOD-(MOD-1)/l); for(re int i(0);i&lt;l;++i) a[i]=(ll)a[i]*bk%MOD;&#125;int n,m;int a[N],b[N],c[N];void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); re int l(getLen(deg&lt;&lt;1)); for(re int i(0);i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l),DFT(b,l); for(re int i(0);i&lt;l;++i) b[i]=(2ll-(ll)tmp[i]*b[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,l); for(re int i(deg);i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(re int i(0);i+1&lt;deg;++i) b[i]=(ll)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;void getComp(int*a,int*b,int k,int m,int&amp;n,int*c,int*d) &#123; if(k==1) &#123; for(re int i(0);i&lt;m;++i) c[i]=0,d[i]=b[i]; n=m,c[0]=a[0]; &#125; else &#123; static int t1[N],t2[N]; int nl(n),nr(n),*cl,*cr,*dl,*dr; getComp(a,b,k&gt;&gt;1,m,nl,cl=c,dl=d); getComp(a+(k&gt;&gt;1),b,(k+1)&gt;&gt;1,m,nr,cr=c+nl,dr=d+nl); n=std::min(n,nl+nr-1); re int _l(getLen(nl+nr)); for(re int i(0);i&lt;_l;++i) t1[i]=i&lt;nl?dl[i]:0; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?cr[i]:0; DFT(t1,_l),DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) c[i]=((i&lt;nl?cl[i]:0)+t2[i])%MOD; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?dr[i]:0; DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) d[i]=t2[i]; &#125;&#125;inline void getComp(int*a,int*b,int*c,int deg) &#123; static int ts[N],ps[N],c0[N],_t1[N],idM[N]; int M(std::max((int)ceil(sqrt(deg/log2(deg))*2.5),2)),_n(deg+deg/M); getComp(a,b,deg,M,_n,c0,_t1); re int _l(getLen(_n+deg)); for(re int i(_n);i&lt;_l;++i) c0[i]=0; for(re int i(0);i&lt;_l;++i) ps[i]=i==0; for(re int i(0);i&lt;_l;++i) ts[i]=M&lt;=i&amp;&amp;i&lt;deg?b[i]:0; getDer(b,_t1,M); for(re int i(M-1);i&lt;deg;++i) _t1[i]=0; /// Important!!! getInv(_t1,idM,deg); for(int i=deg;i&lt;_l;++i) idM[i]=0; DFT(ts,_l),DFT(idM,_l); for(re int t(0);t*M&lt;deg;++t) &#123; for(re int i(0);i&lt;_l;++i) _t1[i]=i&lt;deg?c0[i]:0; DFT(ps,_l),DFT(_t1,_l); for(re int i(0);i&lt;_l;++i) _t1[i]=(ll)_t1[i]*ps[i]%MOD, ps[i]=(ll)ps[i]*ts[i]%MOD; IDFT(ps,_l),IDFT(_t1,_l); for(re int i(deg);i&lt;_l;++i) ps[i]=0; for(re int i(0);i&lt;deg;++i) c[i]=((ll)_t1[i]*ifac[t]+c[i])%MOD; getDer(c0,c0,_n); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; DFT(c0,_l); for(re int i(0);i&lt;_l;++i) c0[i]=(ll)c0[i]*idM[i]%MOD; IDFT(c0,_l); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; &#125;&#125;int main() &#123; n=read(),m=read(); for(re int i(0);i&lt;=n;++i) a[i]=read(); for(re int i(0);i&lt;=m;++i) b[i]=read(); m=(n&gt;m?n:m)+1; pre(m);init(m*5); getComp(a,b,c,m); for(re int i(0);i&lt;=n;++i) write(c[i]); fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5431]乘法逆元2]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5431-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832%2F</url>
    <content type="text"><![CDATA[此处题面题外话其实我觉得这道题的考点是快读.jpg没有快读的后果正文\large\text{以下运算均在模 }p\text{ 意义下进行}\large\sum_{i=1}^{n}{\frac{k^i}{a_i}}=\sum_{i=1}^{n}{k^i\cdot a_i^{-1}}我们考虑先求出 $a$ 序列的前缀积，记为 $s$ ：\large s_i=\prod_{j=1}^{i}{a_j}记 $a$ 序列前缀积的逆元为 $t$ ，此时如果我们知道这个序列，我们就可以知道 $a$ 中任意一个数的逆元：\large a_i^{-1}=s_{i-1}\cdot t_i而 前缀积的逆元 就等于 逆元的前缀积 ，所以我们只要求出 $t_n$ 就可以线性递推出整个 $t$ 序列了：\large t_n=s_n^{p-2}\large t_i=a_{i+1}\cdot t_{i+1}这样我们就求得了 $a$ 序列的逆元，再用秦九韶算法就能在线性时间内算出题目的式子了。参考代码前方极差码风警告！123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#define N 5000010#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline int pow(int a,int b,int p) &#123; int ans(1); while(b) ans=b&amp;1?(ll)ans*a%p:ans,a=(ll)a*a%p,b&gt;&gt;=1; return ans;&#125;int n,p,k,a[N],s[N]=&#123;1&#125;,inv_s[N],ans;int main() &#123; n=read(),p=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(),s[i]=(ll)s[i-1]*a[i]%p; inv_s[n]=pow(s[n],p-2,p); for(int i=n-1;i;--i) inv_s[i]=(ll)inv_s[i+1]*a[i+1]%p; for(int i=n;i;--i) ans=((ll)inv_s[i]*s[i-1]%p+ans)*k%p; printf("%d",ans); return 0;&#125;5e6 的输入，千万记得快读！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu4315]月下“毛景树”]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu4315-%E6%9C%88%E4%B8%8B%E2%80%9C%E6%AF%9B%E6%99%AF%E6%A0%91%E2%80%9D%2F</url>
    <content type="text"><![CDATA[此处题面前言这道题其实就是把 单点修改 、 区间染色 、 区间加 以及 区间最大值 这四种基本的序列操作出到了树上，很明显是用 树链剖分 + 线段树 解决，但是因为我太蒻了，树剖码到一半码不下去了，所以就全删了改码了个 Link/Cut Tree ，顺便 拿了这个题的RANK1 。边转点树剖的边转点大家都知道是把每条边的权值给深度较深的那个点，但是我们不能在 LCT 上也这么做，因为有 makeroot 操作的存在， LCT 上结点的父子关系不是确定的，所以我们采取建立 虚拟结点 的方式：1234// 第 i 条边连接 u 和 v 这两个点，权值为 wval[n+i]=maxv[n+i]=w;link(u,n+i);link(n+i,v);用 $n$ + $i$ 号结点表示第 $i$ 条边，再用它去分别连接原先的边连接的结点。需要注意的地方这种写法会产生 $2n$ 个结点， 空间千万要开够！标记上传下传的时候要分 原结点 和 虚拟结点 两种情况讨论！标记这道题我们只需要维护一个 区间染色 的标记和一个 区间加 的标记就行，我多维护了一个 siz 数组储存子树内 虚拟结点 的数量，上传时判断当前结点是不是 虚拟结点 就行。标记下传的时候要 先下传区间染色，再下传区间加 ，若是先下传了 区间加 ，后面 区间染色 的时候就会 覆盖掉最后附上此题 $AC$ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++inline int max(int a,int b)&#123;return b&lt;a?a:b;&#125;inline void swap(int&amp;a,int&amp;b)&#123;int tmp(a);a=b,b=tmp;&#125;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline char gtc() &#123; re char c(gc); while(c!='S'&amp;&amp;c!='h'&amp;&amp;c!='o'&amp;&amp;c!='d'&amp;&amp;c!='a') c=gc; return c;&#125;inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(!v) *pp++=48; else &#123; re char*tp(st); while(v) *++tp=v%10+48,v/=10; while(tp!=st) *pp++=*tp--; &#125; *pp++='\n';&#125;int n,u,v,w;char opt;int ch[N][2],fa[N],rev[N],val[N],maxv[N],ass[N],addv[N],siz[N];inline void assign(int x,int y)&#123;val[x]=x&gt;n?y:0,maxv[x]=siz[x]&gt;0?y:0,addv[x]=0,ass[x]=y;&#125;inline void add(int x,int y)&#123;val[x]+=x&gt;n?y:0,maxv[x]+=siz[x]&gt;0?y:0,addv[x]+=siz[x]&gt;0?y:0;&#125;inline void up(int x)&#123;siz[x]=siz[lc(x)]+siz[rc(x)]+(x&gt;n),maxv[x]=max(val[x],max(maxv[lc(x)],maxv[rc(x)]));&#125;inline void down(int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,rev[x]=0,swap(lc(x),rc(x)); if(ass[x]) assign(lc(x),ass[x]),assign(rc(x),ass[x]),ass[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z,up(y);&#125;inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;up(x);&#125;inline void access(int x)&#123;for(int y(0);x;x=fa[y=x])splay(x),rc(x)=y,up(x);&#125;inline void mrt(int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void split(int x,int y)&#123;mrt(x),access(y),splay(y);&#125;inline void link(int x,int y)&#123;mrt(x),fa[x]=y;&#125;int main() &#123; n=read(); for(re int i(1);i&lt;n;++i) siz[n+i]=1; for(re int i(1);i&lt;n;++i) u=read(),v=read(),val[n+i]=maxv[n+i]=read(),link(u,n+i),link(n+i,v); opt=gtc(); while(opt!='S') &#123; u=read(),v=read(); switch(opt) &#123; case'h': access(n+u),splay(n+u),val[n+u]=v; break; case'o': split(u,v),assign(v,read()); break; case'd': split(u,v),add(v,read()); break; case'a': split(u,v),write(maxv[v]); &#125; opt=gtc(); &#125; fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【置顶】学习资料]]></title>
    <url>%2F%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[收集的一些资料，留给自己慢慢啃。各路OJ洛谷、bzoj、POJ、UOJ、LibreOJ、51Nod、OIH、评测鸭、hihoCoder、OHO-OJ、Vijos、ZHZXOJ、ZOJ博文索引yzhang、bztMinamoto、自为风月马前卒、JasonZhan、huyufeifei、xehoth、饕餮传奇、Venus、yyb、rqy、Mrsrz、xht37、Victor、fcwww、EI、诗乃、Siyuan、zzq、zkw数据结构猫树、zkw线段树、Leafy Tree、Link-Cut Tree、树套树、后缀数组、回文自动机算法分治、动态dp、生成函数、计算几何其它OI Wiki、算法可视化、SAM可视化、题号查找器、图可视化、OEIS、MaHua在线Markdown编辑器、矩阵乘法、图床搭建、MiNa]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3372]线段树1]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3372-%E7%BA%BF%E6%AE%B5%E6%A0%911%2F</url>
    <content type="text"><![CDATA[此处题面去了 WC2019 的同学应该对 指令集 有些印象，没去的同学 ( 比如我 ) 可能也通过一些途径了解到了这个暴力踩标程的毒瘤 ( 据说现场踩 Ynoi五彩斑斓的世界 ) 。但是由于我太弱，实在过不了那道题 dllxl Orz ，所以我就来拿这道题练手了。一、指令集是什么？其实就是压位，常用的是压256位。也有能压512位的，但大部分情况不支持 ( 硬件 + 软件 ) 。二、它为什么快？就像压位高精会比裸高精快， bitset 比 bool数组 快一样，你把8个32位的 int 压成一个256位的玩意儿，每次操作可以看成是同时对8个 int 进行操作 ( 但其实并不是这样 ) ，所以理论上常数会是原来的 $\frac{1}{8}$ ( 但其实做不到 $\frac{1}{8}$ ) 。三、它要怎么用？请自行摸索首先你需要 immintrin.h 库，里面啥都有然后再在程序前加上 #pragma GCC target(&quot;avx,avx2&quot;) ，这样你就可以把你的 int 啊 long long 啊什么的压成 __m256i ，把 float 压成 __m256 ，还能把 double 压成 __m256d 。什么你问我具体怎么做？我不知道啊.jpg这里是连快读都没用的$O\left(n^2\right)$暴力评测记录。最后附上这道题的程序，想学学指令集的可以看看：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#pragma GCC optimize("Ofast,fast-math")#pragma GCC target("avx,avx2")#include &lt;cstdio&gt;#include &lt;immintrin.h&gt;int n,m,num,x[5],opt,p,q,k;__m256i a[25010];inline void add(int l,int r,int v) &#123; while(((l-1)&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1]+=v,++l; if(l==r+1)return; while((r&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1]+=v,--r; if(l==r+1)return; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(v,v,v,v); while(l&lt;=r)a[l]=_mm256_add_epi64(a[l],s),++l;&#125;inline long long query(int l,int r) &#123; long long ans(0); while(((l-1)&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1],++l; if(l==r+1)return ans; while((r&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1],--r; if(l==r+1)return ans; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(0,0,0,0); while(l&lt;=r)s=_mm256_add_epi64(a[l],s),++l; for(int i=0;i&lt;4;++i) ans+=((long long*)&amp;s)[i]; return ans;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m);num=n&gt;&gt;2; for(int i=1;i&lt;=num;++i) &#123; for(int j=1;j&lt;=4;++j) scanf("%d",x+j); a[i]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); &#125; for(int i=1;i&lt;=(n&amp;3);++i) scanf("%d",x+i); a[++num]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); while(m--) &#123; scanf("%d%d%d",&amp;opt,&amp;p,&amp;q); if(opt==1) scanf("%d",&amp;k),add(p,q,k); else printf("%lld\n",query(p,q)); &#125; return 0;&#125;这道题要开 long long ，如果是 int 的话程序第一句的 Ofast 优化去掉也能过！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[JLOI2014]松鼠的新家]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-JLOI2014-%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[此处题面由于树上两点路径唯一，维尼的路线也是唯一的，因此我们只要 统计维尼经过每个点的次数 即可。而树上路径又跟 LCA 什么的有关，因此这道题的做法就多种多样了。由于只有一次询问，比较容易想到的做法是 树上差分 后求 LCA 轻松搞定。再想深一点你会发现这道题简直就是 树链剖分 的板子，再加上这道题不用维护什么子树信息，所以 树链剖分 能做 Link/Cut Tree 当然也能做！需要注意的几点：这道题 LCT 得卡常，写的时候注意不要太飘；由于两条链相交的点会被重复计算，因此每次加的时候链头链尾要有一个减 1 (我是链尾)；最后一个点是不需要准备糖果的！输出答案的时候记得把标记都下放了 (我是先 makeroot 再输出) 。1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;cstdio&gt;#define N 300010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re registerinline void swap(re int&amp;a,re int&amp;b)&#123;re int tmp(a);a=b,b=tmp;&#125;int ch[N][2],fa[N],rev[N],val[N],addv[N];inline void add(re int x,re int y)&#123;val[x]+=y,addv[x]+=y;&#125;inline void down(re int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(re int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(re int x) &#123; re int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;&#125;inline void splay(re int x) &#123; re int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;&#125;inline void access(re int x)&#123;for(re int y(0);x;x=fa[y=x])splay(x),rc(x)=y;&#125;inline void mrt(re int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void link(re int x,re int y)&#123;mrt(x),fa[x]=y;&#125;int n,a[N],x,y;int main() &#123; scanf("%d",&amp;n); for(re int i(1);i&lt;=n;++i) scanf("%d",a+i); for(re int i(1);i&lt;n;++i) scanf("%d%d",&amp;x,&amp;y),link(x,y); for(re int i(1);i&lt;n;++i) --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1); for(re int i(1);i&lt;=n;++i) mrt(i),printf("%d\n",val[i]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[SDOI2011]染色]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-SDOI2011-%E6%9F%93%E8%89%B2%2F</url>
    <content type="text"><![CDATA[此处题面这道题的做法其实已经很明显了， 树链剖分 + 线段树 ，只是看到区间赋值心血来潮想用 珂朵莉树 水，结果就过了╮(╯▽╰)╭操作 1 就是 区间推平 ( assign ) ，操作 2 可以像找 最近公共祖先 ( LCA ) 一样一边往上方跳一边统计，由于珂朵莉树的结点存储的是一段值相同的连续区间，我们只需要记录上一次访问的结点的值与当前结点的值比较，若不同则更新并计数。值得注意的 $3$ 点：由于我们是统计链上的连续段，所以我们应从深度大的结点往小的枚举。由于我们是从链的两端分别往上跳，所以我们需要分别记录两边上次访问的结点的值。最后处于同一条链上时，需要考虑两端的值相同的情况。最后放上 $AC$ 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include &lt;cstdio&gt;#include &lt;set&gt;using std::set;#define N 100010struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V)&#123;&#125; inline int operator&lt;(const node&amp;x)const&#123;return l&lt;x.l;&#125;&#125;;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;inline IT split(int pos) &#123; IT it(--s.upper_bound(node(pos))); if(it-&gt;l==pos) return it; int L(it-&gt;l),R(it-&gt;r),V(it-&gt;v); s.erase(it),s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;inline void assign(int l,int r,int v) &#123; IT itr(split(r+1)),itl(split(l)); s.erase(itl,itr);s.insert(node(l,r,v));&#125;int n,m,a[N],x,y,z;char opt;int e,bg[N],nx[N&lt;&lt;1],to[N&lt;&lt;1];inline void link(int u,int v)&#123;to[++e]=v,nx[e]=bg[u],bg[u]=e;&#125;int fa[N],dep[N],siz[N],ws[N];void dfs1(int now,int f) &#123; fa[now]=f,dep[now]=dep[f]+1,siz[now]=1; int mx(-1); for(int i=bg[now];i;i=nx[i]) if(to[i]!=f) &#123; dfs1(to[i],now); siz[now]+=siz[to[i]]; if(siz[to[i]]&gt;mx) mx=siz[to[i]],ws[now]=to[i]; &#125;&#125;int cnt,top[N],id[N],wt[N];void dfs2(int now,int tp) &#123; top[now]=tp,id[now]=++cnt,wt[cnt]=a[now]; if(!ws[now]) return; dfs2(ws[now],tp); for(int i=bg[now];i;i=nx[i]) if(to[i]!=fa[now]&amp;&amp;to[i]!=ws[now]) dfs2(to[i],to[i]);&#125;inline void change(int x,int y,int z) &#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; assign(id[top[x]],id[x],z); x=fa[top[x]]; &#125; else &#123; assign(id[top[y]],id[y],z); y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) assign(id[y],id[x],z); else assign(id[x],id[y],z);&#125;inline int query(int x,int y) &#123; int ans(0),lasta(0),lastb(0); IT itl,itr; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; itr=split(id[x]+1),itl=split(id[top[x]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; x=fa[top[x]]; &#125; else &#123; itr=split(id[y]+1),itl=split(id[top[y]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) &#123; itr=split(id[x]+1),itl=split(id[y]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; else &#123; itr=split(id[y]+1),itl=split(id[x]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; return ans-(lasta==lastb);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) scanf("%d",a+i); for(int i=1;i&lt;n;++i) &#123; scanf("%d%d",&amp;x,&amp;y); link(x,y),link(y,x); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=n;++i) s.insert(node(i,i,wt[i])); while(m--) &#123; scanf("\n%c%d%d",&amp;opt,&amp;x,&amp;y); if(opt=='C') &#123; scanf("%d",&amp;z); change(x,y,z); &#125; else printf("%d\n",query(x,y)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu1047]校门外的树]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu1047-%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[此处题面看见一堆 dalao 题解写树状数组线段树，蒟蒻在这里安利一种毒瘤数据结构——珂朵莉树。一、介绍。珂朵莉树 (ChthollyTree) ，又名 OldDriverTree (老司机树)，简称 ODT ，是一种非常暴力的数据结构，它将一段值相同的区间以三元组 &lt; 左端点，右端点，值 &gt; 的方式存储起来，因此它的效率是建立在区间推平操作 (assign) 上的(也就是本题的砍树)。二、存储方式。珂朵莉树的存储基于平衡树(我这里为了方便用了 STL 的 set )，这里定义珂朵莉树的结点为：1234567struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;这里的 l 和 r 是区间的左右端点(闭区间)，v 是该区间的值(表示这一区间内所有元素的值都是v)，然后是构造函数和重载运算符，这里重载成比较区间左端点。最后把区间扔进平衡树就行了：12set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;三、核心操作。珂朵莉树的操作是基于一个核心操作 split 的，传入参数 pos 后，它能返回左端点值为 pos 的结点的迭代器，如果不存在这样的结点，它就会把包含 pos 的结点 &lt; l，r，v &gt; 拆成 &lt; l , pos-1 , v &gt; 和 &lt; pos , r , v &gt; ，然后返回后面这个结点的迭代器。先上代码：123456789IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;一行行来看：1IT it=s.lower_bound(node(pos));lower_bound 是获取左端点大于等于 pos 的第一个结点。1if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it;如果这个结点的左端点正好是 pos ，我们就直接返回它。12--it;int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v;否则的话 —it 得到的就是包含 pos 的结点，我们用 L、R、V 储存它的左右端点和值。1s.erase(it);然后我们删掉这个结点。12s.insert(node(L,pos-1,V));return s.insert(node(pos,R,V)).first;最后我们插入两个新的结点，左右端点分别是 &lt; L、pos-1 &gt; 和 &lt; pos、R &gt; ，顺便返回后面这个结点的迭代器。这样我们就完成了 split 操作。四、区间推平。这是保证珂朵莉树复杂度不至于爆炸的重要操作，它能将一个区间内的值变得一样，本题的砍树就是区间赋值为 0 。先上代码：12345void assign(int l,int r,int v) &#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,v));&#125;看上去十分的暴力，事实上珂朵莉树就是这么暴力的数据结构。稍微解释一下代码：1IT itl=split(l),itr=split(r+1);itl 指向的结点左端点为 l ，itr 指向的结点左端点为 r+1 。1s.erase(itl,itr);删去平衡树中 [ itl , itr ) 的结点(左闭右开区间)。1s.insert(node(l,r,v));直接插入一个 &lt; l , r &gt; ，值为v的区间。就是这么直接暴力！Upd：由于某些未知原因（珂学规定），珂朵莉树提取区间时需要先 split 右端点！五、其他操作。1. 初始化初始化操作就是直接插入，本题所有树默认都是种上的，全部赋值为 1 就行：1s.insert(node(0,l,1));2. 区间操作区间操作的话这里就以题目的求和为例，先上代码：1234567int sum(int l,int r) &#123; int _sum=0; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) _sum+=(itl-&gt;v)*((itl-&gt;r)-(itl-&gt;l)+1); return _sum;&#125;同样是非常的暴力，直接取出所有区间内的结点暴力求和就行了，其他的操作如区间加法乘法什么的也是一样的，取出结点遍历一遍就行。六、本题代码。最后放上本题AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;cstdio&gt;#include&lt;set&gt;using namespace std;struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;int l,m,x,y,_sum;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;void remove(int l,int r) &#123; IT itl=split(l),itr=split(r+1); s.erase(itl,itr); s.insert(node(l,r,0));&#125;void sum() &#123; for(IT it=s.begin();it!=s.end();++it) _sum+=it-&gt;v*(it-&gt;r-it-&gt;l+1);&#125;int main() &#123; scanf("%d%d",&amp;l,&amp;m); s.insert(node(0,l,1)); for(int i=1;i&lt;=m;++i) &#123; scanf("%d%d",&amp;x,&amp;y); remove(x,y); &#125; sum(); printf("%d",_sum);&#125;七、总结珂朵莉树的效率建立在区间推平操作 (assign) 上，它能使结点数量快速减小从而保证时间复杂度，因此珂朵莉树十分容易被卡，不到万不得已还是得乖乖用别的数据结构，不过它的代码十分简单，考场上写不出别的数据结构时也是可以交一个珂朵莉树的。]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
</search>
