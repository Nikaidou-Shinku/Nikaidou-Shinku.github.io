<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【题解】[Luogu5489]EntropyIncreaser与动态图]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5489-EntropyIncreaser%E4%B8%8E%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题其实没有多难，静下来慢慢写还是十分可做的，不失为一道 $\text{LCT}$ 练手好题。正文首先看到 $1$ 操作连边，第一反应应该就是 $\text{Link/Cut Tree}$ 了，然而怎么维护割边割点数量呢？我们分开讨论。割边考虑对于一个环，环上所有边一定不会是割边；而对于一条链，链上所有边一定是割边。我们可以直接维护每条边是不是割边，初始时所有边都是割边，当某次加边操作产生了环，则环上所有边都不会成为割边了。具体来讲，边转点后所有边权值均为 $1$ ，当某次 $\text{Link}$ 的两结点已经连通，则将两结点间的链上的边全部赋值为 $0$ ，同时维护和即可。割点割点不像割边那样好处理了。考虑静态的情况，静态割点有一个比较套路的方法是用圆方树，我们可以尝试动态地维护一棵圆方树：每次连边产生环就将环上所有点连到一个方点上来。考虑这样做的复杂度：假设环的长度是 $L$ ，每次会用 $O(L\log n)$ 的复杂度删去一个长为 $O(L)$ 的环，均摊复杂度为 $O(n\log n)$ 。最后于是使用两棵 $\text{LCT}$ 分别维护割边和割点即可。参考代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;namespace Summer &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],mark[N]; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void NaCly_Fish_Orz(int x) &#123; if(x) &#123; val[x]=sumv[x]=0; mark[x]=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; if(mark[x]) &#123; NaCly_Fish_Orz(lc(x)); NaCly_Fish_Orz(rc(x)); mark[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125;&#125;namespace Pockets &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],st[N],num; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125; void print(int now) &#123; if(now) &#123; down(now); print(lc(now)); st[++num]=now; print(rc(now)); &#125; &#125;&#125;int n,q,opt,u,v,last,tot,ans,SummerPockets;int fa[N];inline int find(int x) &#123; return x==fa[x]?x:fa[x]=find(fa[x]);&#125;inline void getEdge(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Summer::mrt(u); Summer::access(v); Summer::splay(v); ans=Summer::sumv[v];&#125;inline void getPoint(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); ans=Pockets::sumv[v];&#125;inline void link(int u,int v) &#123; int x=find(u),y=find(v); if(x==y) &#123; Summer::mrt(u); Summer::access(v); Summer::splay(v); Summer::NaCly_Fish_Orz(v); getPoint(u,v); if(ans&gt;2) &#123; ++SummerPockets; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); Pockets::num=0; Pockets::print(v); for(int i=1;i&lt;Pockets::num;++i) Pockets::cut(Pockets::st[i],Pockets::st[i+1]); for(int i=1;i&lt;=Pockets::num;++i) Pockets::link(Pockets::st[i],SummerPockets); &#125; &#125; else &#123; ++tot; fa[y]=x; Summer::val[tot]=1; Summer::link(u,tot); Summer::link(tot,v); Pockets::link(u,v); &#125;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;q); tot=SummerPockets=n; for(int i=1;i&lt;=n;++i) fa[i]=i,Pockets::val[i]=1; while(q--) &#123; scanf("%d%d%d",&amp;opt,&amp;u,&amp;v); u^=last,v^=last; switch(opt) &#123; case 1: &#123; link(u,v); break; &#125; case 2: &#123; getEdge(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; default: &#123; getPoint(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu2617]DynamicRankings]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu2617-DynamicRankings%2F</url>
    <content type="text"><![CDATA[此处题面前言在题解区看见了一个用分块写这个题的，但是在数据加强到 $10^5$ 后貌似已经过不去了（或许卡卡常还有救），难道分块真的就比不过这些树套树整体二分？不不不，分块的潜力远远不止这些！分块无快读无 $\text{O2}$ 评测记录正文之前那篇分块题解的做法是二分答案，然后块内二分检验，这样做的时间复杂度是 $O(n\sqrt n\log n\log V)$ 的，其中 $V$ 是值域。然而二分跟分块就很不搭，我们考虑一个不需要二分也能求第 $k$ 小的方法。先离散化，对序列分块，考虑维护块内每个数的出现次数，再将值域分块，维护每个块内每个值域块中数的出现次数。然后做前缀和，这样我们就能 $O(1)$ 查询一段块中每个数的出现次数以及每个值域块中数的出现次数。这部分的预处理是 $O(n\sqrt n)$ 的。查询时考虑将散块中每个数及值域块中数的出现次数先记录下来，这部分是 $O(\sqrt n)$ 的，然后跳值域块，超过 $k$ 了就跳块内的数，直到找到正好超过 $k$ 的位置，这样可以 $O(\sqrt n)$ 查询第 $k$ 小。修改时只要考虑对预处理的信息的影响即可，由于我们预处理的是前缀和，所以每次修改至多修改 $O(\sqrt n)$ 个块。这样我们就得到了一个 $O(n\sqrt n)$ 的优秀算法，可以通过此题。最后这个做法是另一个题的 $trick$ ，有兴趣的可以去试一下：望月悲叹的最初分块。最后给出代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using std::sort;using std::unique;using std::lower_bound;#define N 100010inline int min(int a,int b) &#123; return a&lt;b?a:b;&#125;struct node&#123;int opt,l,r,k;&#125;q[N];int n,m,a[N],b[N&lt;&lt;1],tot,l,r,k;char opt;int L[320],R[320];int siz,szv,num,numsz;int bl[N],blv[N&lt;&lt;1];int sumc[320][N&lt;&lt;1];int sums[320][450];inline void modify(int x,int y) &#123; for(int i=bl[x];i&lt;=num;++i) &#123; --sumc[i][a[x]]; --sums[i][blv[a[x]]]; ++sumc[i][y]; ++sums[i][blv[y]]; &#125; a[x]=y;&#125;int tmpa[N&lt;&lt;1],tmpc[450];inline int query(int l,int r,int k) &#123; int ans; if(bl[l]==bl[r]) &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; else &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=R[bl[l]];++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=L[bl[r]];i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]+sumc[bl[r]-1][i]-sumc[bl[l]][i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=R[bl[l]];++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; for(int i=L[bl[r]];i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; return ans;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf("%d",a+i); b[++tot]=a[i]; &#125; for(int i=1;i&lt;=m;++i) &#123; scanf("\n%c%d%d",&amp;opt,&amp;l,&amp;r); if(opt=='Q') &#123; scanf("%d",&amp;k); q[i]=(node)&#123;1,l,r,k&#125;; &#125; else &#123; q[i]=(node)&#123;2,l,r,0&#125;; b[++tot]=r; &#125; &#125; sort(b+1,b+tot+1); tot=unique(b+1,b+tot+1)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+tot+1,a[i])-b; siz=ceil(sqrt(n)); szv=ceil(sqrt(tot)); for(int i=1;i&lt;=n;++i) bl[i]=(i-1)/siz+1; for(int i=1;i&lt;=tot;++i) blv[i]=(i-1)/szv+1; num=bl[n],numsz=blv[tot]; for(int i=1;i&lt;=num;++i) &#123; L[i]=R[i-1]+1; R[i]=min(L[i]+siz-1,n); for(int j=1;j&lt;=tot;++j) sumc[i][j]=sumc[i-1][j]; for(int j=1;j&lt;=numsz;++j) sums[i][j]=sums[i-1][j]; for(int j=L[i];j&lt;=R[i];++j) &#123; ++sumc[i][a[j]]; ++sums[i][blv[a[j]]]; &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; if(q[i].opt==1) printf("%d\n",query(q[i].l,q[i].r,q[i].k)); else modify(q[i].l,lower_bound(b+1,b+tot+1,q[i].r)-b); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.6字符串]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-6%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意有一个长度为 $n$ 的字符串，已知第 $i$ 种字符刚好有 $a_i$ 个，求 $kmp$ 数组之和最小是多少。$n,字符种数\leqslant10^5$题解将出现次数最少的字符放 $1$ 个在最前面，然后放其它字符，最后放剩下的字符特判只有 $1$ 种字符的情况T2题意定义两个字符串相同为它们的最小字符表示法相同给定 $S,T$ ，求 $T$ 在 $S$ 中的出现次数$总串长\leqslant10^6$题解以每个字符上一次出现的位置为值做 $kmp$T3题意求有多少个长度为 $n$ 的字符串， $kmp$ 数组 $next[n]=0$ ，并输出满足条件的字典序第 $k$ 大的 $01$ 串。$n\leqslant64$ , $T\leqslant1000$题解设 $f_i$ 表示长度为 $i$ 的，没有前缀等于后缀的字符串数量。暂咕T4题意有多少个长度为 $k$ 的，最小循环表示法唯一且最小表示法就是本身的串的个数。$k\leqslant10^6$题解枚举循环节，莫比乌斯反演容斥T5题意如果两个长度为 $n$ 的字符串 $S,T$ 满足对于任意一对整数 $(i,j)$ ，如果 $S[i,j]$ 为回文串， $T[i,j]$ 也为回文串，我们称 $S,T$ 为回文等价，给出 $S$ ，求有多少 $T$ 满足与 $S$ 回文等价。$|S|,|T|\leqslant10^6$题解做 $Manacher$ 时将字符相同的位置用并查集连起来T6题意给你一个长度为 $n$ 的字符串，求一个最大的 $k$ ，使得存在一个字符串序列 $a_1,a_2,\ldots,a_k$ ，其中 $a_i$ 在 $a_{i+1}$ 中出现两次，且 $a_i$ 为给出的串的子串$n\leqslant10^5$题解暂咕T7题意给一个字符串，求一个最大长度 $L\leqslant\frac n2$ ，使得前 $L$ 个字符与后 $L$ 个字符循环同构。$n\leqslant10^6$题解暂咕T8题意给一个长度为 $n$ 的字符串 $s$ ，有 $q$ 次询问，每次询问给出两个区间，求第一个区间中字典序最小的子串使得该子串的字典序大于第二个区间的串。$n\leqslant10^5$ , $q\leqslant2\times10^5$题解建 $\text{SAM}$ ，二分 + 倍增 + 线段树查询T9题意给你长度为 $n$ 的字符串 $T$ ，你可以用 $T$ 中的子串去拼另一个字符串，能拼出字符串 $S$ 的方案中我们选择步数最少的作为拼出 $S$ 的方案，求长度为 $m$ 的能拼出的字符串中，方案步数最大是多少。$n\leqslant10^5$ , $m\leqslant10^{18}$题解二分 + 矩阵乘法]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.5模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-5%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.4计数]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-4%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意小 $\text{A}$ 会投 $a$ 次硬币，小 $\text{B}$ 会投 $b$ 次硬币，求有多少种情况，小 $\text{A}$ 投出的硬币正面向上的次数严格大于小 $\text{B}$ 投出的硬币正面向上的次数，答案保留最后 $k$ 位$1\leqslant a,b\leqslant10^{15}$ , $b\leqslant a\leqslant b+10000$ , $1\leqslant k\leqslant9$题解设 $x$ 为小 $\text{A}$ 投出的向上的次数，设 $y$ 为小 $\text{B}$ 投出的向下的次数。有 $x+y&gt;b$ ，枚举 $x+y$答案即是 $\sum_{i=b+1}^{a+b}{\binom{a+b}{i}}$T2题意求 $n$ 个点 $m$ 条边的无向连通图的个数，点有标号$n\leqslant30$ , $m\leqslant100$题解设 $f_{i,j}$ 表示 $i$ 个点 $j$ 条边的无向连通图，枚举与 $1$ 相连的连通块转移$f_{i,j}=\binom{\frac{i(i-1)}{2}}{j}-\sum_{x=1}^{i}{\sum_{k=0}^{j}{f_{x,k}\times\binom{\frac{(i-x)(i-x-1)}{2}}{j-k}\times\binom{n-1}{x-1}}}$T3题意给定一个 $n$ 个点的图，初始时没有边每次随机选择两个不相同的点连接起来求期望要多少次才能使整个图连通$n\leqslant30$题解考虑到 $30$ 的拆分数只有 $5600$ 左右，可以直接将图的连通情况作为状态，然后 $O(n^2)$ 转移T4题意给出一个 $n$ 个点 $m$ 条边的无向图，每条边的权值不固定，为 $[0,1]$ 内的随机变量，无重边无自环，求最小生成树上最大边的期望边权$n\leqslant10$ , $m\leqslant\frac{n(n-1)}{2}$题解设 $f_{s,i}$ 表示连通块 $s$ 里连了 $i$ 条边的方案数设 $g_{s,i}$ 表示在点集 $s$ 里连了 $i$ 条边且不连通的方案数暂咕[SHOI2017] 分手是祝愿题面题目链接Zeit und Raum trennen dich und mich.时空将你我分开。$\text{B}$ 君在玩一个游戏，这个游戏由 $n$ 个灯和 $n$ 个开关组成，给定这 $n$ 个灯的初始状态，下标为 $1\sim n$ 的正整数。每个灯有两个状态亮或灭，我们用 $1$ 来表示这个灯是亮的，用 $0$ 表示这个灯是灭的，游戏的目标是使所有灯都灭掉。但是当操作第 $i$ 个开关时，所有编号为 $i$ 的约数（包括 $1$ 和 $i$ ）的灯的状态都会被改变，即从亮变成灭，或者是从灭变成亮。$\text{B}$ 君发现这个游戏很难，于是想到了这样的一个策略，每次等概率随机操作一个开关，直到所有灯都灭掉。这个策略需要的操作次数很多， $\text{B}$ 君想到这样的一个优化。如果当前局面，可以通过操作小于等于 $k$ 个开关使所有灯都灭掉，那么他将不再随机，直接选择操作次数最小的操作方法（这个策略显然小于等于 $k$ 步）操作这些开关。$\text{B}$ 君想知道按照这个策略（也就是先随机操作，最后小于等于 $k$ 步，使用操作次数最小的操作方法）的操作次数的期望。这个期望可能很大，但是 $\text{B}$ 君发现这个期望乘以 $n!$ 一定是整数，所以他只需要知道这个整数对 $100003$ 取模之后的结果。$n\leqslant100000$题解设 $f_i$ 为从还剩 $i$ 个位置到还剩 $i-1$ 个位置的期望步数暂咕T6题意在一个直角坐标系上依次插入 $n$ 个点，每次插入之后输出当前有多少个三角形严格覆盖原点。（强制在线）$n\leqslant100000$题解考虑一个不合法的方案，对一个极角最小的点，另两个点一定在原点到该点连线的半平面内用平衡树维护即可T7题意“奋战三星期，举重五百斤”，一大群鸽子来到了 $\text{CJ}$ 的健身房，发现房间里有一排共 $n$ 个铁饼。有 $Q$ 次操作，你需要支持三种操作：1 x y 将第 $x$ 个铁饼的重量设置为 $y$2 L R 翻转第 $L$ 至第 $R$ 个铁饼3 L R W 询问仅使用 $L$ 到 $R$ 之间的铁饼能否拼出一个重量为 $W$ 的杠铃鸽子们还在健身房的天花板上发现了一个数字 $k$ 。机智的它们立刻发现，在任意时刻出现过的不同的铁饼数目是不会超过 $k$ 的。$n,Q,W\leqslant100000$ , $k\leqslant10$题解[HAOI2008]硬币购物暂咕T8题意给你一个长度为 $n$ 的序列 $A$ ，如果 $n$ 不是非降，你必须删掉一个数，直到非降为止，求不同方案数，对 $1000000007$ 取模。$n\leqslant2000$题解设 $f_i$ 表示删到长度为 $i$ 的非降序列的方案数（包含不合法）预处理 $g_i$ 为长度为 $i$ 的非降序列的个数$f_i=g_i\times(n-i)!$从小到大容斥掉不合法的方案T9题意给你一个长度为 $2n$ 的序列 $a$ ，其中有些位置上的元素是 $-1$ ，保证 $1\sim 2n$ 最多只出现一次，定义一个长度为 $n$ 的数组 $b$ ， $b_i=\min(a_{2i-1},a_{2i})$ ，求有多少种不同的 $b$ 数组。$n\leqslant300$题解把 $a$ 分成 $n$ 个二元组，则每个二元组只有 $3$ 种情况$f_{i,j,k}$ 表示从大往小考虑到第 $i$ 个数，有 $j$ 个 $(-1,x)$ ，有 $k$ 个 $(-1,y)$ 。（ $y$ 为已经填进去的）暂咕T10题意给定一个长度为 $n$ 的正整数序列 $a$求有多少个长度为 $n$ 的正整数序列 $x$ 满足对于任意 $1\leqslant i\leqslant n$ , $1\leqslant x_i\leqslant D$对于任意 $1\leqslant i&lt;j\leqslant n$ , $\max(a_i,a_j)&lt;|x_i-x_j|$$n\leqslant50$ , $a_i\leqslant40$题解按 $a_i$ 排序依次插入设 $f_{i,j,s}$ 表示插入到第 $i$ 个，还有 $j$ 个缝隙，压紧后长度为 $s$ 的方案数枚举第 $i$ 个是放在两端还是合并两个已有段转移T11题意给定一个长度为 $n$ 的整数序列 $S$求有多少个长度为 $n$ 的正整数序列 $T$使得将 $S$ 和 $T$ 排序后， $S$ 的每一位都不小于 $T$ 的每一位$n\leqslant1000$题解对 $S$ 和 $T$ 排序设 $f_i$ 表示有多少个 $T$ 的前 $i$ 位满足条件枚举第一个不满足条件的位置，用总方案减去不满足的转移]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.3模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-3%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.2网络流]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-2%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！[bzoj1280] $\text{Emmy}$卖猪pigs题面题目链接$\text{Emmy}$ 在一个养猪场工作。这个养猪场有 $m$ 个锁着的猪圈，但 $\text{Emmy}$ 并没有钥匙。有 $n$ 个顾客会到养猪场来买猪，一个接着一个。每一位顾客都会有一些猪圈的钥匙，他们会将这些猪圈打开并买走固定数目的猪。所有顾客有的钥匙和他们需要买猪的数量在事先都告诉了 $\text{Emmy}$，于是 $\text{Emmy}$ 要订一个计划，使得卖出去的猪最多。买卖的过程是这样的：一个顾客前来，并打开所有他可以打开的猪圈。然后 $\text{Emmy}$ 从这些猪圈里牵出固定数目的猪卖给顾客（最多只能和顾客需要数相等），并可以重新安排这些开着的猪圈中的猪。每个猪圈可以存放任意数目的猪。写一个程序，使得 $\text{Emmy}$ 能够卖出去尽可能多的猪。$n\leqslant100$ , $m\leqslant1000$题解暂咕[bzoj2406] 矩阵题面题目链接给定一个整数矩阵 $A[n\times m]$ ，求一个矩阵 $B[n\times m]$ 满足 $\forall1\leqslant i\leqslant n,1\leqslant j\leqslant m,B_{ij}\in[L,R]$ ，且使下式值最小：\large max= \begin{cases} \mathop{max}\limits_{1\leqslant j\leqslant m} \{|\sum_{i=1}^{n}{(A_{ij}-B_{ij})}|\}\\ \mathop{max}\limits_{1\leqslant i\leqslant n} \{|\sum_{j=1}^{m}{(A_{ij}-B_{ij})}|\} \end{cases}$n,m\leqslant 200$题解暂咕[TJOI2015] 组合数学题面题目链接为了提高智商， $\text{ZJY}$ 开始学习组合数学。某一天她解决了这样一个问题：给一个 $n\times m$ 的网格图，其中某些格子有财宝。每次从左上角出发，只能往右或下走。问至少要走几次才可能把财宝全捡完。但是她还不知足，想到了这个问题的一个变形：假设每个格子中有好多块财宝，而每一次经过一个格子至多只能捡走一块财宝，其它条件不变，至少要走几次才可能把财宝全捡完？这次她不会做了，你能帮帮她吗？$n,m\leqslant1000$题解最长链等于最少反链覆盖每个点向不能到达它的点连边，跑最长路[bzoj1189] 紧急疏散evacuate题面题目链接发生了火警，所有人员需要紧急疏散！假设每个房间是一个 $n\times m$ 的矩形区域。每个格子可以是空地、墙或者门，人们可以从门撤出房间。已知门一定在房间的边界上，并且边界上不会有空地。最初，每块空地上都有一个人，在疏散的时候，每一秒钟每个人都可以向上下左右四个方向移动一格，当然他也可以站着不动。疏散开始后，每块空地上就没有人数限制了（也就是说每块空地可以同时站无数个人）。但是，由于门很窄，每一秒钟只能有一个人移动到门的位置，一旦移动到门的位置，就表示他已经安全撤离了。现在的问题是：如果希望所有的人安全撤离，最短需要多少时间？或者告知根本不可能。$3\leqslant n,m\leqslant20$题解对时间建分层图[POI2010] Bridges题面题目链接$\text{YYD}$ 为了减肥，他来到了瘦海，这是一个巨大的海，海中有 $n$ 个小岛，小岛之间有 $m$ 座桥连接，两个小岛之间不会有两座桥，并且从一个小岛可以到另外任意一个小岛。现在 $\text{YYD}$ 想骑单车从小岛 $1$ 出发，骑过每一座桥，到达每一个小岛，然后回到小岛 $1$ 。霸中同学为了让 $\text{YYD}$ 减肥成功，召唤了大风，由于是海上，风变得十分大，经过每一座桥都有不可避免的风阻碍 $\text{YYD}$ ， $\text{YYD}$ 十分 $ddt$ ，于是用泡芙贿赂了你，希望你能帮他找出一条承受的最大风力最小的路线。$2\leqslant n\leqslant1000$ , $1\leqslant m\leqslant2000$题解二分答案，网络流检验先随机定向，检查每个点的度数对于一个点入度减出度为正的，源点向其连边，否则该点向汇点连边边权为度数差的绝对值[bzoj4213] 贪吃蛇题面题目链接最近 $\text{lwher}$ 迷上了贪吃蛇游戏，在玩了几天却从未占满全地图的情况下，他不得不承认自己是一个弱菜，只能改去开发一款更弱的贪吃蛇游戏。在开发的过程中， $\text{lwher}$ 脑洞大开，搞了一个多条蛇的模式。但由于这种模式太难操作，于是他只好改变游戏的玩法，稍微变化一下游戏目标。新的游戏是这样的：一些蛇覆盖了一个网格。每个格子要么是一个障碍物，要么是蛇的一部分。每条蛇占据了一条折线（拐角处只能水平和竖直连接），且至少占据两个格子。蛇与蛇之间不能重叠，蛇也不会与自己重叠。每条蛇还必须满足以下两个条件中的一个：两个端点所在的格子在网格的边界。蛇构成一个环，即两个端点相邻（垂直或水平，不能斜着），至少要占据 $4$ 个格子（否则没法形成环）。给定一个网格，在满足前面所述的条件下覆盖所有空地，并使得端点在网格边界（即不构成环）的蛇尽量少。（如果一条蛇既构成环，又是端点在边界，那么不计入答案）例如，以下网格：可以由下面三种方案覆盖。还有其它的方案，但是没法仅用一条不构成环的蛇就覆盖整个网格。$n,m\leqslant12$题解黑白染色，边界的点下界为 $1$ ，上界为 $2$内部的点上下界皆为 $2$ ，障碍不连边[CEOI2008] order题面题目链接有 $n$ 个工作， $m$ 种机器，每种机器你可以租或者买过来。每个工作包括若干道工序，每道工序需要某种机器来完成，你可以通过购买或租用机器来完成。现在给出这些参数，求最大利润。$1\leqslant n,m\leqslant1200$题解源点向工作连收益工作向机器连租的价格机器向汇点连买的价格用总收益减去最小割[bzoj3774] 最优选择题面题目链接小 $\text{N}$ 手上有一个 $n\times m$ 的方格图，控制某一个点要付出 $A_{ij}$ 的代价，然后某个点如果被控制了，或者它周围的所有点（上下左右）都被控制了，那么它就算是被选择了的。一个点如果被选择了，那么可以得到 $B_{ij}$ 的回报。现在请你帮小 $\text{N}$ 选一个最优的方案，使得回报减代价尽可能大。$n,m\leqslant 50$题解暂咕T9题意$p\times q$ 的网格，每个位置有 $r$ 种选择，编号为 $1\sim r$ ，每种选择都有对应收益（可能为负）限制每个点分别和它上下左右相邻的 $4$ 个点的选择编号之和不能超过 $d$最大化总收益$p,q,r\leqslant40$题解暂咕]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3383]线性筛素数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3383-%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言首先说一下，这个科技是我在 $\text{Min_25}$ 的博客里看见的，那篇博客是 $2017$ 年的了，去翻了下提交记录发现论文哥也用了这个科技，所以也并不是什么新东西。有兴趣的也可以去阅读一下那篇博客。然后，虽然这个题是线性筛素数，但是这篇题解并不是讲筛法的，而是一些奇技淫巧。若是想学习素数筛法的可以跳过这篇题解了。正文相信各位都知道一个 $O(\sqrt n)$ 判断素数的方法，也就是枚举 $2\sim\lfloor\sqrt n\rfloor$ 检查每个数是否是 $n$ 的约数。具体代码如下：123456bool check(int x) &#123; if(x==0||x==1) return false; for(int i=2;i*i&lt;=x;++i) if(x%i==0) return false; return true;&#125;这个题我们只要对于每个询问都这样判断一次即可，复杂度上界 $O(M\sqrt N)$ 。如果我的数据是 $10^6$ 个 $9840769$ ，并且你的程序没有记忆化，这个程序需要 $\text{7.7s}$ 左右的时间才能出解。我们考虑怎样优化。我们判断约数的时候需要取模，而众所周知 $\text{C++}$ 的取模是很慢的，如果能加快取模的效率，就能对运行速度有很大优化。$\text{Min_25}$ 在他的博客里讲到了这样一种优化方法：考虑到判断约数时我们只需要得知取模结果是否为 $0$ ，并不需要知道实际结果。若 $m$ 为奇数， $m’$ 为 $m$ 模 $2^{64}$ 下的逆元，且有 $n\in\left[0,2^{64}\right)$ ，则：n\equiv0\pmod{m}\ \Leftrightarrow\ (n\cdot m')\%2^{64}\leqslant\lfloor\frac{2^{64}}{m}\rfloor对于一个模数 $m$ 我们预处理出 $m’$ 和 $\lfloor\frac{2^{64}}{m}\rfloor$ ，然后我们就可以把判断 $n\%m$ 是否为 $0$ 转化为一次乘法和一次比较大小。使用这个方法，刚刚跑 $\text{7.7s}$ 的程序只需要 $\text{1.9s}$ 即可出解， $4$ 倍的效率优化！最后这个技巧不仅可以用于判断素数，也可以用于质因数分解，杜教筛、洲阁筛、 $\text{Min_25}$ 筛的预处理。但使用场合还是较少，不过效率优化还是十分明显的！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【更新中】浅谈模意义下形式幂级数的几种操作]]></title>
    <url>%2F%E3%80%90%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%91%E6%B5%85%E8%B0%88%E6%A8%A1%E6%84%8F%E4%B9%89%E4%B8%8B%E5%BD%A2%E5%BC%8F%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言近几年信息学竞赛中出现了一类利用 生成函数 进行计数的题目，这类题目往往需要一顿推导之后得出一个或几个容易计算的生成函数与代表答案的生成函数间的关系。由于这类题目往往需要将结果对一个大质数取模，因此我们可以用模意义下形式幂级数的一些操作来进行这些生成函数之间的运算。本文将从简单的离散傅里叶变换开始，逐步带你了解这一类基于离散卷积的形式幂级数操作。你需要知道的几点多项式由数或字母或两者的乘积组成的代数式叫单项式（单个数或字母也为单项式）单项式中的常数因子为单项式的系数单项式中所有字母的指数之和为单项式的次数由若干个单项式相加组成的代数式叫多项式多项式各项中次数最大的单项式的次数为多项式的次数形式幂级数定义域为 $\mathbb Z^+$ 或其有限子集的函数叫数列（也就是一些有序的数）将数列的每一项求和得到的函数叫级数，一般所讲的级数大多指无穷级数，即数列有无穷项形如 $\sum_{i=0}^{\infty}{a_i(x-x_0)^i}$ 的级数叫幂级数（ $x_0$ 为常数）其中 $a_i$ 为幂级数的系数（可以类比多项式的各项系数）若存在一个非负实数 $r$ 使得幂级数在 $ | x - x_0 | &lt; r $ 时趋近于一个确定的值（收敛），在 $ | x - x_0 | &gt; r $ 时不趋于任何值（发散），则称 $ r $ 为幂级数的收敛半径，否则称该幂级数的收敛半径为 $ +\infty $将一个数列的各项作为幂级数的系数，所得到的幂级数不一定是收敛的（收敛半径可能为 $0$ ）。但我们淡化其收敛与发散的性质，认为它是收敛的，则可以得到一个形式上类似幂级数的东西（也就是长得像幂级数），我们将其称为形式幂级数若一个形式幂级数从某一项开始，后面项的系数全部为 $0$ ，则我们称其为形式多项式离散卷积令 $f(x)$ 和 $g(x)$ 为定义在 $\mathbb R$ 上的两个可积函数，则称 $\int_{-\infty}^{\infty}{f(\tau)g(x-\tau)d\tau}$ 关于 $x$ 的函数为 $f(x)$ 与 $g(x)$ 的卷积与卷积类似，我们称数列 $c_n=\sum_{i=-\infty}^{\infty}{a_ib_{n-i}}$ 为数列 $a_n$ 与数列 $b_n$ 的离散卷积形式幂级数与幂级数一样可以进行运算，其加减运算即是将对应位的系数相加减，而其乘法运算结果定义为两个形式幂级数系数的离散卷积构成的形式幂级数形式幂级数存在乘法逆元当且仅当 $a_0\ne0$ ，且若存在，则逆元唯一后面的形式幂级数运算若无特殊说明，全部在 $\pmod{x^{n+1}}$ 意义下进行，也即为形式多项式记号与约定我们记以数列 $\{f_n\}$ 为系数的形式幂级数为 $F(x)$ 。我们记 $[x^n]F(x)$ 为 $F(x)$ 的 $n$ 次项系数。我们记 $f_ig_i$ 为 $f_i\times g_i$ ，而 $F(x)G(x)$ 为 $F(x)$ 与 $G(x)$ 的离散卷积。多项式乘法快速傅里叶变换我们知道，两个形式幂级数做乘法即为它们系数的离散卷积。假设我们已知 $F(x)$ 和 $G(x)$ 的系数，我们要求得 $H(x)=F(x)G(x)$根据定义：h_n=\sum_{i=0}^{n}{f_ig_{n-i}}\Rightarrow H(x)=\sum_{i=0}^{\infty}{\sum_{j=0}^{i}{f_jg_{i-j}x^i}}很显然，我们求出 $H(x)$ 一项的时间复杂度是 $\Theta(n)$ 的，求出 $n$ 项的时间复杂度是 $\Theta(n^2)$ 的，这肯定是不能接受的。我们来考虑怎样更快速地求得 $H(x)$ 。上面的运算是基于用系数来表示多项式的，事实上，由于 $n+1$ 个点可以唯一确定一个 $n$ 次多项式，我们可以改用 $n+1$ 个点来描述我们的多项式。并且由于我们并不关心形式幂级数的 $x$ 的取值，我们可以任意选取实数甚至虚数作为 $x$ 的值。这样做的好处是什么呢？我们发现，两个点值表达式相乘只需要将对应点的值相乘即可，也就是说，两个点值表达式做乘法运算是 $\Theta(n)$ 的！如果我们可以快速地将系数表达式转化成点值表达式，并快速地将点值表达式转化回来，就可以快速地完成多项式乘法。那么具体如何来做呢？我们先介绍一类神奇的数——单位根 $\omega$ 。单位根$n$ 次单位根是 $n$ 次幂为 $1$ 的复数。也即， $n$ 次单位根 $\omega_n$ 满足 $\omega_n^n=1$ 。由欧拉公式有 $\omega_n^k=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})$ 。在后文中，我们假设 $n$ 为 $2$ 的正整数次幂：于是单位根有这几个性质$\omega_n^{k+\frac n2}=-\omega_n^k$$\omega_{2n}^{2k}=\omega_n^k$$\omega_n^0=\omega_n^n=1$我们来简单证明一下这几个性质：$\omega_n^{k+\frac n2}=-\omega_n^k$\begin{align*} \omega_n^{k+\frac n2}&=\cos((k+\frac n2)\frac{2\pi}{n})+i\sin((k+\frac n2)\frac{2\pi}{n}) \\ &=\cos(k\times\frac{2\pi}{n}+\pi)+i\sin(k\times\frac{2\pi}{n}+\pi) \\ &=-(\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})) \\ &=-\omega_n^k \end{align*}$\omega_{2n}^{2k}=\omega_n^k$\begin{align*} \omega_{2n}^{2k}&=\cos(2k\times\frac{2\pi}{2n})+i\sin(2k\times\frac{2\pi}{2n}) \\ &=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n}) \\ &=\omega_n^k \end{align*}有了这两个性质，我们就能使用膜法了！快速傅里叶变换我们考虑将 $\omega_n$ 的 $0\sim n-1$ 次幂作为 $x$ 代入多项式 $F(x)$ 并求出点值。也即求出原多项式的离散傅里叶变换（DFT）我们先将 $F(x)$ 的各项按次数奇偶性分类：\begin{align*} F(x)&=\sum_{i=0}^{n-1}{f_ix^i} \\ &=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}+\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}} \\ \end{align*}令 $F_1(x)=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}$ ， $F_2(x)=\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}}$ ，则有 $F(x)=F_1(x^2)+xF_2(x^2)$ 。将 $\omega_n^k$ 代入 $x$ ：F(\omega_n^k)=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})再将 $\omega_n^{k+\frac n2}$ 代入 $x$ ：\begin{align*} F(\omega_n^{k+\frac n2})&=F_1(\omega_n^{2k+n})+\omega_n^{k+\frac n2}F_2(\omega_n^{2k+n}) \\ &=F_1(\omega_n^{2k}\times\omega_n^n)+(\omega_n^k\times\omega_{2n}^n)F_2(\omega_n^{2k}\times\omega_n^n) \\ &=F_1(\omega_n^{2k})-\omega_n^kF_2(\omega_n^{2k}) \end{align*}发现了吗？这是膜法！这两个式子间只有第二部分的符号有区别，也就是说，我们计算第一个式子的同时可以直接得到第二个式子的值！将这种奇偶分类求一半的操作递归下去，我们就得到了一个可以在 $\Theta(n\log n)$ 的时间复杂度内将多项式从系数表达式转化为以单位根各次幂为自变量的点值表达式的算法。快速傅里叶逆变换接下来我们再来考虑将这样的点值表达式转化回系数表达式的方法。也即离散傅里叶逆变换（IDFT）我们令 $\{y_0,y_1,y_2,\cdots,y_{n-1}\}$ 为 $\{f_0,f_1,f_2,\cdots,f_{n-1}\}$ 的离散傅里叶变换假设存在 $\{c_0,c_1,c_1,\cdots,c_{n-1}\}$ 满足 $c_k=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i}$也即 $Y(x)$ 在 $\omega_n^{-k}$ 处的点值，则有：\begin{align*} c_k&=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{(\sum_{j=0}^{n-1}{f_j(\omega_n^i)^j})(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_n^j)^i}(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_{n}^{j-k})^i}} \\ &=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}} \end{align*}令 $S(x)=\sum_{i=0}^{n-1}{x^i}$ ，将 $\omega_n^k(k\ne0)$ 代入：\because \begin{cases}\begin{align*} S(\omega_n^k)&=\sum_{i=0}^{n-1}{(\omega_n^k)^i} \\ \omega_n^kS(\omega_n^k)&=\sum_{i=1}^{n}{(\omega_n^k)^i} \\ \end{align*}\end{cases} \Rightarrow\omega_n^kS(\omega_n^k)-S(\omega_n^k)=(\omega_n^k)^n-1 \\ \therefore S(\omega_n^k)=\frac{(\omega_n^k)^n-1}{\omega_n^k-1}=0而当 $k=0$ 时显然 $S(\omega_n^0)=n$ 。接着来看之前的式子：c_k=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}}式子里面的 $\Sigma$ 当 $j\ne k$ 时值为 $0$ ，而 $j=k$ 时值为 $n$ 。因此有 $c_k=nf_k\Rightarrow f_k=\frac{c_k}{n}$于是只要对原多项式的离散傅里叶变换，以 $\omega_n^{-k}$ 为单位根做一次快速傅里叶变换，再将结果除以 $n$ 即可转化回原多项式。代码实现根据上面的理论可以很容易地写出快速傅里叶变换（FFT）的递归实现，但是一般使用时由于递归实现的常数过大，我们一般使用的是迭代实现的快速傅里叶变换。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N],b[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;b[i].re); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*b[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].re+0.1); return 0;&#125;优化三次变两次用刚刚所讲的内容做多项式乘法，需要使用三次 $\text{FFT}$ ：两次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。事实上有一个优化可以优化到只做一次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。我们把 $G(x)$ 的系数放到 $F(x)$ 的虚部里，然后对 $F(x)$ 进行 $\text{DFT}$ ，将 $F(x)$ 平方后进行 $\text{IDFT}$ ，将虚部的系数除以 $2$ 即是答案。考虑为什么这样是对的：对于 $a$ 和 $b$ ，有 $(a+bi)^2=a^2-b^2+(2abi)$ ，因此虚部系数即为答案两倍。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;a[i].im); getRev(n+m+2); DFT(a); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*a[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].im/2+0.1); return 0;&#125;MTT暂咕快速数论变换如果是在模意义下做运算，我们还有一种算法可以胜任，那就是快速数论变换（NTT）考虑到做快速傅里叶变换时我们将单位根代入求出点值，如果模意义下有与单位根性质类似的数，是否可以代替单位根完成一样的工作呢？答案是肯定的，这一类数是——原根 $g$ 。原根我们先给出阶的定义：若 $a\perp p$ 且 $p&gt;1$ ， $a$ 模 $p$ 的阶为满足 $a^n\equiv1\pmod{p}$ 的最小的 $n$ ，记为 $\delta_p(a)$ 。若 $p$ 为正整数， $a$ 是整数，且 $\delta_p(a)=\varphi(p)$ ，则 $a$ 为模 $p$ 的一个原根。（ $\varphi(n)$ 为小于等于 $n$ 的数中与 $n$ 互质的数的个数）原根有一些很有意思的性质：若模 $p$ 存在原根，则其一定有 $\varphi(\varphi(p))$ 个原根。若 $p$ 为质数， $g$ 为 $p$ 的一个原根，则 $g^i\pmod{p}$ 对于不同的 $i\in[1,p)$ 值都不同同时原根在模意义下与单位根有相同的性质，因此我们可以使用原根代替单位根在模意义下做快速数论变换。代码实现类似快速傅里叶变换，只把里面的单位根相应地换成原根，并注意取模即可。【例题】[Luogu3803] 多项式乘法 评测记录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#define MOD 998244353#define N 2100010typedef long long i64;inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(3,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125;&#125;inline void IDFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(332748118,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125; int bk(pow(lmt,MOD-2)); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N];int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;预处理原根我们来考虑一个优化：在 $\text{NTT}$ 的过程中我们多次使用了原根的各次幂，如果我们能将原根的各次幂预处理出来，而不是每次使用都计算一遍，就能有很大的常数优化！在多项式乘法中我们只做了 $3$ 次 $\text{NTT}$ ，所以看上去常数优化并不明显。但是在后面的内容中，随着 $\text{NTT}$ 次数的增多，预处理原根的优化效果将愈发明显。【例题】[Luogu3803] 多项式乘法 评测记录：$1.83s\rightarrow1.3s$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 2100010typedef long long i64;typedef unsigned long long u64;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt(1),r[N],w[N];inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N],l;int main() &#123; scanf("%d%d",&amp;n,&amp;m); init(n+m+2); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); l=getLen(n+m+2); DFT(a,l); DFT(b,l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a,l); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;多项式求逆我们已经知道，当 $f_0\ne0$ 时 $F(x)$ 存在唯一乘法逆元。接下来我们就探讨一下如何求得一个多项式的乘法逆元。考虑已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $F(x)G(x)\equiv1\pmod{x^{n+1}}$如果 $F(x)$ 只有常数项，答案显然是常数项的乘法逆元，我们考虑]]></content>
      <tags>
        <tag>资料</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5373]多项式复合函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5373-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这是这道题复杂度比较正确的一个常数奇大无比的算法，源自 $\text{R.P.BRENT}$ 和 $\text{H.T.KUNG}$ 在 $1978$ 年发表的论文（也就是题面里说的那个全嘤文pdf），我在 $\text{5月15日}$ 蒯到手之后肝了一个晚上，在神犇 rqy 的帮助下成功地写出了66分点名被卡做法awsl，后来研究别人代码的时候发现了 预处理原根 这种神奇操作，于是总算成功AC。正文这种做法基于对外层函数的泰勒展开，我们把内层函数 $G$ 的前 $m$ 项拆出来，记作 $G_m$ ，把剩下的记作 $G_r$ 。(这个 $m$ 到底取多少我们分析复杂度的时候再确定)然后进行泰勒展开：F(G)=F(G_m+G_r)=F(G_m)+F'(G_m)G_r+\frac12F''(G_m)G_r^2+\cdots由于我们只需要求 $F(G)$ 前 $n+1$ 项的值，所以我们只需要知道这个展开式前 $\lceil\frac nm\rceil$ 项的值即可，即：令 $l=\lceil\frac nm\rceil$ ，有F(G(x))\equiv F(G_m(x))+F'(G_m(x))G_r(x)+\cdots+\frac1{l!}F^{(l)}(G_m(x))G_r^l(x)\pmod{x^{n+1}}因此我们只要计算出 $F(G_m(x))$ 的各阶导和 $G_r(x)$ 的各次幂，就可以累加得到 $F(G(x))$ 了。$G_r(x)$ 只需要从 $G(x)$ 中截出来即可，那么如何计算 $F(G_m(x))$ 呢？考虑外层函数最高次项次数为 $2$ 的幂的情况，即：令 $F(x)=f_0+\cdots+f_jx^j$ 且 $j$ 为 $2$ 的正整数次幂，有F(G)=F_1(G)+G^{\frac j2}\cdot F_2(G)这里 $F_1$ 和 $F_2$ 都是最高次项次数为 $\frac j2$ 的多项式，这样一来我们就能递归地计算 $F(G_m(x))$ 了。考虑这一步的时间复杂度：我们令 $M(n)$ 为完成两个 $n$ 次多项式的乘法的时间，即： $M(n)=O(n\log n)$我们设 $T(j)$ 为计算 $G^{\frac j2}$ 和 $F(G)$ 的时间，则有T(j)\leqslant2T(\frac j2)+O(M(\min(jm,n)))我们令 $r$ 为满足 $n\cdot2^k\leqslant jm$ 的最大的 $k$ ，则有T(j)=O(M(n)+2M(n)+\cdots+2^rM(n))+2^{r+1}T(\frac{j}{2^{r+1}})T(j)\leqslant O(\frac{jmM(n)}{n})+(\frac{2jm}{n})T(\frac{j}{2^{r+1}})又因为 $n\cdot2^{r+1}&gt;jm$ ，有T(\frac{j}{2^{r+1}})=O(M(\frac{jm}{2^{r+1}})+2M(\frac{jm}{2^{r+2}})+\cdots)=O(M(n)+2M(\lceil\frac n2\rceil)+4M(\lceil\frac n4\rceil)+\cdots)=O(\log nM(n))因此，我们有 $T(j)=O(\frac{jm\log n}{n}M(n))$ ，所以求解 $F(G_m(x))$ 的时间复杂度为 $O(mn\log^2n)$ 。我们再来考虑对 $F(G_m(x))$ 求导：令 $H(x)=F(G(x))$根据复合函数求导法则，我们有 $H’(x)=F’(G(x))\cdot G’(x)$ ，因此 $F’(G_m(x))=H’(x)\cdot(G_m’(x))^{-1}$ ，由此我们可以计算出泰勒展开式中某一项之后与之前的结果累加得到 $H(x)$ ，同时计算出下一项中 $F(G_m(x))$ 的对应阶导。每计算一次导数的时间复杂度是 $O(n\log n)$ 的，因此计算出所有项的时间复杂度是 $O(l\cdot n\log n)=O(\frac{n^2\log n}{m})$ 。我们已经得到了 $F(G_m(x))$ 的各阶导，而 $G_r(x)$ 的各次幂只需要挨个乘起来即可，时间复杂度也是 $O(\frac{n^2\log n}{m})$ 的。之后各项的计算和累加同样是 $O(\frac{n^2\log n}{m})$ 的，因此这个算法的总复杂度为 $O(mn\log^2n+\frac{n^2\log n}{m})$ 。我们考虑 $m$ 的取值：根据均值不等式，当 $mn\log^2n\sim\frac{n^2\log n}{m}$ 时时间复杂度最优，因此解得当 $m\sim\sqrt{\frac{n}{\log n}}$ 时有最优时间复杂度 $O((n\log n)^{1.5})$ 。最后还是附上参考代码比较好，这个东西由于常数原因必须 预处理原根 才能卡过去，而且好像也没有什么实际用处。。就当是练习码力了 2333123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206#pragma GCC optimize("Ofast,inline")#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native")#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define MOD 998244353#define G 332748118#define N 262210#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(v==0) *pp++=48; else &#123; re int tp(0); while(v) st[++tp]=v%10+48,v/=10; while(tp) *pp++=st[tp--]; &#125; *pp++=32;&#125;inline int pow(re int a,re int b) &#123; re int ans(1); while(b) ans=b&amp;1?(ll)ans*a%MOD:ans,a=(ll)a*a%MOD,b&gt;&gt;=1; return ans;&#125;int inv[N],ifac[N];inline void pre(re int n) &#123; inv[1]=ifac[0]=1; for(re int i(2);i&lt;=n;++i) inv[i]=(ll)(MOD-MOD/i)*inv[MOD%i]%MOD; for(re int i(1);i&lt;=n;++i) ifac[i]=(ll)ifac[i-1]*inv[i]%MOD;&#125;inline int getLen(re int t) &#123; return 1&lt;&lt;(32-__builtin_clz(t));&#125;int lmt(1),r[N],w[N];inline void init(re int n) &#123; re int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(re int i(1);i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); re int wn(pow(3,(MOD-1)/lmt)); w[lmt&gt;&gt;1]=1; for(re int i((lmt&gt;&gt;1)+1);i&lt;lmt;++i) w[i]=(ll)w[i-1]*wn%MOD; for(re int i((lmt&gt;&gt;1)-1);i;--i) w[i]=w[i&lt;&lt;1];&#125;inline void DFT(int*a,re int l) &#123; static unsigned long long tmp[N]; re int u(__builtin_ctz(lmt)-__builtin_ctz(l)),t; for(re int i(0);i&lt;l;++i) tmp[i]=(a[r[i]&gt;&gt;u])%MOD; for(re int i(1);i&lt;l;i&lt;&lt;=1) for(re int j(0),step(i&lt;&lt;1);j&lt;l;j+=step) for(re int k(0);k&lt;i;++k) t=(ll)w[i+k]*tmp[i+j+k]%MOD, tmp[i+j+k]=tmp[j+k]+MOD-t, tmp[j+k]+=t; for(re int i(0);i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,re int l) &#123; std::reverse(a+1,a+l);DFT(a,l); re int bk(MOD-(MOD-1)/l); for(re int i(0);i&lt;l;++i) a[i]=(ll)a[i]*bk%MOD;&#125;int n,m;int a[N],b[N],c[N];void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); re int l(getLen(deg&lt;&lt;1)); for(re int i(0);i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l),DFT(b,l); for(re int i(0);i&lt;l;++i) b[i]=(2ll-(ll)tmp[i]*b[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,l); for(re int i(deg);i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(re int i(0);i+1&lt;deg;++i) b[i]=(ll)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;void getComp(int*a,int*b,int k,int m,int&amp;n,int*c,int*d) &#123; if(k==1) &#123; for(re int i(0);i&lt;m;++i) c[i]=0,d[i]=b[i]; n=m,c[0]=a[0]; &#125; else &#123; static int t1[N],t2[N]; int nl(n),nr(n),*cl,*cr,*dl,*dr; getComp(a,b,k&gt;&gt;1,m,nl,cl=c,dl=d); getComp(a+(k&gt;&gt;1),b,(k+1)&gt;&gt;1,m,nr,cr=c+nl,dr=d+nl); n=std::min(n,nl+nr-1); re int _l(getLen(nl+nr)); for(re int i(0);i&lt;_l;++i) t1[i]=i&lt;nl?dl[i]:0; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?cr[i]:0; DFT(t1,_l),DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) c[i]=((i&lt;nl?cl[i]:0)+t2[i])%MOD; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?dr[i]:0; DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) d[i]=t2[i]; &#125;&#125;inline void getComp(int*a,int*b,int*c,int deg) &#123; static int ts[N],ps[N],c0[N],_t1[N],idM[N]; int M(std::max((int)ceil(sqrt(deg/log2(deg))*2.5),2)),_n(deg+deg/M); getComp(a,b,deg,M,_n,c0,_t1); re int _l(getLen(_n+deg)); for(re int i(_n);i&lt;_l;++i) c0[i]=0; for(re int i(0);i&lt;_l;++i) ps[i]=i==0; for(re int i(0);i&lt;_l;++i) ts[i]=M&lt;=i&amp;&amp;i&lt;deg?b[i]:0; getDer(b,_t1,M); for(re int i(M-1);i&lt;deg;++i) _t1[i]=0; /// Important!!! getInv(_t1,idM,deg); for(int i=deg;i&lt;_l;++i) idM[i]=0; DFT(ts,_l),DFT(idM,_l); for(re int t(0);t*M&lt;deg;++t) &#123; for(re int i(0);i&lt;_l;++i) _t1[i]=i&lt;deg?c0[i]:0; DFT(ps,_l),DFT(_t1,_l); for(re int i(0);i&lt;_l;++i) _t1[i]=(ll)_t1[i]*ps[i]%MOD, ps[i]=(ll)ps[i]*ts[i]%MOD; IDFT(ps,_l),IDFT(_t1,_l); for(re int i(deg);i&lt;_l;++i) ps[i]=0; for(re int i(0);i&lt;deg;++i) c[i]=((ll)_t1[i]*ifac[t]+c[i])%MOD; getDer(c0,c0,_n); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; DFT(c0,_l); for(re int i(0);i&lt;_l;++i) c0[i]=(ll)c0[i]*idM[i]%MOD; IDFT(c0,_l); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; &#125;&#125;int main() &#123; n=read(),m=read(); for(re int i(0);i&lt;=n;++i) a[i]=read(); for(re int i(0);i&lt;=m;++i) b[i]=read(); m=(n&gt;m?n:m)+1; pre(m);init(m*5); getComp(a,b,c,m); for(re int i(0);i&lt;=n;++i) write(c[i]); fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5431]乘法逆元2]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5431-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832%2F</url>
    <content type="text"><![CDATA[此处题面题外话其实我觉得这道题的考点是快读.jpg没有快读的后果正文\large\text{以下运算均在模 }p\text{ 意义下进行}\large\sum_{i=1}^{n}{\frac{k^i}{a_i}}=\sum_{i=1}^{n}{k^i\cdot a_i^{-1}}我们考虑先求出 $a$ 序列的前缀积，记为 $s$ ：\large s_i=\prod_{j=1}^{i}{a_j}记 $a$ 序列前缀积的逆元为 $t$ ，此时如果我们知道这个序列，我们就可以知道 $a$ 中任意一个数的逆元：\large a_i^{-1}=s_{i-1}\cdot t_i而 前缀积的逆元 就等于 逆元的前缀积 ，所以我们只要求出 $t_n$ 就可以线性递推出整个 $t$ 序列了：\large t_n=s_n^{p-2}\large t_i=a_{i+1}\cdot t_{i+1}这样我们就求得了 $a$ 序列的逆元，再用秦九韶算法就能在线性时间内算出题目的式子了。参考代码前方极差码风警告！123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#define N 5000010#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline int pow(int a,int b,int p) &#123; int ans(1); while(b) ans=b&amp;1?(ll)ans*a%p:ans,a=(ll)a*a%p,b&gt;&gt;=1; return ans;&#125;int n,p,k,a[N],s[N]=&#123;1&#125;,inv_s[N],ans;int main() &#123; n=read(),p=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(),s[i]=(ll)s[i-1]*a[i]%p; inv_s[n]=pow(s[n],p-2,p); for(int i=n-1;i;--i) inv_s[i]=(ll)inv_s[i+1]*a[i+1]%p; for(int i=n;i;--i) ans=((ll)inv_s[i]*s[i-1]%p+ans)*k%p; printf("%d",ans); return 0;&#125;5e6 的输入，千万记得快读！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu4315]月下“毛景树”]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu4315-%E6%9C%88%E4%B8%8B%E2%80%9C%E6%AF%9B%E6%99%AF%E6%A0%91%E2%80%9D%2F</url>
    <content type="text"><![CDATA[此处题面前言这道题其实就是把 单点修改 、 区间染色 、 区间加 以及 区间最大值 这四种基本的序列操作出到了树上，很明显是用 树链剖分 + 线段树 解决，但是因为我太蒻了，树剖码到一半码不下去了，所以就全删了改码了个 Link/Cut Tree ，顺便 拿了这个题的RANK1 。边转点树剖的边转点大家都知道是把每条边的权值给深度较深的那个点，但是我们不能在 LCT 上也这么做，因为有 makeroot 操作的存在， LCT 上结点的父子关系不是确定的，所以我们采取建立 虚拟结点 的方式：1234// 第 i 条边连接 u 和 v 这两个点，权值为 wval[n+i]=maxv[n+i]=w;link(u,n+i);link(n+i,v);用 $n$ + $i$ 号结点表示第 $i$ 条边，再用它去分别连接原先的边连接的结点。需要注意的地方这种写法会产生 $2n$ 个结点， 空间千万要开够！标记上传下传的时候要分 原结点 和 虚拟结点 两种情况讨论！标记这道题我们只需要维护一个 区间染色 的标记和一个 区间加 的标记就行，我多维护了一个 siz 数组储存子树内 虚拟结点 的数量，上传时判断当前结点是不是 虚拟结点 就行。标记下传的时候要 先下传区间染色，再下传区间加 ，若是先下传了 区间加 ，后面 区间染色 的时候就会 覆盖掉最后附上此题 $AC$ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++inline int max(int a,int b)&#123;return b&lt;a?a:b;&#125;inline void swap(int&amp;a,int&amp;b)&#123;int tmp(a);a=b,b=tmp;&#125;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline char gtc() &#123; re char c(gc); while(c!='S'&amp;&amp;c!='h'&amp;&amp;c!='o'&amp;&amp;c!='d'&amp;&amp;c!='a') c=gc; return c;&#125;inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(!v) *pp++=48; else &#123; re char*tp(st); while(v) *++tp=v%10+48,v/=10; while(tp!=st) *pp++=*tp--; &#125; *pp++='\n';&#125;int n,u,v,w;char opt;int ch[N][2],fa[N],rev[N],val[N],maxv[N],ass[N],addv[N],siz[N];inline void assign(int x,int y)&#123;val[x]=x&gt;n?y:0,maxv[x]=siz[x]&gt;0?y:0,addv[x]=0,ass[x]=y;&#125;inline void add(int x,int y)&#123;val[x]+=x&gt;n?y:0,maxv[x]+=siz[x]&gt;0?y:0,addv[x]+=siz[x]&gt;0?y:0;&#125;inline void up(int x)&#123;siz[x]=siz[lc(x)]+siz[rc(x)]+(x&gt;n),maxv[x]=max(val[x],max(maxv[lc(x)],maxv[rc(x)]));&#125;inline void down(int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,rev[x]=0,swap(lc(x),rc(x)); if(ass[x]) assign(lc(x),ass[x]),assign(rc(x),ass[x]),ass[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z,up(y);&#125;inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;up(x);&#125;inline void access(int x)&#123;for(int y(0);x;x=fa[y=x])splay(x),rc(x)=y,up(x);&#125;inline void mrt(int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void split(int x,int y)&#123;mrt(x),access(y),splay(y);&#125;inline void link(int x,int y)&#123;mrt(x),fa[x]=y;&#125;int main() &#123; n=read(); for(re int i(1);i&lt;n;++i) siz[n+i]=1; for(re int i(1);i&lt;n;++i) u=read(),v=read(),val[n+i]=maxv[n+i]=read(),link(u,n+i),link(n+i,v); opt=gtc(); while(opt!='S') &#123; u=read(),v=read(); switch(opt) &#123; case'h': access(n+u),splay(n+u),val[n+u]=v; break; case'o': split(u,v),assign(v,read()); break; case'd': split(u,v),add(v,read()); break; case'a': split(u,v),write(maxv[v]); &#125; opt=gtc(); &#125; fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【置顶】学习资料]]></title>
    <url>%2F%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[收集的一些资料，留给自己慢慢啃。各路OJ洛谷、bzoj、POJ、UOJ、LibreOJ、51Nod、OIH、评测鸭、hihoCoder、OHO-OJ、Vijos、ZHZXOJ、ZOJ博文索引yzhang、bztMinamoto、自为风月马前卒、JasonZhan、huyufeifei、xehoth、饕餮传奇、Venus、yyb、rqy、Mrsrz、xht37、Victor、fcwww、EI、诗乃、Siyuan、zzq、zkw数据结构猫树、zkw线段树、Leafy Tree、Link-Cut Tree、树套树、后缀数组、回文自动机算法分治、动态dp、生成函数、计算几何其它OI Wiki、算法可视化、SAM可视化、题号查找器、图可视化、OEIS、MaHua在线Markdown编辑器、矩阵乘法、图床搭建、MiNa]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3372]线段树1]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3372-%E7%BA%BF%E6%AE%B5%E6%A0%911%2F</url>
    <content type="text"><![CDATA[此处题面去了 WC2019 的同学应该对 指令集 有些印象，没去的同学 ( 比如我 ) 可能也通过一些途径了解到了这个暴力踩标程的毒瘤 ( 据说现场踩 Ynoi五彩斑斓的世界 ) 。但是由于我太弱，实在过不了那道题 dllxl Orz ，所以我就来拿这道题练手了。一、指令集是什么？其实就是压位，常用的是压256位。也有能压512位的，但大部分情况不支持 ( 硬件 + 软件 ) 。二、它为什么快？就像压位高精会比裸高精快， bitset 比 bool数组 快一样，你把8个32位的 int 压成一个256位的玩意儿，每次操作可以看成是同时对8个 int 进行操作 ( 但其实并不是这样 ) ，所以理论上常数会是原来的 $\frac{1}{8}$ ( 但其实做不到 $\frac{1}{8}$ ) 。三、它要怎么用？请自行摸索首先你需要 immintrin.h 库，里面啥都有然后再在程序前加上 #pragma GCC target(&quot;avx,avx2&quot;) ，这样你就可以把你的 int 啊 long long 啊什么的压成 __m256i ，把 float 压成 __m256 ，还能把 double 压成 __m256d 。什么你问我具体怎么做？我不知道啊.jpg这里是连快读都没用的$O\left(n^2\right)$暴力评测记录。最后附上这道题的程序，想学学指令集的可以看看：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#pragma GCC optimize("Ofast,fast-math")#pragma GCC target("avx,avx2")#include &lt;cstdio&gt;#include &lt;immintrin.h&gt;int n,m,num,x[5],opt,p,q,k;__m256i a[25010];inline void add(int l,int r,int v) &#123; while(((l-1)&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1]+=v,++l; if(l==r+1)return; while((r&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1]+=v,--r; if(l==r+1)return; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(v,v,v,v); while(l&lt;=r)a[l]=_mm256_add_epi64(a[l],s),++l;&#125;inline long long query(int l,int r) &#123; long long ans(0); while(((l-1)&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1],++l; if(l==r+1)return ans; while((r&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1],--r; if(l==r+1)return ans; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(0,0,0,0); while(l&lt;=r)s=_mm256_add_epi64(a[l],s),++l; for(int i=0;i&lt;4;++i) ans+=((long long*)&amp;s)[i]; return ans;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m);num=n&gt;&gt;2; for(int i=1;i&lt;=num;++i) &#123; for(int j=1;j&lt;=4;++j) scanf("%d",x+j); a[i]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); &#125; for(int i=1;i&lt;=(n&amp;3);++i) scanf("%d",x+i); a[++num]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); while(m--) &#123; scanf("%d%d%d",&amp;opt,&amp;p,&amp;q); if(opt==1) scanf("%d",&amp;k),add(p,q,k); else printf("%lld\n",query(p,q)); &#125; return 0;&#125;这道题要开 long long ，如果是 int 的话程序第一句的 Ofast 优化去掉也能过！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[JLOI2014]松鼠的新家]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-JLOI2014-%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[此处题面由于树上两点路径唯一，维尼的路线也是唯一的，因此我们只要 统计维尼经过每个点的次数 即可。而树上路径又跟 LCA 什么的有关，因此这道题的做法就多种多样了。由于只有一次询问，比较容易想到的做法是 树上差分 后求 LCA 轻松搞定。再想深一点你会发现这道题简直就是 树链剖分 的板子，再加上这道题不用维护什么子树信息，所以 树链剖分 能做 Link/Cut Tree 当然也能做！需要注意的几点：这道题 LCT 得卡常，写的时候注意不要太飘；由于两条链相交的点会被重复计算，因此每次加的时候链头链尾要有一个减 1 (我是链尾)；最后一个点是不需要准备糖果的！输出答案的时候记得把标记都下放了 (我是先 makeroot 再输出) 。1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;cstdio&gt;#define N 300010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re registerinline void swap(re int&amp;a,re int&amp;b)&#123;re int tmp(a);a=b,b=tmp;&#125;int ch[N][2],fa[N],rev[N],val[N],addv[N];inline void add(re int x,re int y)&#123;val[x]+=y,addv[x]+=y;&#125;inline void down(re int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(re int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(re int x) &#123; re int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;&#125;inline void splay(re int x) &#123; re int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;&#125;inline void access(re int x)&#123;for(re int y(0);x;x=fa[y=x])splay(x),rc(x)=y;&#125;inline void mrt(re int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void link(re int x,re int y)&#123;mrt(x),fa[x]=y;&#125;int n,a[N],x,y;int main() &#123; scanf("%d",&amp;n); for(re int i(1);i&lt;=n;++i) scanf("%d",a+i); for(re int i(1);i&lt;n;++i) scanf("%d%d",&amp;x,&amp;y),link(x,y); for(re int i(1);i&lt;n;++i) --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1); for(re int i(1);i&lt;=n;++i) mrt(i),printf("%d\n",val[i]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[SDOI2011]染色]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-SDOI2011-%E6%9F%93%E8%89%B2%2F</url>
    <content type="text"><![CDATA[此处题面这道题的做法其实已经很明显了， 树链剖分 + 线段树 ，只是看到区间赋值心血来潮想用 珂朵莉树 水，结果就过了╮(╯▽╰)╭操作 1 就是 区间推平 ( assign ) ，操作 2 可以像找 最近公共祖先 ( LCA ) 一样一边往上方跳一边统计，由于珂朵莉树的结点存储的是一段值相同的连续区间，我们只需要记录上一次访问的结点的值与当前结点的值比较，若不同则更新并计数。值得注意的 $3$ 点：由于我们是统计链上的连续段，所以我们应从深度大的结点往小的枚举。由于我们是从链的两端分别往上跳，所以我们需要分别记录两边上次访问的结点的值。最后处于同一条链上时，需要考虑两端的值相同的情况。最后放上 $AC$ 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include &lt;cstdio&gt;#include &lt;set&gt;using std::set;#define N 100010struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V)&#123;&#125; inline int operator&lt;(const node&amp;x)const&#123;return l&lt;x.l;&#125;&#125;;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;inline IT split(int pos) &#123; IT it(--s.upper_bound(node(pos))); if(it-&gt;l==pos) return it; int L(it-&gt;l),R(it-&gt;r),V(it-&gt;v); s.erase(it),s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;inline void assign(int l,int r,int v) &#123; IT itr(split(r+1)),itl(split(l)); s.erase(itl,itr);s.insert(node(l,r,v));&#125;int n,m,a[N],x,y,z;char opt;int e,bg[N],nx[N&lt;&lt;1],to[N&lt;&lt;1];inline void link(int u,int v)&#123;to[++e]=v,nx[e]=bg[u],bg[u]=e;&#125;int fa[N],dep[N],siz[N],ws[N];void dfs1(int now,int f) &#123; fa[now]=f,dep[now]=dep[f]+1,siz[now]=1; int mx(-1); for(int i=bg[now];i;i=nx[i]) if(to[i]!=f) &#123; dfs1(to[i],now); siz[now]+=siz[to[i]]; if(siz[to[i]]&gt;mx) mx=siz[to[i]],ws[now]=to[i]; &#125;&#125;int cnt,top[N],id[N],wt[N];void dfs2(int now,int tp) &#123; top[now]=tp,id[now]=++cnt,wt[cnt]=a[now]; if(!ws[now]) return; dfs2(ws[now],tp); for(int i=bg[now];i;i=nx[i]) if(to[i]!=fa[now]&amp;&amp;to[i]!=ws[now]) dfs2(to[i],to[i]);&#125;inline void change(int x,int y,int z) &#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; assign(id[top[x]],id[x],z); x=fa[top[x]]; &#125; else &#123; assign(id[top[y]],id[y],z); y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) assign(id[y],id[x],z); else assign(id[x],id[y],z);&#125;inline int query(int x,int y) &#123; int ans(0),lasta(0),lastb(0); IT itl,itr; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; itr=split(id[x]+1),itl=split(id[top[x]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; x=fa[top[x]]; &#125; else &#123; itr=split(id[y]+1),itl=split(id[top[y]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) &#123; itr=split(id[x]+1),itl=split(id[y]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; else &#123; itr=split(id[y]+1),itl=split(id[x]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; return ans-(lasta==lastb);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) scanf("%d",a+i); for(int i=1;i&lt;n;++i) &#123; scanf("%d%d",&amp;x,&amp;y); link(x,y),link(y,x); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=n;++i) s.insert(node(i,i,wt[i])); while(m--) &#123; scanf("\n%c%d%d",&amp;opt,&amp;x,&amp;y); if(opt=='C') &#123; scanf("%d",&amp;z); change(x,y,z); &#125; else printf("%d\n",query(x,y)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu1047]校门外的树]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu1047-%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[此处题面看见一堆 dalao 题解写树状数组线段树，蒟蒻在这里安利一种毒瘤数据结构——珂朵莉树。一、介绍。珂朵莉树 (ChthollyTree) ，又名 OldDriverTree (老司机树)，简称 ODT ，是一种非常暴力的数据结构，它将一段值相同的区间以三元组 &lt; 左端点，右端点，值 &gt; 的方式存储起来，因此它的效率是建立在区间推平操作 (assign) 上的(也就是本题的砍树)。二、存储方式。珂朵莉树的存储基于平衡树(我这里为了方便用了 STL 的 set )，这里定义珂朵莉树的结点为：1234567struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;这里的 l 和 r 是区间的左右端点(闭区间)，v 是该区间的值(表示这一区间内所有元素的值都是v)，然后是构造函数和重载运算符，这里重载成比较区间左端点。最后把区间扔进平衡树就行了：12set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;三、核心操作。珂朵莉树的操作是基于一个核心操作 split 的，传入参数 pos 后，它能返回左端点值为 pos 的结点的迭代器，如果不存在这样的结点，它就会把包含 pos 的结点 &lt; l，r，v &gt; 拆成 &lt; l , pos-1 , v &gt; 和 &lt; pos , r , v &gt; ，然后返回后面这个结点的迭代器。先上代码：123456789IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;一行行来看：1IT it=s.lower_bound(node(pos));lower_bound 是获取左端点大于等于 pos 的第一个结点。1if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it;如果这个结点的左端点正好是 pos ，我们就直接返回它。12--it;int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v;否则的话 —it 得到的就是包含 pos 的结点，我们用 L、R、V 储存它的左右端点和值。1s.erase(it);然后我们删掉这个结点。12s.insert(node(L,pos-1,V));return s.insert(node(pos,R,V)).first;最后我们插入两个新的结点，左右端点分别是 &lt; L、pos-1 &gt; 和 &lt; pos、R &gt; ，顺便返回后面这个结点的迭代器。这样我们就完成了 split 操作。四、区间推平。这是保证珂朵莉树复杂度不至于爆炸的重要操作，它能将一个区间内的值变得一样，本题的砍树就是区间赋值为 0 。先上代码：12345void assign(int l,int r,int v) &#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,v));&#125;看上去十分的暴力，事实上珂朵莉树就是这么暴力的数据结构。稍微解释一下代码：1IT itl=split(l),itr=split(r+1);itl 指向的结点左端点为 l ，itr 指向的结点左端点为 r+1 。1s.erase(itl,itr);删去平衡树中 [ itl , itr ) 的结点(左闭右开区间)。1s.insert(node(l,r,v));直接插入一个 &lt; l , r &gt; ，值为v的区间。就是这么直接暴力！Upd：由于某些未知原因（珂学规定），珂朵莉树提取区间时需要先 split 右端点！五、其他操作。1. 初始化初始化操作就是直接插入，本题所有树默认都是种上的，全部赋值为 1 就行：1s.insert(node(0,l,1));2. 区间操作区间操作的话这里就以题目的求和为例，先上代码：1234567int sum(int l,int r) &#123; int _sum=0; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) _sum+=(itl-&gt;v)*((itl-&gt;r)-(itl-&gt;l)+1); return _sum;&#125;同样是非常的暴力，直接取出所有区间内的结点暴力求和就行了，其他的操作如区间加法乘法什么的也是一样的，取出结点遍历一遍就行。六、本题代码。最后放上本题AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;cstdio&gt;#include&lt;set&gt;using namespace std;struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;int l,m,x,y,_sum;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;void remove(int l,int r) &#123; IT itl=split(l),itr=split(r+1); s.erase(itl,itr); s.insert(node(l,r,0));&#125;void sum() &#123; for(IT it=s.begin();it!=s.end();++it) _sum+=it-&gt;v*(it-&gt;r-it-&gt;l+1);&#125;int main() &#123; scanf("%d%d",&amp;l,&amp;m); s.insert(node(0,l,1)); for(int i=1;i&lt;=m;++i) &#123; scanf("%d%d",&amp;x,&amp;y); remove(x,y); &#125; sum(); printf("%d",_sum);&#125;七、总结珂朵莉树的效率建立在区间推平操作 (assign) 上，它能使结点数量快速减小从而保证时间复杂度，因此珂朵莉树十分容易被卡，不到万不得已还是得乖乖用别的数据结构，不过它的代码十分简单，考场上写不出别的数据结构时也是可以交一个珂朵莉树的。]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
</search>
