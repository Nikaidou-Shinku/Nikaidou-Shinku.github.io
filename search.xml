<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【题解】[Luogu5489]EntropyIncreaser与动态图]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5489-EntropyIncreaser%E4%B8%8E%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题其实没有多难，静下来慢慢写还是十分可做的，不失为一道 $\text{LCT}$ 练手好题。正文首先看到 $1$ 操作连边，第一反应应该就是 $\text{Link/Cut Tree}$ 了，然而怎么维护割边割点数量呢？我们分开讨论。割边考虑对于一个环，环上所有边一定不会是割边；而对于一条链，链上所有边一定是割边。我们可以直接维护每条边是不是割边，初始时所有边都是割边，当某次加边操作产生了环，则环上所有边都不会成为割边了。具体来讲，边转点后所有边权值均为 $1$ ，当某次 $\text{Link}$ 的两结点已经连通，则将两结点间的链上的边全部赋值为 $0$ ，同时维护和即可。割点割点不像割边那样好处理了。考虑静态的情况，静态割点有一个比较套路的方法是用圆方树，我们可以尝试动态地维护一棵圆方树：每次连边产生环就将环上所有点连到一个方点上来。考虑这样做的复杂度：假设环的长度是 $L$ ，每次会用 $O(L\log n)$ 的复杂度删去一个长为 $O(L)$ 的环，均摊复杂度为 $O(n\log n)$ 。最后于是使用两棵 $\text{LCT}$ 分别维护割边和割点即可。参考代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;namespace Summer &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],mark[N]; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void NaCly_Fish_Orz(int x) &#123; if(x) &#123; val[x]=sumv[x]=0; mark[x]=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; if(mark[x]) &#123; NaCly_Fish_Orz(lc(x)); NaCly_Fish_Orz(rc(x)); mark[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125;&#125;namespace Pockets &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],st[N],num; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125; void print(int now) &#123; if(now) &#123; down(now); print(lc(now)); st[++num]=now; print(rc(now)); &#125; &#125;&#125;int n,q,opt,u,v,last,tot,ans,SummerPockets;int fa[N];inline int find(int x) &#123; return x==fa[x]?x:fa[x]=find(fa[x]);&#125;inline void getEdge(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Summer::mrt(u); Summer::access(v); Summer::splay(v); ans=Summer::sumv[v];&#125;inline void getPoint(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); ans=Pockets::sumv[v];&#125;inline void link(int u,int v) &#123; int x=find(u),y=find(v); if(x==y) &#123; Summer::mrt(u); Summer::access(v); Summer::splay(v); Summer::NaCly_Fish_Orz(v); getPoint(u,v); if(ans&gt;2) &#123; ++SummerPockets; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); Pockets::num=0; Pockets::print(v); for(int i=1;i&lt;Pockets::num;++i) Pockets::cut(Pockets::st[i],Pockets::st[i+1]); for(int i=1;i&lt;=Pockets::num;++i) Pockets::link(Pockets::st[i],SummerPockets); &#125; &#125; else &#123; ++tot; fa[y]=x; Summer::val[tot]=1; Summer::link(u,tot); Summer::link(tot,v); Pockets::link(u,v); &#125;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;q); tot=SummerPockets=n; for(int i=1;i&lt;=n;++i) fa[i]=i,Pockets::val[i]=1; while(q--) &#123; scanf("%d%d%d",&amp;opt,&amp;u,&amp;v); u^=last,v^=last; switch(opt) &#123; case 1: &#123; link(u,v); break; &#125; case 2: &#123; getEdge(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; default: &#123; getPoint(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu2617]DynamicRankings]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu2617-DynamicRankings%2F</url>
    <content type="text"><![CDATA[此处题面前言在题解区看见了一个用分块写这个题的，但是在数据加强到 $10^5$ 后貌似已经过不去了（或许卡卡常还有救），难道分块真的就比不过这些树套树整体二分？不不不，分块的潜力远远不止这些！分块无快读无 $\text{O2}$ 评测记录正文之前那篇分块题解的做法是二分答案，然后块内二分检验，这样做的时间复杂度是 $O(n\sqrt n\log n\log V)$ 的，其中 $V$ 是值域。然而二分跟分块就很不搭，我们考虑一个不需要二分也能求第 $k$ 小的方法。先离散化，对序列分块，考虑维护块内每个数的出现次数，再将值域分块，维护每个块内每个值域块中数的出现次数。然后做前缀和，这样我们就能 $O(1)$ 查询一段块中每个数的出现次数以及每个值域块中数的出现次数。这部分的预处理是 $O(n\sqrt n)$ 的。查询时考虑将散块中每个数及值域块中数的出现次数先记录下来，这部分是 $O(\sqrt n)$ 的，然后跳值域块，超过 $k$ 了就跳块内的数，直到找到正好超过 $k$ 的位置，这样可以 $O(\sqrt n)$ 查询第 $k$ 小。修改时只要考虑对预处理的信息的影响即可，由于我们预处理的是前缀和，所以每次修改至多修改 $O(\sqrt n)$ 个块。这样我们就得到了一个 $O(n\sqrt n)$ 的优秀算法，可以通过此题。最后这个做法是另一个题的 $trick$ ，有兴趣的可以去试一下：望月悲叹的最初分块。最后给出代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using std::sort;using std::unique;using std::lower_bound;#define N 100010inline int min(int a,int b) &#123; return a&lt;b?a:b;&#125;struct node&#123;int opt,l,r,k;&#125;q[N];int n,m,a[N],b[N&lt;&lt;1],tot,l,r,k;char opt;int L[320],R[320];int siz,szv,num,numsz;int bl[N],blv[N&lt;&lt;1];int sumc[320][N&lt;&lt;1];int sums[320][450];inline void modify(int x,int y) &#123; for(int i=bl[x];i&lt;=num;++i) &#123; --sumc[i][a[x]]; --sums[i][blv[a[x]]]; ++sumc[i][y]; ++sums[i][blv[y]]; &#125; a[x]=y;&#125;int tmpa[N&lt;&lt;1],tmpc[450];inline int query(int l,int r,int k) &#123; int ans; if(bl[l]==bl[r]) &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; else &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=R[bl[l]];++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=L[bl[r]];i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]+sumc[bl[r]-1][i]-sumc[bl[l]][i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=R[bl[l]];++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; for(int i=L[bl[r]];i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; return ans;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf("%d",a+i); b[++tot]=a[i]; &#125; for(int i=1;i&lt;=m;++i) &#123; scanf("\n%c%d%d",&amp;opt,&amp;l,&amp;r); if(opt=='Q') &#123; scanf("%d",&amp;k); q[i]=(node)&#123;1,l,r,k&#125;; &#125; else &#123; q[i]=(node)&#123;2,l,r,0&#125;; b[++tot]=r; &#125; &#125; sort(b+1,b+tot+1); tot=unique(b+1,b+tot+1)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+tot+1,a[i])-b; siz=ceil(sqrt(n)); szv=ceil(sqrt(tot)); for(int i=1;i&lt;=n;++i) bl[i]=(i-1)/siz+1; for(int i=1;i&lt;=tot;++i) blv[i]=(i-1)/szv+1; num=bl[n],numsz=blv[tot]; for(int i=1;i&lt;=num;++i) &#123; L[i]=R[i-1]+1; R[i]=min(L[i]+siz-1,n); for(int j=1;j&lt;=tot;++j) sumc[i][j]=sumc[i-1][j]; for(int j=1;j&lt;=numsz;++j) sums[i][j]=sums[i-1][j]; for(int j=L[i];j&lt;=R[i];++j) &#123; ++sumc[i][a[j]]; ++sums[i][blv[a[j]]]; &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; if(q[i].opt==1) printf("%d\n",query(q[i].l,q[i].r,q[i].k)); else modify(q[i].l,lower_bound(b+1,b+tot+1,q[i].r)-b); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.6字符串]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-6%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意有一个长度为 $n$ 的字符串，已知第 $i$ 种字符刚好有 $a_i$ 个，求 $kmp$ 数组之和最小是多少。$n,字符种数\leqslant10^5$题解将出现次数最少的字符放 $1$ 个在最前面，然后放其它字符，最后放剩下的字符特判只有 $1$ 种字符的情况T2题意定义两个字符串相同为它们的最小字符表示法相同给定 $S,T$ ，求 $T$ 在 $S$ 中的出现次数$总串长\leqslant10^6$题解以每个字符上一次出现的位置为值做 $kmp$T3题意求有多少个长度为 $n$ 的字符串， $kmp$ 数组 $next[n]=0$ ，并输出满足条件的字典序第 $k$ 大的 $01$ 串。$n\leqslant64$ , $T\leqslant1000$题解设 $f_i$ 表示长度为 $i$ 的，没有前缀等于后缀的字符串数量。暂咕T4题意有多少个长度为 $k$ 的，最小循环表示法唯一且最小表示法就是本身的串的个数。$k\leqslant10^6$题解枚举循环节，莫比乌斯反演容斥T5题意如果两个长度为 $n$ 的字符串 $S,T$ 满足对于任意一对整数 $(i,j)$ ，如果 $S[i,j]$ 为回文串， $T[i,j]$ 也为回文串，我们称 $S,T$ 为回文等价，给出 $S$ ，求有多少 $T$ 满足与 $S$ 回文等价。$|S|,|T|\leqslant10^6$题解做 $Manacher$ 时将字符相同的位置用并查集连起来T6题意给你一个长度为 $n$ 的字符串，求一个最大的 $k$ ，使得存在一个字符串序列 $a_1,a_2,\ldots,a_k$ ，其中 $a_i$ 在 $a_{i+1}$ 中出现两次，且 $a_i$ 为给出的串的子串$n\leqslant10^5$题解暂咕T7题意给一个字符串，求一个最大长度 $L\leqslant\frac n2$ ，使得前 $L$ 个字符与后 $L$ 个字符循环同构。$n\leqslant10^6$题解暂咕T8题意给一个长度为 $n$ 的字符串 $s$ ，有 $q$ 次询问，每次询问给出两个区间，求第一个区间中字典序最小的子串使得该子串的字典序大于第二个区间的串。$n\leqslant10^5$ , $q\leqslant2\times10^5$题解建 $\text{SAM}$ ，二分 + 倍增 + 线段树查询T9题意给你长度为 $n$ 的字符串 $T$ ，你可以用 $T$ 中的子串去拼另一个字符串，能拼出字符串 $S$ 的方案中我们选择步数最少的作为拼出 $S$ 的方案，求长度为 $m$ 的能拼出的字符串中，方案步数最大是多少。$n\leqslant10^5$ , $m\leqslant10^{18}$题解二分 + 矩阵乘法]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.5模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-5%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.4计数]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-4%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意小 $\text{A}$ 会投 $a$ 次硬币，小 $\text{B}$ 会投 $b$ 次硬币，求有多少种情况，小 $\text{A}$ 投出的硬币正面向上的次数严格大于小 $\text{B}$ 投出的硬币正面向上的次数，答案保留最后 $k$ 位$1\leqslant a,b\leqslant10^{15}$ , $b\leqslant a\leqslant b+10000$ , $1\leqslant k\leqslant9$题解设 $x$ 为小 $\text{A}$ 投出的向上的次数，设 $y$ 为小 $\text{B}$ 投出的向下的次数。有 $x+y&gt;b$ ，枚举 $x+y$答案即是 $\sum_{i=b+1}^{a+b}{\binom{a+b}{i}}$T2题意求 $n$ 个点 $m$ 条边的无向连通图的个数，点有标号$n\leqslant30$ , $m\leqslant100$题解设 $f_{i,j}$ 表示 $i$ 个点 $j$ 条边的无向连通图，枚举与 $1$ 相连的连通块转移$f_{i,j}=\binom{\frac{i(i-1)}{2}}{j}-\sum_{x=1}^{i}{\sum_{k=0}^{j}{f_{x,k}\times\binom{\frac{(i-x)(i-x-1)}{2}}{j-k}\times\binom{n-1}{x-1}}}$T3题意给定一个 $n$ 个点的图，初始时没有边每次随机选择两个不相同的点连接起来求期望要多少次才能使整个图连通$n\leqslant30$题解考虑到 $30$ 的拆分数只有 $5600$ 左右，可以直接将图的连通情况作为状态，然后 $O(n^2)$ 转移T4题意给出一个 $n$ 个点 $m$ 条边的无向图，每条边的权值不固定，为 $[0,1]$ 内的随机变量，无重边无自环，求最小生成树上最大边的期望边权$n\leqslant10$ , $m\leqslant\frac{n(n-1)}{2}$题解设 $f_{s,i}$ 表示连通块 $s$ 里连了 $i$ 条边的方案数设 $g_{s,i}$ 表示在点集 $s$ 里连了 $i$ 条边且不连通的方案数暂咕[SHOI2017] 分手是祝愿题面题目链接Zeit und Raum trennen dich und mich.时空将你我分开。$\text{B}$ 君在玩一个游戏，这个游戏由 $n$ 个灯和 $n$ 个开关组成，给定这 $n$ 个灯的初始状态，下标为 $1\sim n$ 的正整数。每个灯有两个状态亮或灭，我们用 $1$ 来表示这个灯是亮的，用 $0$ 表示这个灯是灭的，游戏的目标是使所有灯都灭掉。但是当操作第 $i$ 个开关时，所有编号为 $i$ 的约数（包括 $1$ 和 $i$ ）的灯的状态都会被改变，即从亮变成灭，或者是从灭变成亮。$\text{B}$ 君发现这个游戏很难，于是想到了这样的一个策略，每次等概率随机操作一个开关，直到所有灯都灭掉。这个策略需要的操作次数很多， $\text{B}$ 君想到这样的一个优化。如果当前局面，可以通过操作小于等于 $k$ 个开关使所有灯都灭掉，那么他将不再随机，直接选择操作次数最小的操作方法（这个策略显然小于等于 $k$ 步）操作这些开关。$\text{B}$ 君想知道按照这个策略（也就是先随机操作，最后小于等于 $k$ 步，使用操作次数最小的操作方法）的操作次数的期望。这个期望可能很大，但是 $\text{B}$ 君发现这个期望乘以 $n!$ 一定是整数，所以他只需要知道这个整数对 $100003$ 取模之后的结果。$n\leqslant100000$题解设 $f_i$ 为从还剩 $i$ 个位置到还剩 $i-1$ 个位置的期望步数暂咕T6题意在一个直角坐标系上依次插入 $n$ 个点，每次插入之后输出当前有多少个三角形严格覆盖原点。（强制在线）$n\leqslant100000$题解考虑一个不合法的方案，对一个极角最小的点，另两个点一定在原点到该点连线的半平面内用平衡树维护即可T7题意“奋战三星期，举重五百斤”，一大群鸽子来到了 $\text{CJ}$ 的健身房，发现房间里有一排共 $n$ 个铁饼。有 $Q$ 次操作，你需要支持三种操作：1 x y 将第 $x$ 个铁饼的重量设置为 $y$2 L R 翻转第 $L$ 至第 $R$ 个铁饼3 L R W 询问仅使用 $L$ 到 $R$ 之间的铁饼能否拼出一个重量为 $W$ 的杠铃鸽子们还在健身房的天花板上发现了一个数字 $k$ 。机智的它们立刻发现，在任意时刻出现过的不同的铁饼数目是不会超过 $k$ 的。$n,Q,W\leqslant100000$ , $k\leqslant10$题解[HAOI2008]硬币购物暂咕T8题意给你一个长度为 $n$ 的序列 $A$ ，如果 $n$ 不是非降，你必须删掉一个数，直到非降为止，求不同方案数，对 $1000000007$ 取模。$n\leqslant2000$题解设 $f_i$ 表示删到长度为 $i$ 的非降序列的方案数（包含不合法）预处理 $g_i$ 为长度为 $i$ 的非降序列的个数$f_i=g_i\times(n-i)!$从小到大容斥掉不合法的方案T9题意给你一个长度为 $2n$ 的序列 $a$ ，其中有些位置上的元素是 $-1$ ，保证 $1\sim 2n$ 最多只出现一次，定义一个长度为 $n$ 的数组 $b$ ， $b_i=\min(a_{2i-1},a_{2i})$ ，求有多少种不同的 $b$ 数组。$n\leqslant300$题解把 $a$ 分成 $n$ 个二元组，则每个二元组只有 $3$ 种情况$f_{i,j,k}$ 表示从大往小考虑到第 $i$ 个数，有 $j$ 个 $(-1,x)$ ，有 $k$ 个 $(-1,y)$ 。（ $y$ 为已经填进去的）暂咕T10题意给定一个长度为 $n$ 的正整数序列 $a$求有多少个长度为 $n$ 的正整数序列 $x$ 满足对于任意 $1\leqslant i\leqslant n$ , $1\leqslant x_i\leqslant D$对于任意 $1\leqslant i&lt;j\leqslant n$ , $\max(a_i,a_j)&lt;|x_i-x_j|$$n\leqslant50$ , $a_i\leqslant40$题解按 $a_i$ 排序依次插入设 $f_{i,j,s}$ 表示插入到第 $i$ 个，还有 $j$ 个缝隙，压紧后长度为 $s$ 的方案数枚举第 $i$ 个是放在两端还是合并两个已有段转移T11题意给定一个长度为 $n$ 的整数序列 $S$求有多少个长度为 $n$ 的正整数序列 $T$使得将 $S$ 和 $T$ 排序后， $S$ 的每一位都不小于 $T$ 的每一位$n\leqslant1000$题解对 $S$ 和 $T$ 排序设 $f_i$ 表示有多少个 $T$ 的前 $i$ 位满足条件枚举第一个不满足条件的位置，用总方案减去不满足的转移]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.3模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-3%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.2网络流]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-2%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！[bzoj1280] $\text{Emmy}$卖猪pigs题面题目链接$\text{Emmy}$ 在一个养猪场工作。这个养猪场有 $m$ 个锁着的猪圈，但 $\text{Emmy}$ 并没有钥匙。有 $n$ 个顾客会到养猪场来买猪，一个接着一个。每一位顾客都会有一些猪圈的钥匙，他们会将这些猪圈打开并买走固定数目的猪。所有顾客有的钥匙和他们需要买猪的数量在事先都告诉了 $\text{Emmy}$，于是 $\text{Emmy}$ 要订一个计划，使得卖出去的猪最多。买卖的过程是这样的：一个顾客前来，并打开所有他可以打开的猪圈。然后 $\text{Emmy}$ 从这些猪圈里牵出固定数目的猪卖给顾客（最多只能和顾客需要数相等），并可以重新安排这些开着的猪圈中的猪。每个猪圈可以存放任意数目的猪。写一个程序，使得 $\text{Emmy}$ 能够卖出去尽可能多的猪。$n\leqslant100$ , $m\leqslant1000$题解暂咕[bzoj2406] 矩阵题面题目链接给定一个整数矩阵 $A[n\times m]$ ，求一个矩阵 $B[n\times m]$ 满足 $\forall1\leqslant i\leqslant n,1\leqslant j\leqslant m,B_{ij}\in[L,R]$ ，且使下式值最小：\large max= \begin{cases} \mathop{max}\limits_{1\leqslant j\leqslant m} \{|\sum_{i=1}^{n}{(A_{ij}-B_{ij})}|\}\\ \mathop{max}\limits_{1\leqslant i\leqslant n} \{|\sum_{j=1}^{m}{(A_{ij}-B_{ij})}|\} \end{cases}$n,m\leqslant 200$题解暂咕[TJOI2015] 组合数学题面题目链接为了提高智商， $\text{ZJY}$ 开始学习组合数学。某一天她解决了这样一个问题：给一个 $n\times m$ 的网格图，其中某些格子有财宝。每次从左上角出发，只能往右或下走。问至少要走几次才可能把财宝全捡完。但是她还不知足，想到了这个问题的一个变形：假设每个格子中有好多块财宝，而每一次经过一个格子至多只能捡走一块财宝，其它条件不变，至少要走几次才可能把财宝全捡完？这次她不会做了，你能帮帮她吗？$n,m\leqslant1000$题解最长链等于最少反链覆盖每个点向不能到达它的点连边，跑最长路[bzoj1189] 紧急疏散evacuate题面题目链接发生了火警，所有人员需要紧急疏散！假设每个房间是一个 $n\times m$ 的矩形区域。每个格子可以是空地、墙或者门，人们可以从门撤出房间。已知门一定在房间的边界上，并且边界上不会有空地。最初，每块空地上都有一个人，在疏散的时候，每一秒钟每个人都可以向上下左右四个方向移动一格，当然他也可以站着不动。疏散开始后，每块空地上就没有人数限制了（也就是说每块空地可以同时站无数个人）。但是，由于门很窄，每一秒钟只能有一个人移动到门的位置，一旦移动到门的位置，就表示他已经安全撤离了。现在的问题是：如果希望所有的人安全撤离，最短需要多少时间？或者告知根本不可能。$3\leqslant n,m\leqslant20$题解对时间建分层图[POI2010] Bridges题面题目链接$\text{YYD}$ 为了减肥，他来到了瘦海，这是一个巨大的海，海中有 $n$ 个小岛，小岛之间有 $m$ 座桥连接，两个小岛之间不会有两座桥，并且从一个小岛可以到另外任意一个小岛。现在 $\text{YYD}$ 想骑单车从小岛 $1$ 出发，骑过每一座桥，到达每一个小岛，然后回到小岛 $1$ 。霸中同学为了让 $\text{YYD}$ 减肥成功，召唤了大风，由于是海上，风变得十分大，经过每一座桥都有不可避免的风阻碍 $\text{YYD}$ ， $\text{YYD}$ 十分 $ddt$ ，于是用泡芙贿赂了你，希望你能帮他找出一条承受的最大风力最小的路线。$2\leqslant n\leqslant1000$ , $1\leqslant m\leqslant2000$题解二分答案，网络流检验先随机定向，检查每个点的度数对于一个点入度减出度为正的，源点向其连边，否则该点向汇点连边边权为度数差的绝对值[bzoj4213] 贪吃蛇题面题目链接最近 $\text{lwher}$ 迷上了贪吃蛇游戏，在玩了几天却从未占满全地图的情况下，他不得不承认自己是一个弱菜，只能改去开发一款更弱的贪吃蛇游戏。在开发的过程中， $\text{lwher}$ 脑洞大开，搞了一个多条蛇的模式。但由于这种模式太难操作，于是他只好改变游戏的玩法，稍微变化一下游戏目标。新的游戏是这样的：一些蛇覆盖了一个网格。每个格子要么是一个障碍物，要么是蛇的一部分。每条蛇占据了一条折线（拐角处只能水平和竖直连接），且至少占据两个格子。蛇与蛇之间不能重叠，蛇也不会与自己重叠。每条蛇还必须满足以下两个条件中的一个：两个端点所在的格子在网格的边界。蛇构成一个环，即两个端点相邻（垂直或水平，不能斜着），至少要占据 $4$ 个格子（否则没法形成环）。给定一个网格，在满足前面所述的条件下覆盖所有空地，并使得端点在网格边界（即不构成环）的蛇尽量少。（如果一条蛇既构成环，又是端点在边界，那么不计入答案）例如，以下网格：可以由下面三种方案覆盖。还有其它的方案，但是没法仅用一条不构成环的蛇就覆盖整个网格。$n,m\leqslant12$题解黑白染色，边界的点下界为 $1$ ，上界为 $2$内部的点上下界皆为 $2$ ，障碍不连边[CEOI2008] order题面题目链接有 $n$ 个工作， $m$ 种机器，每种机器你可以租或者买过来。每个工作包括若干道工序，每道工序需要某种机器来完成，你可以通过购买或租用机器来完成。现在给出这些参数，求最大利润。$1\leqslant n,m\leqslant1200$题解源点向工作连收益工作向机器连租的价格机器向汇点连买的价格用总收益减去最小割[bzoj3774] 最优选择题面题目链接小 $\text{N}$ 手上有一个 $n\times m$ 的方格图，控制某一个点要付出 $A_{ij}$ 的代价，然后某个点如果被控制了，或者它周围的所有点（上下左右）都被控制了，那么它就算是被选择了的。一个点如果被选择了，那么可以得到 $B_{ij}$ 的回报。现在请你帮小 $\text{N}$ 选一个最优的方案，使得回报减代价尽可能大。$n,m\leqslant 50$题解暂咕T9题意$p\times q$ 的网格，每个位置有 $r$ 种选择，编号为 $1\sim r$ ，每种选择都有对应收益（可能为负）限制每个点分别和它上下左右相邻的 $4$ 个点的选择编号之和不能超过 $d$最大化总收益$p,q,r\leqslant40$题解暂咕]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3383]线性筛素数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3383-%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言首先说一下，这个科技是我在 $\text{Min_25}$ 的博客里看见的，那篇博客是 $2017$ 年的了，去翻了下提交记录发现论文哥也用了这个科技，所以也并不是什么新东西。有兴趣的也可以去阅读一下那篇博客。然后，虽然这个题是线性筛素数，但是这篇题解并不是讲筛法的，而是一些奇技淫巧。若是想学习素数筛法的可以跳过这篇题解了。正文相信各位都知道一个 $O(\sqrt n)$ 判断素数的方法，也就是枚举 $2\sim\lfloor\sqrt n\rfloor$ 检查每个数是否是 $n$ 的约数。具体代码如下：123456bool check(int x) &#123; if(x==0||x==1) return false; for(int i=2;i*i&lt;=x;++i) if(x%i==0) return false; return true;&#125;这个题我们只要对于每个询问都这样判断一次即可，复杂度上界 $O(M\sqrt N)$ 。如果我的数据是 $10^6$ 个 $9840769$ ，并且你的程序没有记忆化，这个程序需要 $\text{7.7s}$ 左右的时间才能出解。我们考虑怎样优化。我们判断约数的时候需要取模，而众所周知 $\text{C++}$ 的取模是很慢的，如果能加快取模的效率，就能对运行速度有很大优化。$\text{Min_25}$ 在他的博客里讲到了这样一种优化方法：考虑到判断约数时我们只需要得知取模结果是否为 $0$ ，并不需要知道实际结果。若 $m$ 为奇数， $m’$ 为 $m$ 模 $2^{64}$ 下的逆元，且有 $n\in\left[0,2^{64}\right)$ ，则：n\equiv0\pmod{m}\ \Leftrightarrow\ (n\cdot m')\%2^{64}\leqslant\lfloor\frac{2^{64}}{m}\rfloor对于一个模数 $m$ 我们预处理出 $m’$ 和 $\lfloor\frac{2^{64}}{m}\rfloor$ ，然后我们就可以把判断 $n\%m$ 是否为 $0$ 转化为一次乘法和一次比较大小。使用这个方法，刚刚跑 $\text{7.7s}$ 的程序只需要 $\text{1.9s}$ 即可出解， $4$ 倍的效率优化！最后这个技巧不仅可以用于判断素数，也可以用于质因数分解，杜教筛、洲阁筛、 $\text{Min_25}$ 筛的预处理。但使用场合还是较少，不过效率优化还是十分明显的！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【更新中】浅谈模意义下形式幂级数的几种操作]]></title>
    <url>%2F%E3%80%90%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%91%E6%B5%85%E8%B0%88%E6%A8%A1%E6%84%8F%E4%B9%89%E4%B8%8B%E5%BD%A2%E5%BC%8F%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言近几年信息学竞赛中出现了一类利用 生成函数 进行计数的题目，这类题目往往需要一顿推导之后得出一个或几个容易计算的生成函数与代表答案的生成函数间的关系。由于这类题目往往需要将结果对一个大质数取模，因此我们可以用模意义下形式幂级数的一些操作来进行这些生成函数之间的运算。本文将从简单的离散傅里叶变换开始，逐步带你了解这一类基于离散卷积的形式幂级数操作。你需要知道的几点多项式由数或字母或两者的乘积组成的代数式叫单项式（单个数或字母也为单项式）单项式中的常数因子为单项式的系数单项式中所有字母的指数之和为单项式的次数由若干个单项式相加组成的代数式叫多项式多项式各项中次数最大的单项式的次数为多项式的次数形式幂级数定义域为 $\mathbb Z^+$ 或其有限子集的函数叫数列（也就是一些有序的数）将数列的每一项求和得到的函数叫级数，一般所讲的级数大多指无穷级数，即数列有无穷项形如 $\sum_{i=0}^{\infty}{a_i(x-x_0)^i}$ 的级数叫幂级数（ $x_0$ 为常数）其中 $a_i$ 为幂级数的系数（可以类比多项式的各项系数）若存在一个非负实数 $r$ 使得幂级数在 $ | x - x_0 | &lt; r $ 时趋近于一个确定的值（收敛），在 $ | x - x_0 | &gt; r $ 时不趋于任何值（发散），则称 $ r $ 为幂级数的收敛半径，否则称该幂级数的收敛半径为 $ +\infty $将一个数列的各项作为幂级数的系数，所得到的幂级数不一定是收敛的（收敛半径可能为 $0$ ）。但我们淡化其收敛与发散的性质，认为它是收敛的，则可以得到一个形式上类似幂级数的东西（也就是长得像幂级数），我们将其称为形式幂级数若一个形式幂级数从某一项开始，后面项的系数全部为 $0$ ，则我们称其为形式多项式离散卷积令 $f(x)$ 和 $g(x)$ 为定义在 $\mathbb R$ 上的两个可积函数，则称 $\int_{-\infty}^{\infty}{f(\tau)g(x-\tau)d\tau}$ 关于 $x$ 的函数为 $f(x)$ 与 $g(x)$ 的卷积与卷积类似，我们称数列 $c_n=\sum_{i=-\infty}^{\infty}{a_ib_{n-i}}$ 为数列 $a_n$ 与数列 $b_n$ 的离散卷积形式幂级数与幂级数一样可以进行运算，其加减运算即是将对应位的系数相加减，而其乘法运算结果定义为两个形式幂级数系数的离散卷积构成的形式幂级数形式幂级数存在乘法逆元当且仅当 $a_0\ne0$ ，且若存在，则逆元唯一后面的形式幂级数运算若无特殊说明，全部在 $\pmod{x^{n+1}}$ 意义下进行，也即为形式多项式记号与约定我们记以数列 $\{f_n\}$ 为系数的形式幂级数为 $F(x)$ 。我们记 $[x^n]F(x)$ 为 $F(x)$ 的 $n$ 次项系数。我们记 $f_ig_i$ 为 $f_i\times g_i$ ，而 $F(x)G(x)$ 为 $F(x)$ 与 $G(x)$ 的离散卷积。多项式乘法快速傅里叶变换我们知道，两个形式幂级数做乘法即为它们系数的离散卷积。假设我们已知 $F(x)$ 和 $G(x)$ 的系数，我们要求得 $H(x)=F(x)G(x)$根据定义：h_n=\sum_{i=0}^{n}{f_ig_{n-i}}\Rightarrow H(x)=\sum_{i=0}^{\infty}{\sum_{j=0}^{i}{f_jg_{i-j}x^i}}很显然，我们求出 $H(x)$ 一项的时间复杂度是 $\Theta(n)$ 的，求出 $n$ 项的时间复杂度是 $\Theta(n^2)$ 的，这肯定是不能接受的。我们来考虑怎样更快速地求得 $H(x)$ 。上面的运算是基于用系数来表示多项式的，事实上，由于 $n+1$ 个点可以唯一确定一个 $n$ 次多项式，我们可以改用 $n+1$ 个点来描述我们的多项式。并且由于我们并不关心形式幂级数的 $x$ 的取值，我们可以任意选取实数甚至虚数作为 $x$ 的值。这样做的好处是什么呢？我们发现，两个点值表达式相乘只需要将对应点的值相乘即可，也就是说，两个点值表达式做乘法运算是 $\Theta(n)$ 的！如果我们可以快速地将系数表达式转化成点值表达式，并快速地将点值表达式转化回来，就可以快速地完成多项式乘法。那么具体如何来做呢？我们先介绍一类神奇的数——单位根 $\omega$ 。单位根$n$ 次单位根是 $n$ 次幂为 $1$ 的复数。也即， $n$ 次单位根 $\omega_n$ 满足 $\omega_n^n=1$ 。由欧拉公式有 $\omega_n^k=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})$ 。在后文中，我们假设 $n$ 为 $2$ 的正整数次幂：于是单位根有这几个性质$\omega_n^{k+\frac n2}=-\omega_n^k$$\omega_{2n}^{2k}=\omega_n^k$$\omega_n^0=\omega_n^n=1$我们来简单证明一下这几个性质：$\omega_n^{k+\frac n2}=-\omega_n^k$\begin{align*} \omega_n^{k+\frac n2}&=\cos((k+\frac n2)\frac{2\pi}{n})+i\sin((k+\frac n2)\frac{2\pi}{n}) \\ &=\cos(k\times\frac{2\pi}{n}+\pi)+i\sin(k\times\frac{2\pi}{n}+\pi) \\ &=-(\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})) \\ &=-\omega_n^k \end{align*}$\omega_{2n}^{2k}=\omega_n^k$\begin{align*} \omega_{2n}^{2k}&=\cos(2k\times\frac{2\pi}{2n})+i\sin(2k\times\frac{2\pi}{2n}) \\ &=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n}) \\ &=\omega_n^k \end{align*}有了这两个性质，我们就能使用膜法了！快速傅里叶变换我们考虑将 $\omega_n$ 的 $0\sim n-1$ 次幂作为 $x$ 代入多项式 $F(x)$ 并求出点值。也即求出原多项式的离散傅里叶变换（DFT）我们先将 $F(x)$ 的各项按次数奇偶性分类：\begin{align*} F(x)&=\sum_{i=0}^{n-1}{f_ix^i} \\ &=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}+\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}} \\ \end{align*}令 $F_1(x)=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}$ ， $F_2(x)=\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}}$ ，则有 $F(x)=F_1(x^2)+xF_2(x^2)$ 。将 $\omega_n^k$ 代入 $x$ ：F(\omega_n^k)=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})再将 $\omega_n^{k+\frac n2}$ 代入 $x$ ：\begin{align*} F(\omega_n^{k+\frac n2})&=F_1(\omega_n^{2k+n})+\omega_n^{k+\frac n2}F_2(\omega_n^{2k+n}) \\ &=F_1(\omega_n^{2k}\times\omega_n^n)+(\omega_n^k\times\omega_{2n}^n)F_2(\omega_n^{2k}\times\omega_n^n) \\ &=F_1(\omega_n^{2k})-\omega_n^kF_2(\omega_n^{2k}) \end{align*}发现了吗？这是膜法！这两个式子间只有第二部分的符号有区别，也就是说，我们计算第一个式子的同时可以直接得到第二个式子的值！将这种奇偶分类求一半的操作递归下去，我们就得到了一个可以在 $\Theta(n\log n)$ 的时间复杂度内将多项式从系数表达式转化为以单位根各次幂为自变量的点值表达式的算法。快速傅里叶逆变换接下来我们再来考虑将这样的点值表达式转化回系数表达式的方法。也即离散傅里叶逆变换（IDFT）我们令 $\{y_0,y_1,y_2,\cdots,y_{n-1}\}$ 为 $\{f_0,f_1,f_2,\cdots,f_{n-1}\}$ 的离散傅里叶变换假设存在 $\{c_0,c_1,c_1,\cdots,c_{n-1}\}$ 满足 $c_k=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i}$也即 $Y(x)$ 在 $\omega_n^{-k}$ 处的点值，则有：\begin{align*} c_k&=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{(\sum_{j=0}^{n-1}{f_j(\omega_n^i)^j})(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_n^j)^i}(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_{n}^{j-k})^i}} \\ &=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}} \end{align*}令 $S(x)=\sum_{i=0}^{n-1}{x^i}$ ，将 $\omega_n^k(k\ne0)$ 代入：\because \begin{cases}\begin{align*} S(\omega_n^k)&=\sum_{i=0}^{n-1}{(\omega_n^k)^i} \\ \omega_n^kS(\omega_n^k)&=\sum_{i=1}^{n}{(\omega_n^k)^i} \\ \end{align*}\end{cases} \Rightarrow\omega_n^kS(\omega_n^k)-S(\omega_n^k)=(\omega_n^k)^n-1 \\ \therefore S(\omega_n^k)=\frac{(\omega_n^k)^n-1}{\omega_n^k-1}=0而当 $k=0$ 时显然 $S(\omega_n^0)=n$ 。接着来看之前的式子：c_k=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}}式子里面的 $\Sigma$ 当 $j\ne k$ 时值为 $0$ ，而 $j=k$ 时值为 $n$ 。因此有 $c_k=nf_k\Rightarrow f_k=\frac{c_k}{n}$于是只要对原多项式的离散傅里叶变换，以 $\omega_n^{-k}$ 为单位根做一次快速傅里叶变换，再将结果除以 $n$ 即可转化回原多项式。代码实现根据上面的理论可以很容易地写出快速傅里叶变换（FFT）的递归实现，但是一般使用时由于递归实现的常数过大，我们一般使用的是迭代实现的快速傅里叶变换。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N],b[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;b[i].re); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*b[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].re+0.1); return 0;&#125;优化三次变两次用刚刚所讲的内容做多项式乘法，需要使用三次 $\text{FFT}$ ：两次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。事实上有一个优化可以优化到只做一次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。我们把 $G(x)$ 的系数放到 $F(x)$ 的虚部里，然后对 $F(x)$ 进行 $\text{DFT}$ ，将 $F(x)$ 平方后进行 $\text{IDFT}$ ，将虚部的系数除以 $2$ 即是答案。考虑为什么这样是对的：对于 $a$ 和 $b$ ，有 $(a+bi)^2=a^2-b^2+(2abi)$ ，因此虚部系数即为答案两倍。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;a[i].im); getRev(n+m+2); DFT(a); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*a[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].im/2+0.1); return 0;&#125;MTT暂咕快速数论变换如果是在模意义下做运算，我们还有一种算法可以胜任，那就是快速数论变换（NTT）考虑到做快速傅里叶变换时我们将单位根代入求出点值，如果模意义下有与单位根性质类似的数，是否可以代替单位根完成一样的工作呢？答案是肯定的，这一类数是——原根 $g$ 。原根我们先给出阶的定义：若 $a\perp p$ 且 $p&gt;1$ ， $a$ 模 $p$ 的阶为满足 $a^n\equiv1\pmod{p}$ 的最小的 $n$ ，记为 $\delta_p(a)$ 。若 $p$ 为正整数， $a$ 是整数，且 $\delta_p(a)=\varphi(p)$ ，则 $a$ 为模 $p$ 的一个原根。（ $\varphi(n)$ 为小于等于 $n$ 的数中与 $n$ 互质的数的个数）原根有一些很有意思的性质：若模 $p$ 存在原根，则其一定有 $\varphi(\varphi(p))$ 个原根。若 $p$ 为质数， $g$ 为 $p$ 的一个原根，则 $g^i\pmod{p}$ 对于不同的 $i\in[1,p)$ 值都不同同时原根在模意义下与单位根有相同的性质，因此我们可以使用原根代替单位根在模意义下做快速数论变换。代码实现类似快速傅里叶变换，只把里面的单位根相应地换成原根，并注意取模即可。【例题】[Luogu3803] 多项式乘法 评测记录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#define MOD 998244353#define N 2100010typedef long long i64;inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(3,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125;&#125;inline void IDFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(332748118,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125; int bk(pow(lmt,MOD-2)); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N];int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;预处理原根我们来考虑一个优化：在 $\text{NTT}$ 的过程中我们多次使用了原根的各次幂，如果我们能将原根的各次幂预处理出来，而不是每次使用都计算一遍，就能有很大的常数优化！在多项式乘法中我们只做了 $3$ 次 $\text{NTT}$ ，所以看上去常数优化并不明显。但是在后面的内容中，随着 $\text{NTT}$ 次数的增多，预处理原根的优化效果将愈发明显。【例题】[Luogu3803] 多项式乘法 评测记录：$1.83s\rightarrow1.3s$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 2100010typedef long long i64;typedef unsigned long long u64;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt(1),r[N],w[N];inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N],l;int main() &#123; scanf("%d%d",&amp;n,&amp;m); init(n+m+2); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); l=getLen(n+m+2); DFT(a,l); DFT(b,l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a,l); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;多项式求逆我们已经知道，当 $f_0\ne0$ 时 $F(x)$ 存在唯一乘法逆元。接下来我们就探讨一下如何求得一个多项式的乘法逆元。考虑已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $F(x)G(x)\equiv1\pmod{x^{n+1}}$如果 $F(x)$ 只有常数项，答案显然是常数项的乘法逆元，我们考虑]]></content>
      <tags>
        <tag>资料</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5373]多项式复合函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5373-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这是这道题复杂度比较正确的一个常数奇大无比的算法，源自 $\text{R.P.BRENT}$ 和 $\text{H.T.KUNG}$ 在 $1978$ 年发表的论文（也就是题面里说的那个全嘤文pdf），我在 $\text{5月15日}$ 蒯到手之后肝了一个晚上，在神犇 rqy 的帮助下成功地写出了66分点名被卡做法awsl，后来研究别人代码的时候发现了 预处理原根 这种神奇操作，于是总算成功AC。正文这种做法基于对外层函数的泰勒展开，我们把内层函数 $G$ 的前 $m$ 项拆出来，记作 $G_m$ ，把剩下的记作 $G_r$ 。(这个 $m$ 到底取多少我们分析复杂度的时候再确定)然后进行泰勒展开：F(G)=F(G_m+G_r)=F(G_m)+F'(G_m)G_r+\frac12F''(G_m)G_r^2+\cdots由于我们只需要求 $F(G)$ 前 $n+1$ 项的值，所以我们只需要知道这个展开式前 $\lceil\frac nm\rceil$ 项的值即可，即：令 $l=\lceil\frac nm\rceil$ ，有F(G(x))\equiv F(G_m(x))+F'(G_m(x))G_r(x)+\cdots+\frac1{l!}F^{(l)}(G_m(x))G_r^l(x)\pmod{x^{n+1}}因此我们只要计算出 $F(G_m(x))$ 的各阶导和 $G_r(x)$ 的各次幂，就可以累加得到 $F(G(x))$ 了。$G_r(x)$ 只需要从 $G(x)$ 中截出来即可，那么如何计算 $F(G_m(x))$ 呢？考虑外层函数最高次项次数为 $2$ 的幂的情况，即：令 $F(x)=f_0+\cdots+f_jx^j$ 且 $j$ 为 $2$ 的正整数次幂，有F(G)=F_1(G)+G^{\frac j2}\cdot F_2(G)这里 $F_1$ 和 $F_2$ 都是最高次项次数为 $\frac j2$ 的多项式，这样一来我们就能递归地计算 $F(G_m(x))$ 了。考虑这一步的时间复杂度：我们令 $M(n)$ 为完成两个 $n$ 次多项式的乘法的时间，即： $M(n)=O(n\log n)$我们设 $T(j)$ 为计算 $G^{\frac j2}$ 和 $F(G)$ 的时间，则有T(j)\leqslant2T(\frac j2)+O(M(\min(jm,n)))我们令 $r$ 为满足 $n\cdot2^k\leqslant jm$ 的最大的 $k$ ，则有T(j)=O(M(n)+2M(n)+\cdots+2^rM(n))+2^{r+1}T(\frac{j}{2^{r+1}})T(j)\leqslant O(\frac{jmM(n)}{n})+(\frac{2jm}{n})T(\frac{j}{2^{r+1}})又因为 $n\cdot2^{r+1}&gt;jm$ ，有T(\frac{j}{2^{r+1}})=O(M(\frac{jm}{2^{r+1}})+2M(\frac{jm}{2^{r+2}})+\cdots)=O(M(n)+2M(\lceil\frac n2\rceil)+4M(\lceil\frac n4\rceil)+\cdots)=O(\log nM(n))因此，我们有 $T(j)=O(\frac{jm\log n}{n}M(n))$ ，所以求解 $F(G_m(x))$ 的时间复杂度为 $O(mn\log^2n)$ 。我们再来考虑对 $F(G_m(x))$ 求导：令 $H(x)=F(G(x))$根据复合函数求导法则，我们有 $H’(x)=F’(G(x))\cdot G’(x)$ ，因此 $F’(G_m(x))=H’(x)\cdot(G_m’(x))^{-1}$ ，由此我们可以计算出泰勒展开式中某一项之后与之前的结果累加得到 $H(x)$ ，同时计算出下一项中 $F(G_m(x))$ 的对应阶导。每计算一次导数的时间复杂度是 $O(n\log n)$ 的，因此计算出所有项的时间复杂度是 $O(l\cdot n\log n)=O(\frac{n^2\log n}{m})$ 。我们已经得到了 $F(G_m(x))$ 的各阶导，而 $G_r(x)$ 的各次幂只需要挨个乘起来即可，时间复杂度也是 $O(\frac{n^2\log n}{m})$ 的。之后各项的计算和累加同样是 $O(\frac{n^2\log n}{m})$ 的，因此这个算法的总复杂度为 $O(mn\log^2n+\frac{n^2\log n}{m})$ 。我们考虑 $m$ 的取值：根据均值不等式，当 $mn\log^2n\sim\frac{n^2\log n}{m}$ 时时间复杂度最优，因此解得当 $m\sim\sqrt{\frac{n}{\log n}}$ 时有最优时间复杂度 $O((n\log n)^{1.5})$ 。最后还是附上参考代码比较好，这个东西由于常数原因必须 预处理原根 才能卡过去，而且好像也没有什么实际用处。。就当是练习码力了 2333123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206#pragma GCC optimize("Ofast,inline")#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native")#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define MOD 998244353#define G 332748118#define N 262210#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(v==0) *pp++=48; else &#123; re int tp(0); while(v) st[++tp]=v%10+48,v/=10; while(tp) *pp++=st[tp--]; &#125; *pp++=32;&#125;inline int pow(re int a,re int b) &#123; re int ans(1); while(b) ans=b&amp;1?(ll)ans*a%MOD:ans,a=(ll)a*a%MOD,b&gt;&gt;=1; return ans;&#125;int inv[N],ifac[N];inline void pre(re int n) &#123; inv[1]=ifac[0]=1; for(re int i(2);i&lt;=n;++i) inv[i]=(ll)(MOD-MOD/i)*inv[MOD%i]%MOD; for(re int i(1);i&lt;=n;++i) ifac[i]=(ll)ifac[i-1]*inv[i]%MOD;&#125;inline int getLen(re int t) &#123; return 1&lt;&lt;(32-__builtin_clz(t));&#125;int lmt(1),r[N],w[N];inline void init(re int n) &#123; re int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(re int i(1);i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); re int wn(pow(3,(MOD-1)/lmt)); w[lmt&gt;&gt;1]=1; for(re int i((lmt&gt;&gt;1)+1);i&lt;lmt;++i) w[i]=(ll)w[i-1]*wn%MOD; for(re int i((lmt&gt;&gt;1)-1);i;--i) w[i]=w[i&lt;&lt;1];&#125;inline void DFT(int*a,re int l) &#123; static unsigned long long tmp[N]; re int u(__builtin_ctz(lmt)-__builtin_ctz(l)),t; for(re int i(0);i&lt;l;++i) tmp[i]=(a[r[i]&gt;&gt;u])%MOD; for(re int i(1);i&lt;l;i&lt;&lt;=1) for(re int j(0),step(i&lt;&lt;1);j&lt;l;j+=step) for(re int k(0);k&lt;i;++k) t=(ll)w[i+k]*tmp[i+j+k]%MOD, tmp[i+j+k]=tmp[j+k]+MOD-t, tmp[j+k]+=t; for(re int i(0);i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,re int l) &#123; std::reverse(a+1,a+l);DFT(a,l); re int bk(MOD-(MOD-1)/l); for(re int i(0);i&lt;l;++i) a[i]=(ll)a[i]*bk%MOD;&#125;int n,m;int a[N],b[N],c[N];void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); re int l(getLen(deg&lt;&lt;1)); for(re int i(0);i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l),DFT(b,l); for(re int i(0);i&lt;l;++i) b[i]=(2ll-(ll)tmp[i]*b[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,l); for(re int i(deg);i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(re int i(0);i+1&lt;deg;++i) b[i]=(ll)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;void getComp(int*a,int*b,int k,int m,int&amp;n,int*c,int*d) &#123; if(k==1) &#123; for(re int i(0);i&lt;m;++i) c[i]=0,d[i]=b[i]; n=m,c[0]=a[0]; &#125; else &#123; static int t1[N],t2[N]; int nl(n),nr(n),*cl,*cr,*dl,*dr; getComp(a,b,k&gt;&gt;1,m,nl,cl=c,dl=d); getComp(a+(k&gt;&gt;1),b,(k+1)&gt;&gt;1,m,nr,cr=c+nl,dr=d+nl); n=std::min(n,nl+nr-1); re int _l(getLen(nl+nr)); for(re int i(0);i&lt;_l;++i) t1[i]=i&lt;nl?dl[i]:0; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?cr[i]:0; DFT(t1,_l),DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) c[i]=((i&lt;nl?cl[i]:0)+t2[i])%MOD; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?dr[i]:0; DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) d[i]=t2[i]; &#125;&#125;inline void getComp(int*a,int*b,int*c,int deg) &#123; static int ts[N],ps[N],c0[N],_t1[N],idM[N]; int M(std::max((int)ceil(sqrt(deg/log2(deg))*2.5),2)),_n(deg+deg/M); getComp(a,b,deg,M,_n,c0,_t1); re int _l(getLen(_n+deg)); for(re int i(_n);i&lt;_l;++i) c0[i]=0; for(re int i(0);i&lt;_l;++i) ps[i]=i==0; for(re int i(0);i&lt;_l;++i) ts[i]=M&lt;=i&amp;&amp;i&lt;deg?b[i]:0; getDer(b,_t1,M); for(re int i(M-1);i&lt;deg;++i) _t1[i]=0; /// Important!!! getInv(_t1,idM,deg); for(int i=deg;i&lt;_l;++i) idM[i]=0; DFT(ts,_l),DFT(idM,_l); for(re int t(0);t*M&lt;deg;++t) &#123; for(re int i(0);i&lt;_l;++i) _t1[i]=i&lt;deg?c0[i]:0; DFT(ps,_l),DFT(_t1,_l); for(re int i(0);i&lt;_l;++i) _t1[i]=(ll)_t1[i]*ps[i]%MOD, ps[i]=(ll)ps[i]*ts[i]%MOD; IDFT(ps,_l),IDFT(_t1,_l); for(re int i(deg);i&lt;_l;++i) ps[i]=0; for(re int i(0);i&lt;deg;++i) c[i]=((ll)_t1[i]*ifac[t]+c[i])%MOD; getDer(c0,c0,_n); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; DFT(c0,_l); for(re int i(0);i&lt;_l;++i) c0[i]=(ll)c0[i]*idM[i]%MOD; IDFT(c0,_l); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; &#125;&#125;int main() &#123; n=read(),m=read(); for(re int i(0);i&lt;=n;++i) a[i]=read(); for(re int i(0);i&lt;=m;++i) b[i]=read(); m=(n&gt;m?n:m)+1; pre(m);init(m*5); getComp(a,b,c,m); for(re int i(0);i&lt;=n;++i) write(c[i]); fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5431]乘法逆元2]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5431-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832%2F</url>
    <content type="text"><![CDATA[此处题面题外话其实我觉得这道题的考点是快读.jpg没有快读的后果正文\large\text{以下运算均在模 }p\text{ 意义下进行}\large\sum_{i=1}^{n}{\frac{k^i}{a_i}}=\sum_{i=1}^{n}{k^i\cdot a_i^{-1}}我们考虑先求出 $a$ 序列的前缀积，记为 $s$ ：\large s_i=\prod_{j=1}^{i}{a_j}记 $a$ 序列前缀积的逆元为 $t$ ，此时如果我们知道这个序列，我们就可以知道 $a$ 中任意一个数的逆元：\large a_i^{-1}=s_{i-1}\cdot t_i而 前缀积的逆元 就等于 逆元的前缀积 ，所以我们只要求出 $t_n$ 就可以线性递推出整个 $t$ 序列了：\large t_n=s_n^{p-2}\large t_i=a_{i+1}\cdot t_{i+1}这样我们就求得了 $a$ 序列的逆元，再用秦九韶算法就能在线性时间内算出题目的式子了。参考代码前方极差码风警告！123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#define N 5000010#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline int pow(int a,int b,int p) &#123; int ans(1); while(b) ans=b&amp;1?(ll)ans*a%p:ans,a=(ll)a*a%p,b&gt;&gt;=1; return ans;&#125;int n,p,k,a[N],s[N]=&#123;1&#125;,inv_s[N],ans;int main() &#123; n=read(),p=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(),s[i]=(ll)s[i-1]*a[i]%p; inv_s[n]=pow(s[n],p-2,p); for(int i=n-1;i;--i) inv_s[i]=(ll)inv_s[i+1]*a[i+1]%p; for(int i=n;i;--i) ans=((ll)inv_s[i]*s[i-1]%p+ans)*k%p; printf("%d",ans); return 0;&#125;5e6 的输入，千万记得快读！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu4315]月下“毛景树”]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu4315-%E6%9C%88%E4%B8%8B%E2%80%9C%E6%AF%9B%E6%99%AF%E6%A0%91%E2%80%9D%2F</url>
    <content type="text"><![CDATA[此处题面前言这道题其实就是把 单点修改 、 区间染色 、 区间加 以及 区间最大值 这四种基本的序列操作出到了树上，很明显是用 树链剖分 + 线段树 解决，但是因为我太蒻了，树剖码到一半码不下去了，所以就全删了改码了个 Link/Cut Tree ，顺便 拿了这个题的RANK1 。边转点树剖的边转点大家都知道是把每条边的权值给深度较深的那个点，但是我们不能在 LCT 上也这么做，因为有 makeroot 操作的存在， LCT 上结点的父子关系不是确定的，所以我们采取建立 虚拟结点 的方式：1234// 第 i 条边连接 u 和 v 这两个点，权值为 wval[n+i]=maxv[n+i]=w;link(u,n+i);link(n+i,v);用 $n$ + $i$ 号结点表示第 $i$ 条边，再用它去分别连接原先的边连接的结点。需要注意的地方这种写法会产生 $2n$ 个结点， 空间千万要开够！标记上传下传的时候要分 原结点 和 虚拟结点 两种情况讨论！标记这道题我们只需要维护一个 区间染色 的标记和一个 区间加 的标记就行，我多维护了一个 siz 数组储存子树内 虚拟结点 的数量，上传时判断当前结点是不是 虚拟结点 就行。标记下传的时候要 先下传区间染色，再下传区间加 ，若是先下传了 区间加 ，后面 区间染色 的时候就会 覆盖掉最后附上此题 $AC$ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++inline int max(int a,int b)&#123;return b&lt;a?a:b;&#125;inline void swap(int&amp;a,int&amp;b)&#123;int tmp(a);a=b,b=tmp;&#125;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline char gtc() &#123; re char c(gc); while(c!='S'&amp;&amp;c!='h'&amp;&amp;c!='o'&amp;&amp;c!='d'&amp;&amp;c!='a') c=gc; return c;&#125;inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(!v) *pp++=48; else &#123; re char*tp(st); while(v) *++tp=v%10+48,v/=10; while(tp!=st) *pp++=*tp--; &#125; *pp++='\n';&#125;int n,u,v,w;char opt;int ch[N][2],fa[N],rev[N],val[N],maxv[N],ass[N],addv[N],siz[N];inline void assign(int x,int y)&#123;val[x]=x&gt;n?y:0,maxv[x]=siz[x]&gt;0?y:0,addv[x]=0,ass[x]=y;&#125;inline void add(int x,int y)&#123;val[x]+=x&gt;n?y:0,maxv[x]+=siz[x]&gt;0?y:0,addv[x]+=siz[x]&gt;0?y:0;&#125;inline void up(int x)&#123;siz[x]=siz[lc(x)]+siz[rc(x)]+(x&gt;n),maxv[x]=max(val[x],max(maxv[lc(x)],maxv[rc(x)]));&#125;inline void down(int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,rev[x]=0,swap(lc(x),rc(x)); if(ass[x]) assign(lc(x),ass[x]),assign(rc(x),ass[x]),ass[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z,up(y);&#125;inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;up(x);&#125;inline void access(int x)&#123;for(int y(0);x;x=fa[y=x])splay(x),rc(x)=y,up(x);&#125;inline void mrt(int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void split(int x,int y)&#123;mrt(x),access(y),splay(y);&#125;inline void link(int x,int y)&#123;mrt(x),fa[x]=y;&#125;int main() &#123; n=read(); for(re int i(1);i&lt;n;++i) siz[n+i]=1; for(re int i(1);i&lt;n;++i) u=read(),v=read(),val[n+i]=maxv[n+i]=read(),link(u,n+i),link(n+i,v); opt=gtc(); while(opt!='S') &#123; u=read(),v=read(); switch(opt) &#123; case'h': access(n+u),splay(n+u),val[n+u]=v; break; case'o': split(u,v),assign(v,read()); break; case'd': split(u,v),add(v,read()); break; case'a': split(u,v),write(maxv[v]); &#125; opt=gtc(); &#125; fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【置顶】学习资料]]></title>
    <url>%2F%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[收集的一些资料，留给自己慢慢啃。各路OJ洛谷、bzoj、POJ、UOJ、LibreOJ、51Nod、OIH、评测鸭、hihoCoder、OHO-OJ、Vijos、ZHZXOJ、ZOJ博文索引yzhang、bztMinamoto、自为风月马前卒、JasonZhan、huyufeifei、xehoth、饕餮传奇、Venus、yyb、rqy、Mrsrz、xht37、Victor、fcwww、EI、诗乃、Siyuan、zzq、zkw数据结构猫树、zkw线段树、Leafy Tree、Link-Cut Tree、树套树、后缀数组、回文自动机算法分治、动态dp、生成函数、计算几何其它OI Wiki、算法可视化、SAM可视化、题号查找器、图可视化、OEIS、MaHua在线Markdown编辑器、矩阵乘法、图床搭建、MiNa]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3372]线段树1]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3372-%E7%BA%BF%E6%AE%B5%E6%A0%911%2F</url>
    <content type="text"><![CDATA[此处题面去了 WC2019 的同学应该对 指令集 有些印象，没去的同学 ( 比如我 ) 可能也通过一些途径了解到了这个暴力踩标程的毒瘤 ( 据说现场踩 Ynoi五彩斑斓的世界 ) 。但是由于我太弱，实在过不了那道题 dllxl Orz ，所以我就来拿这道题练手了。一、指令集是什么？其实就是压位，常用的是压256位。也有能压512位的，但大部分情况不支持 ( 硬件 + 软件 ) 。二、它为什么快？就像压位高精会比裸高精快， bitset 比 bool数组 快一样，你把8个32位的 int 压成一个256位的玩意儿，每次操作可以看成是同时对8个 int 进行操作 ( 但其实并不是这样 ) ，所以理论上常数会是原来的 $\frac{1}{8}$ ( 但其实做不到 $\frac{1}{8}$ ) 。三、它要怎么用？请自行摸索首先你需要 immintrin.h 库，里面啥都有然后再在程序前加上 #pragma GCC target(&quot;avx,avx2&quot;) ，这样你就可以把你的 int 啊 long long 啊什么的压成 __m256i ，把 float 压成 __m256 ，还能把 double 压成 __m256d 。什么你问我具体怎么做？我不知道啊.jpg这里是连快读都没用的$O\left(n^2\right)$暴力评测记录。最后附上这道题的程序，想学学指令集的可以看看：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#pragma GCC optimize("Ofast,fast-math")#pragma GCC target("avx,avx2")#include &lt;cstdio&gt;#include &lt;immintrin.h&gt;int n,m,num,x[5],opt,p,q,k;__m256i a[25010];inline void add(int l,int r,int v) &#123; while(((l-1)&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1]+=v,++l; if(l==r+1)return; while((r&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1]+=v,--r; if(l==r+1)return; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(v,v,v,v); while(l&lt;=r)a[l]=_mm256_add_epi64(a[l],s),++l;&#125;inline long long query(int l,int r) &#123; long long ans(0); while(((l-1)&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1],++l; if(l==r+1)return ans; while((r&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1],--r; if(l==r+1)return ans; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(0,0,0,0); while(l&lt;=r)s=_mm256_add_epi64(a[l],s),++l; for(int i=0;i&lt;4;++i) ans+=((long long*)&amp;s)[i]; return ans;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m);num=n&gt;&gt;2; for(int i=1;i&lt;=num;++i) &#123; for(int j=1;j&lt;=4;++j) scanf("%d",x+j); a[i]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); &#125; for(int i=1;i&lt;=(n&amp;3);++i) scanf("%d",x+i); a[++num]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); while(m--) &#123; scanf("%d%d%d",&amp;opt,&amp;p,&amp;q); if(opt==1) scanf("%d",&amp;k),add(p,q,k); else printf("%lld\n",query(p,q)); &#125; return 0;&#125;这道题要开 long long ，如果是 int 的话程序第一句的 Ofast 优化去掉也能过！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[JLOI2014]松鼠的新家]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-JLOI2014-%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[此处题面由于树上两点路径唯一，维尼的路线也是唯一的，因此我们只要 统计维尼经过每个点的次数 即可。而树上路径又跟 LCA 什么的有关，因此这道题的做法就多种多样了。由于只有一次询问，比较容易想到的做法是 树上差分 后求 LCA 轻松搞定。再想深一点你会发现这道题简直就是 树链剖分 的板子，再加上这道题不用维护什么子树信息，所以 树链剖分 能做 Link/Cut Tree 当然也能做！需要注意的几点：这道题 LCT 得卡常，写的时候注意不要太飘；由于两条链相交的点会被重复计算，因此每次加的时候链头链尾要有一个减 1 (我是链尾)；最后一个点是不需要准备糖果的！输出答案的时候记得把标记都下放了 (我是先 makeroot 再输出) 。1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;cstdio&gt;#define N 300010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re registerinline void swap(re int&amp;a,re int&amp;b)&#123;re int tmp(a);a=b,b=tmp;&#125;int ch[N][2],fa[N],rev[N],val[N],addv[N];inline void add(re int x,re int y)&#123;val[x]+=y,addv[x]+=y;&#125;inline void down(re int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(re int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(re int x) &#123; re int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;&#125;inline void splay(re int x) &#123; re int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;&#125;inline void access(re int x)&#123;for(re int y(0);x;x=fa[y=x])splay(x),rc(x)=y;&#125;inline void mrt(re int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void link(re int x,re int y)&#123;mrt(x),fa[x]=y;&#125;int n,a[N],x,y;int main() &#123; scanf("%d",&amp;n); for(re int i(1);i&lt;=n;++i) scanf("%d",a+i); for(re int i(1);i&lt;n;++i) scanf("%d%d",&amp;x,&amp;y),link(x,y); for(re int i(1);i&lt;n;++i) --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1); for(re int i(1);i&lt;=n;++i) mrt(i),printf("%d\n",val[i]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[SDOI2011]染色]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-SDOI2011-%E6%9F%93%E8%89%B2%2F</url>
    <content type="text"><![CDATA[此处题面这道题的做法其实已经很明显了， 树链剖分 + 线段树 ，只是看到区间赋值心血来潮想用 珂朵莉树 水，结果就过了╮(╯▽╰)╭操作 1 就是 区间推平 ( assign ) ，操作 2 可以像找 最近公共祖先 ( LCA ) 一样一边往上方跳一边统计，由于珂朵莉树的结点存储的是一段值相同的连续区间，我们只需要记录上一次访问的结点的值与当前结点的值比较，若不同则更新并计数。值得注意的 $3$ 点：由于我们是统计链上的连续段，所以我们应从深度大的结点往小的枚举。由于我们是从链的两端分别往上跳，所以我们需要分别记录两边上次访问的结点的值。最后处于同一条链上时，需要考虑两端的值相同的情况。最后放上 $AC$ 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include &lt;cstdio&gt;#include &lt;set&gt;using std::set;#define N 100010struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V)&#123;&#125; inline int operator&lt;(const node&amp;x)const&#123;return l&lt;x.l;&#125;&#125;;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;inline IT split(int pos) &#123; IT it(--s.upper_bound(node(pos))); if(it-&gt;l==pos) return it; int L(it-&gt;l),R(it-&gt;r),V(it-&gt;v); s.erase(it),s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;inline void assign(int l,int r,int v) &#123; IT itr(split(r+1)),itl(split(l)); s.erase(itl,itr);s.insert(node(l,r,v));&#125;int n,m,a[N],x,y,z;char opt;int e,bg[N],nx[N&lt;&lt;1],to[N&lt;&lt;1];inline void link(int u,int v)&#123;to[++e]=v,nx[e]=bg[u],bg[u]=e;&#125;int fa[N],dep[N],siz[N],ws[N];void dfs1(int now,int f) &#123; fa[now]=f,dep[now]=dep[f]+1,siz[now]=1; int mx(-1); for(int i=bg[now];i;i=nx[i]) if(to[i]!=f) &#123; dfs1(to[i],now); siz[now]+=siz[to[i]]; if(siz[to[i]]&gt;mx) mx=siz[to[i]],ws[now]=to[i]; &#125;&#125;int cnt,top[N],id[N],wt[N];void dfs2(int now,int tp) &#123; top[now]=tp,id[now]=++cnt,wt[cnt]=a[now]; if(!ws[now]) return; dfs2(ws[now],tp); for(int i=bg[now];i;i=nx[i]) if(to[i]!=fa[now]&amp;&amp;to[i]!=ws[now]) dfs2(to[i],to[i]);&#125;inline void change(int x,int y,int z) &#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; assign(id[top[x]],id[x],z); x=fa[top[x]]; &#125; else &#123; assign(id[top[y]],id[y],z); y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) assign(id[y],id[x],z); else assign(id[x],id[y],z);&#125;inline int query(int x,int y) &#123; int ans(0),lasta(0),lastb(0); IT itl,itr; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; itr=split(id[x]+1),itl=split(id[top[x]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; x=fa[top[x]]; &#125; else &#123; itr=split(id[y]+1),itl=split(id[top[y]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) &#123; itr=split(id[x]+1),itl=split(id[y]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; else &#123; itr=split(id[y]+1),itl=split(id[x]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; return ans-(lasta==lastb);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) scanf("%d",a+i); for(int i=1;i&lt;n;++i) &#123; scanf("%d%d",&amp;x,&amp;y); link(x,y),link(y,x); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=n;++i) s.insert(node(i,i,wt[i])); while(m--) &#123; scanf("\n%c%d%d",&amp;opt,&amp;x,&amp;y); if(opt=='C') &#123; scanf("%d",&amp;z); change(x,y,z); &#125; else printf("%d\n",query(x,y)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu1047]校门外的树]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu1047-%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[此处题面看见一堆 dalao 题解写树状数组线段树，蒟蒻在这里安利一种毒瘤数据结构——珂朵莉树。一、介绍。珂朵莉树 (ChthollyTree) ，又名 OldDriverTree (老司机树)，简称 ODT ，是一种非常暴力的数据结构，它将一段值相同的区间以三元组 &lt; 左端点，右端点，值 &gt; 的方式存储起来，因此它的效率是建立在区间推平操作 (assign) 上的(也就是本题的砍树)。二、存储方式。珂朵莉树的存储基于平衡树(我这里为了方便用了 STL 的 set )，这里定义珂朵莉树的结点为：1234567struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;这里的 l 和 r 是区间的左右端点(闭区间)，v 是该区间的值(表示这一区间内所有元素的值都是v)，然后是构造函数和重载运算符，这里重载成比较区间左端点。最后把区间扔进平衡树就行了：12set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;三、核心操作。珂朵莉树的操作是基于一个核心操作 split 的，传入参数 pos 后，它能返回左端点值为 pos 的结点的迭代器，如果不存在这样的结点，它就会把包含 pos 的结点 &lt; l，r，v &gt; 拆成 &lt; l , pos-1 , v &gt; 和 &lt; pos , r , v &gt; ，然后返回后面这个结点的迭代器。先上代码：123456789IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;一行行来看：1IT it=s.lower_bound(node(pos));lower_bound 是获取左端点大于等于 pos 的第一个结点。1if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it;如果这个结点的左端点正好是 pos ，我们就直接返回它。12--it;int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v;否则的话 —it 得到的就是包含 pos 的结点，我们用 L、R、V 储存它的左右端点和值。1s.erase(it);然后我们删掉这个结点。12s.insert(node(L,pos-1,V));return s.insert(node(pos,R,V)).first;最后我们插入两个新的结点，左右端点分别是 &lt; L、pos-1 &gt; 和 &lt; pos、R &gt; ，顺便返回后面这个结点的迭代器。这样我们就完成了 split 操作。四、区间推平。这是保证珂朵莉树复杂度不至于爆炸的重要操作，它能将一个区间内的值变得一样，本题的砍树就是区间赋值为 0 。先上代码：12345void assign(int l,int r,int v) &#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,v));&#125;看上去十分的暴力，事实上珂朵莉树就是这么暴力的数据结构。稍微解释一下代码：1IT itl=split(l),itr=split(r+1);itl 指向的结点左端点为 l ，itr 指向的结点左端点为 r+1 。1s.erase(itl,itr);删去平衡树中 [ itl , itr ) 的结点(左闭右开区间)。1s.insert(node(l,r,v));直接插入一个 &lt; l , r &gt; ，值为v的区间。就是这么直接暴力！Upd：由于某些未知原因（珂学规定），珂朵莉树提取区间时需要先 split 右端点！五、其他操作。1. 初始化初始化操作就是直接插入，本题所有树默认都是种上的，全部赋值为 1 就行：1s.insert(node(0,l,1));2. 区间操作区间操作的话这里就以题目的求和为例，先上代码：1234567int sum(int l,int r) &#123; int _sum=0; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) _sum+=(itl-&gt;v)*((itl-&gt;r)-(itl-&gt;l)+1); return _sum;&#125;同样是非常的暴力，直接取出所有区间内的结点暴力求和就行了，其他的操作如区间加法乘法什么的也是一样的，取出结点遍历一遍就行。六、本题代码。最后放上本题AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;cstdio&gt;#include&lt;set&gt;using namespace std;struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;int l,m,x,y,_sum;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;void remove(int l,int r) &#123; IT itl=split(l),itr=split(r+1); s.erase(itl,itr); s.insert(node(l,r,0));&#125;void sum() &#123; for(IT it=s.begin();it!=s.end();++it) _sum+=it-&gt;v*(it-&gt;r-it-&gt;l+1);&#125;int main() &#123; scanf("%d%d",&amp;l,&amp;m); s.insert(node(0,l,1)); for(int i=1;i&lt;=m;++i) &#123; scanf("%d%d",&amp;x,&amp;y); remove(x,y); &#125; sum(); printf("%d",_sum);&#125;七、总结珂朵莉树的效率建立在区间推平操作 (assign) 上，它能使结点数量快速减小从而保证时间复杂度，因此珂朵莉树十分容易被卡，不到万不得已还是得乖乖用别的数据结构，不过它的代码十分简单，考场上写不出别的数据结构时也是可以交一个珂朵莉树的。]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
</search>
