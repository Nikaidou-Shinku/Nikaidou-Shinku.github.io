<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【题解】[Luogu5494]多项式双曲函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5494-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题并没有什么很难的东西，我就主要讲讲怎么降低常数。正文首先众所周知双曲三角函数是可以化成几个基本初等函数的运算的，具体来说：\sinh(x)=\frac{e^x-e^{-x}}{2}\cosh(x)=\frac{e^x+e^{-x}}{2}\operatorname{sech}(x)=\frac{2}{e^x+e^{-x}}接下来就很容易了，直接按照这个算即可。常数优化但是你会发现，有的人写的多项式跑得就是比你快，而且快好几倍！现在我就介绍一些比较常用的优化常数的方法：优化开关$\text{O2}$ 比什么都管用，先打开再说取模优化众所周知 $\text{C++}$ 取模运算慢得出奇，如果能优化取模肯定是会快的。加法取模加法取模可以用在结果小于 $2\times\text{MOD}$ 的情况下，具体来说基本就是两个数相加减的时候。123inline void upd(int&amp;x) &#123; x+=x&gt;&gt;31&amp;MOD;&#125;上面的代码等价于下面的代码：123inline void upd(int&amp;x) &#123; if(x&lt;0) x+=MOD;&#125;但是第一份代码运用了位运算，速度十分可观。它的原理是对于一个 32位有符号整数 ，负数右移 $31$ 位会变成 $-1$ ，二进制位下就是全 $1$ ，而非负数右移 $31$ 位会变成 $0$ 。使用的时候就是两个数相加之后减去 $\text{MOD}$ ，再将结果 upd 一下。乘法取模乘法取模要复杂一些，一般不常用。有兴趣可以去 $\text{Min_25}$ 的博客了解一下：地址。预处理原根这是个大优化，有的时候能让你的常数减小到原来的 $\frac 25$ ！一般写 $\text{NTT}$ 的时候每次要根据长度重新处理蝴蝶变换的数组，做 $\text{NTT}$ 的过程中还要现场算原根的各次幂。这部分要做大量的乘法和取模运算，如果能预处理出来，只做一次，常数就能有极大优化！另外有的人预处理的时候数组大小是 $O(n\log n)$ 的，其实有一维并不需要，因为长度总是 $2$ 的整数次幂，只要按照最大的长度预处理即可。其它优化有时候你需要将数组一段清空或者移到另一个数组中，可以使用 cstring 库里的 memset 和 memcpy 完成。但我感觉优化效果不大，所以就没用。最后还有一些从过程上进行的比较复杂的优化，我也不会所以就不讲了，有兴趣可以去论文哥的博客了解一下：地址。贴一下此题代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 262210typedef long long i64;typedef unsigned long long u64;inline void upd(int&amp;x) &#123; x+=x&gt;&gt;31&amp;MOD;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int inv[N];inline void pre(int n) &#123; inv[1]=1; for(int i=2;i&lt;=n;++i) inv[i]=(i64)(MOD-MOD/i)*inv[MOD%i]%MOD;&#125;int lmt(1),r[N],w[N],qaq;inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); int l(getLen(deg&lt;&lt;1)); for(int i=0;i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) &#123; qaq=b[i]; b[i]=2ll-(i64)qaq*tmp[i]%MOD; upd(b[i]); b[i]=(i64)b[i]*qaq%MOD; &#125; IDFT(b,l); for(int i=deg;i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(int i=0;i+1&lt;deg;++i) b[i]=(i64)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;inline void getInt(int*a,int*b,int deg) &#123; for(int i=1;i&lt;deg;++i) b[i]=(i64)a[i-1]*inv[i]%MOD; b[0]=0;&#125;inline void getLn(int*a,int*b,int deg) &#123; static int tmp[N]; getInv(a,tmp,deg); getDer(a,b,deg); int l(getLen(deg&lt;&lt;1)); DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) tmp[i]=(i64)tmp[i]*b[i]%MOD; IDFT(tmp,l); getInt(tmp,b,deg); for(int i=0;i&lt;l;++i) tmp[i]=0; for(int i=deg;i&lt;l;++i) b[i]=0;&#125;void getExp(int*a,int*b,int deg) &#123; if(deg==1) b[0]=1; else &#123; static int tmp[N]; getExp(a,b,(deg+1)&gt;&gt;1); getLn(b,tmp,deg); int l(getLen(deg&lt;&lt;1)); for(int i=0;i&lt;l;++i) &#123; if(i&lt;deg) &#123; tmp[i]=a[i]-tmp[i]; upd(tmp[i]); &#125; else tmp[i]=0; &#125; ++tmp[0]; DFT(tmp,l); DFT(b,l); for(int i=0;i&lt;l;++i) b[i]=(i64)b[i]*tmp[i]%MOD; IDFT(b,l); for(int i=deg;i&lt;l;++i) b[i]=tmp[i]=0; &#125;&#125;int n,type,f[N];int xp[N],ixp[N],sm[N],dc[N];int Sinh[N],Cosh[N],Sech[N];int main() &#123; scanf("%d%d",&amp;n,&amp;type); pre(n); init(n&lt;&lt;1); for(int i=0;i&lt;n;++i) scanf("%d",f+i); getExp(f,xp,n); getInv(xp,ixp,n); if(type&amp;1) &#123; for(int i=0;i&lt;n;++i) &#123; dc[i]=xp[i]-ixp[i]; upd(dc[i]); Sinh[i]=(i64)dc[i]*inv[2]%MOD; &#125; for(int i=0;i&lt;n;++i) printf("%d ",Sinh[i]); putchar('\n'); &#125; if(type&amp;2) &#123; for(int i=0;i&lt;n;++i) &#123; sm[i]=xp[i]+ixp[i]-MOD; upd(sm[i]); Cosh[i]=(i64)sm[i]*inv[2]%MOD; &#125; for(int i=0;i&lt;n;++i) printf("%d ",Cosh[i]); putchar('\n'); &#125; if(type&amp;4) &#123; if(type&amp;2) &#123; getInv(Cosh,Sech,n); for(int i=0;i&lt;n;++i) printf("%d ",Sech[i]); &#125; else &#123; for(int i=0;i&lt;n;++i) &#123; sm[i]=xp[i]+ixp[i]-MOD; upd(sm[i]); &#125; getInv(sm,Sech,n); for(int i=0;i&lt;n;++i) &#123; Sech[i]=(Sech[i]&lt;&lt;1)-MOD; upd(Sech[i]); &#125; for(int i=0;i&lt;n;++i) printf("%d ",Sech[i]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.8杂题选讲]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-8%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意给你一个长度为 $n$ 的序列 $a$ 和一个常数 $m$ 。定义 $f_{l,x}$ 为区间 $[l,l+m]$ 中 $&lt;x$ 的数的个数。有 $m$ 组询问，每组询问给定 $l,r,x$ ，询问 $\min\{f_{i,x}\}~~(l\leqslant i\leqslant r)$ 。$n,m\leqslant10^5$强制在线，空间 $\text{64MiB}$ 。题解分块，维护块内最大值暂咕T2题意有一棵 $n$ 个点的树，每条边有一个颜色黑或白，求有多少条路径，其中黑白边的数量满足 $2\times\min(w,b)\geqslant\max(w,b)$ 。$n\leqslant10^5$题解暂咕T3题意天空中有 $n$ 朵云，第 $i$ 朵云出现的时间是 $[l_i,r_i]$ ，你可以用 $c_i$ 的代价使第 $i$ 朵云消失，你最多可以花费 $C$ 的代价，保证 $C$ 最多让两朵云消失， $m$ 次询问，第 $i$ 次询问从 $0$ 时刻开始走，要走多久才能共经过 $w_i$ 时间的无云区间。$n,m\leqslant10^5$题解暂咕T4题意给出一个长度为 $n$ 的不降序列 $A$求长度为 $n$ 的排列 $B$ ，满足 $\min\{|A_{B_i}-A_{B_{i-1}}|\}$ 最大$n\leqslant10^5$ , $A_i\leqslant10^9$题解暂咕T5题意有一张 $n$ 个点 $m$ 条边的简单无向图，每条边上有一个正整数边权， $s$ 号点到 $t$ 号点的最短路长度为 $L$ 。现在把 $m$ 条边中一些边的边权抹去，求出一组边的赋值方案使得最短路依旧是 $L$ 。$n,m\leqslant5\times10^5$ , $L\leqslant10^9$题解暂咕T6题意弑尽破净的第四分块题解咕咕咕T7题意给你一个长度为 $n$ 的序列 $a$ ， $m$ 次操作，每次操作在 $i$ 位置上放 $c$ 个球，并询问位置 $y$ 上有多少个球，然后把 $x$ 位置的球放到 $a_x$ 上去，强制在线。$n,m\leqslant10^5$题解等价于在基环内向树上游走，环上可以开数组维护树上有两种做法：重链剖分后用堆维护每个元素到链顶的距离二维线段树数子树内某一深度的点T8题意$n$ 个数 $w_1,w_2,\ldots,w_n$ ，求一个最大的 $k$ ，使得能选出 $k$ 个数，使得它们模某个数 $m$ 相等，求出 $k$ 的最大值，并使 $k$ 最大的情况下 $m$ 尽量大。$m\geqslant2$ , $n\leqslant10^5$ , $w_i\leqslant10^7$题解随机选出一个数，这个数在答案集合中的概率是大于 $\frac 12$ 的。暂咕T9题意给你两个数 $l,r$ ，求 $l\sim r$ 除掉一个最大质因子后的最大质因子的和。$1\leqslant l\leqslant r\leqslant10^{11}$题解$\text{Min_25}$ 筛T10题意给出一个 $n\times m$ 大小的矩阵，每个位置可以填 $[1,c]$ 中的任意一个数，要求填完之后不能有两行或两列完全相同，求方案数。$n,m\leqslant5000$题解斯特林反演]]></content>
      <tags>
        <tag>讲课</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.7模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-7%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5489]EntropyIncreaser与动态图]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5489-EntropyIncreaser%E4%B8%8E%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[此处题面前言这个题其实没有多难，静下来慢慢写还是十分可做的，不失为一道 $\text{LCT}$ 练手好题。正文首先看到 $1$ 操作连边，第一反应应该就是 $\text{Link/Cut Tree}$ 了，然而怎么维护割边割点数量呢？我们分开讨论。割边考虑对于一个环，环上所有边一定不会是割边；而对于一条链，链上所有边一定是割边。我们可以直接维护每条边是不是割边，初始时所有边都是割边，当某次加边操作产生了环，则环上所有边都不会成为割边了。具体来讲，边转点后所有边权值均为 $1$ ，当某次 $\text{Link}$ 的两结点已经连通，则将两结点间的链上的边全部赋值为 $0$ ，同时维护和即可。割点割点不像割边那样好处理了。考虑静态的情况，静态割点有一个比较套路的方法是用圆方树，我们可以尝试动态地维护一棵圆方树：每次连边产生环就将环上所有点连到一个方点上来。考虑这样做的复杂度：假设环的长度是 $L$ ，每次会用 $O(L\log n)$ 的复杂度删去一个长为 $O(L)$ 的环，均摊复杂度为 $O(n\log n)$ 。最后于是使用两棵 $\text{LCT}$ 分别维护割边和割点即可。参考代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;namespace Summer &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],mark[N]; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void NaCly_Fish_Orz(int x) &#123; if(x) &#123; val[x]=sumv[x]=0; mark[x]=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; if(mark[x]) &#123; NaCly_Fish_Orz(lc(x)); NaCly_Fish_Orz(rc(x)); mark[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125;&#125;namespace Pockets &#123; int ch[N][2],fa[N],rev[N],val[N],sumv[N],st[N],num; inline void reverse(int x) &#123; if(x) &#123; swap(lc(x),rc(x)); rev[x]^=1; &#125; &#125; inline void up(int x) &#123; sumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x]; &#125; inline void down(int x) &#123; if(rev[x]) &#123; reverse(lc(x)); reverse(rc(x)); rev[x]=0; &#125; &#125; inline int nrt(int x) &#123; return x==lc(fa[x])||x==rc(fa[x]); &#125; void psa(int x) &#123; if(nrt(x)) psa(fa[x]); down(x); &#125; inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y; if(nrt(y)) ch[z][y==rc(z)]=x; if(ch[y][k]) fa[ch[y][k]]=y; fa[y]=x,fa[x]=z,up(y); &#125; inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123; y=fa[x],z=fa[y]; if(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y); &#125; up(x); &#125; inline void access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; splay(x); rc(x)=y; up(x); &#125; &#125; inline void mrt(int x) &#123; access(x); splay(x); reverse(x); &#125; inline void link(int x,int y) &#123; mrt(x); fa[x]=y; &#125; inline void cut(int x,int y) &#123; mrt(x); access(y); splay(y); fa[x]=lc(y)=0; up(y); &#125; void print(int now) &#123; if(now) &#123; down(now); print(lc(now)); st[++num]=now; print(rc(now)); &#125; &#125;&#125;int n,q,opt,u,v,last,tot,ans,SummerPockets;int fa[N];inline int find(int x) &#123; return x==fa[x]?x:fa[x]=find(fa[x]);&#125;inline void getEdge(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Summer::mrt(u); Summer::access(v); Summer::splay(v); ans=Summer::sumv[v];&#125;inline void getPoint(int u,int v) &#123; int x=find(u),y=find(v); if(x!=y) &#123; ans=-1; return; &#125; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); ans=Pockets::sumv[v];&#125;inline void link(int u,int v) &#123; int x=find(u),y=find(v); if(x==y) &#123; Summer::mrt(u); Summer::access(v); Summer::splay(v); Summer::NaCly_Fish_Orz(v); getPoint(u,v); if(ans&gt;2) &#123; ++SummerPockets; Pockets::mrt(u); Pockets::access(v); Pockets::splay(v); Pockets::num=0; Pockets::print(v); for(int i=1;i&lt;Pockets::num;++i) Pockets::cut(Pockets::st[i],Pockets::st[i+1]); for(int i=1;i&lt;=Pockets::num;++i) Pockets::link(Pockets::st[i],SummerPockets); &#125; &#125; else &#123; ++tot; fa[y]=x; Summer::val[tot]=1; Summer::link(u,tot); Summer::link(tot,v); Pockets::link(u,v); &#125;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;q); tot=SummerPockets=n; for(int i=1;i&lt;=n;++i) fa[i]=i,Pockets::val[i]=1; while(q--) &#123; scanf("%d%d%d",&amp;opt,&amp;u,&amp;v); u^=last,v^=last; switch(opt) &#123; case 1: &#123; link(u,v); break; &#125; case 2: &#123; getEdge(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; default: &#123; getPoint(u,v); if(ans!=-1) last=ans; printf("%d\n",ans); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu2617]DynamicRankings]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu2617-DynamicRankings%2F</url>
    <content type="text"><![CDATA[此处题面前言在题解区看见了一个用分块写这个题的，但是在数据加强到 $10^5$ 后貌似已经过不去了（或许卡卡常还有救），难道分块真的就比不过这些树套树整体二分？不不不，分块的潜力远远不止这些！分块无快读无 $\text{O2}$ 评测记录正文之前那篇分块题解的做法是二分答案，然后块内二分检验，这样做的时间复杂度是 $O(n\sqrt n\log n\log V)$ 的，其中 $V$ 是值域。然而二分跟分块就很不搭，我们考虑一个不需要二分也能求第 $k$ 小的方法。先离散化，对序列分块，考虑维护块内每个数的出现次数，再将值域分块，维护每个块内每个值域块中数的出现次数。然后做前缀和，这样我们就能 $O(1)$ 查询一段块中每个数的出现次数以及每个值域块中数的出现次数。这部分的预处理是 $O(n\sqrt n)$ 的。查询时考虑将散块中每个数及值域块中数的出现次数先记录下来，这部分是 $O(\sqrt n)$ 的，然后跳值域块，超过 $k$ 了就跳块内的数，直到找到正好超过 $k$ 的位置，这样可以 $O(\sqrt n)$ 查询第 $k$ 小。修改时只要考虑对预处理的信息的影响即可，由于我们预处理的是前缀和，所以每次修改至多修改 $O(\sqrt n)$ 个块。这样我们就得到了一个 $O(n\sqrt n)$ 的优秀算法，可以通过此题。最后这个做法是另一个题的 $trick$ ，有兴趣的可以去试一下：望月悲叹的最初分块。最后给出代码，仅供参考：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using std::sort;using std::unique;using std::lower_bound;#define N 100010inline int min(int a,int b) &#123; return a&lt;b?a:b;&#125;struct node&#123;int opt,l,r,k;&#125;q[N];int n,m,a[N],b[N&lt;&lt;1],tot,l,r,k;char opt;int L[320],R[320];int siz,szv,num,numsz;int bl[N],blv[N&lt;&lt;1];int sumc[320][N&lt;&lt;1];int sums[320][450];inline void modify(int x,int y) &#123; for(int i=bl[x];i&lt;=num;++i) &#123; --sumc[i][a[x]]; --sums[i][blv[a[x]]]; ++sumc[i][y]; ++sums[i][blv[y]]; &#125; a[x]=y;&#125;int tmpa[N&lt;&lt;1],tmpc[450];inline int query(int l,int r,int k) &#123; int ans; if(bl[l]==bl[r]) &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; else &#123; int vl,vr,tmp(0); for(int i=l;i&lt;=R[bl[l]];++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=L[bl[r]];i&lt;=r;++i) ++tmpa[a[i]],++tmpc[blv[a[i]]]; for(int i=1;i&lt;=numsz;++i) &#123; tmp+=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; if(tmp&gt;=k) &#123; tmp-=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i]; vl=(i-1)*szv+1; vr=i*szv; break; &#125; &#125; for(int i=vl;i&lt;=vr;++i) &#123; tmp+=tmpa[i]+sumc[bl[r]-1][i]-sumc[bl[l]][i]; if(tmp&gt;=k) &#123; ans=b[i]; break; &#125; &#125; for(int i=l;i&lt;=R[bl[l]];++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; for(int i=L[bl[r]];i&lt;=r;++i) tmpa[a[i]]=0,tmpc[blv[a[i]]]=0; &#125; return ans;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf("%d",a+i); b[++tot]=a[i]; &#125; for(int i=1;i&lt;=m;++i) &#123; scanf("\n%c%d%d",&amp;opt,&amp;l,&amp;r); if(opt=='Q') &#123; scanf("%d",&amp;k); q[i]=(node)&#123;1,l,r,k&#125;; &#125; else &#123; q[i]=(node)&#123;2,l,r,0&#125;; b[++tot]=r; &#125; &#125; sort(b+1,b+tot+1); tot=unique(b+1,b+tot+1)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+tot+1,a[i])-b; siz=ceil(sqrt(n)); szv=ceil(sqrt(tot)); for(int i=1;i&lt;=n;++i) bl[i]=(i-1)/siz+1; for(int i=1;i&lt;=tot;++i) blv[i]=(i-1)/szv+1; num=bl[n],numsz=blv[tot]; for(int i=1;i&lt;=num;++i) &#123; L[i]=R[i-1]+1; R[i]=min(L[i]+siz-1,n); for(int j=1;j&lt;=tot;++j) sumc[i][j]=sumc[i-1][j]; for(int j=1;j&lt;=numsz;++j) sums[i][j]=sums[i-1][j]; for(int j=L[i];j&lt;=R[i];++j) &#123; ++sumc[i][a[j]]; ++sums[i][blv[a[j]]]; &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; if(q[i].opt==1) printf("%d\n",query(q[i].l,q[i].r,q[i].k)); else modify(q[i].l,lower_bound(b+1,b+tot+1,q[i].r)-b); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.6字符串]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-6%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意有一个长度为 $n$ 的字符串，已知第 $i$ 种字符刚好有 $a_i$ 个，求 $kmp$ 数组之和最小是多少。$n,字符种数\leqslant10^5$题解将出现次数最少的字符放 $1$ 个在最前面，然后放其它字符，最后放剩下的字符特判只有 $1$ 种字符的情况T2题意定义两个字符串相同为它们的最小字符表示法相同给定 $S,T$ ，求 $T$ 在 $S$ 中的出现次数$总串长\leqslant10^6$题解以每个字符上一次出现的位置为值做 $kmp$T3题意求有多少个长度为 $n$ 的字符串， $kmp$ 数组 $next[n]=0$ ，并输出满足条件的字典序第 $k$ 大的 $01$ 串。$n\leqslant64$ , $T\leqslant1000$题解设 $f_i$ 表示长度为 $i$ 的，没有前缀等于后缀的字符串数量。暂咕T4题意有多少个长度为 $k$ 的，最小循环表示法唯一且最小表示法就是本身的串的个数。$k\leqslant10^6$题解枚举循环节，莫比乌斯反演容斥T5题意如果两个长度为 $n$ 的字符串 $S,T$ 满足对于任意一对整数 $(i,j)$ ，如果 $S[i,j]$ 为回文串， $T[i,j]$ 也为回文串，我们称 $S,T$ 为回文等价，给出 $S$ ，求有多少 $T$ 满足与 $S$ 回文等价。$|S|,|T|\leqslant10^6$题解做 $Manacher$ 时将字符相同的位置用并查集连起来T6题意给你一个长度为 $n$ 的字符串，求一个最大的 $k$ ，使得存在一个字符串序列 $a_1,a_2,\ldots,a_k$ ，其中 $a_i$ 在 $a_{i+1}$ 中出现两次，且 $a_i$ 为给出的串的子串$n\leqslant10^5$题解暂咕T7题意给一个字符串，求一个最大长度 $L\leqslant\frac n2$ ，使得前 $L$ 个字符与后 $L$ 个字符循环同构。$n\leqslant10^6$题解暂咕T8题意给一个长度为 $n$ 的字符串 $s$ ，有 $q$ 次询问，每次询问给出两个区间，求第一个区间中字典序最小的子串使得该子串的字典序大于第二个区间的串。$n\leqslant10^5$ , $q\leqslant2\times10^5$题解建 $\text{SAM}$ ，二分 + 倍增 + 线段树查询T9题意给你长度为 $n$ 的字符串 $T$ ，你可以用 $T$ 中的子串去拼另一个字符串，能拼出字符串 $S$ 的方案中我们选择步数最少的作为拼出 $S$ 的方案，求长度为 $m$ 的能拼出的字符串中，方案步数最大是多少。$n\leqslant10^5$ , $m\leqslant10^{18}$题解二分 + 矩阵乘法]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.5模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-5%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.4计数]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-4%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！T1题意小 $\text{A}$ 会投 $a$ 次硬币，小 $\text{B}$ 会投 $b$ 次硬币，求有多少种情况，小 $\text{A}$ 投出的硬币正面向上的次数严格大于小 $\text{B}$ 投出的硬币正面向上的次数，答案保留最后 $k$ 位$1\leqslant a,b\leqslant10^{15}$ , $b\leqslant a\leqslant b+10000$ , $1\leqslant k\leqslant9$题解设 $x$ 为小 $\text{A}$ 投出的向上的次数，设 $y$ 为小 $\text{B}$ 投出的向下的次数。有 $x+y&gt;b$ ，枚举 $x+y$答案即是 $\sum_{i=b+1}^{a+b}{\binom{a+b}{i}}$T2题意求 $n$ 个点 $m$ 条边的无向连通图的个数，点有标号$n\leqslant30$ , $m\leqslant100$题解设 $f_{i,j}$ 表示 $i$ 个点 $j$ 条边的无向连通图，枚举与 $1$ 相连的连通块转移$f_{i,j}=\binom{\frac{i(i-1)}{2}}{j}-\sum_{x=1}^{i}{\sum_{k=0}^{j}{f_{x,k}\times\binom{\frac{(i-x)(i-x-1)}{2}}{j-k}\times\binom{n-1}{x-1}}}$T3题意给定一个 $n$ 个点的图，初始时没有边每次随机选择两个不相同的点连接起来求期望要多少次才能使整个图连通$n\leqslant30$题解考虑到 $30$ 的拆分数只有 $5600$ 左右，可以直接将图的连通情况作为状态，然后 $O(n^2)$ 转移T4题意给出一个 $n$ 个点 $m$ 条边的无向图，每条边的权值不固定，为 $[0,1]$ 内的随机变量，无重边无自环，求最小生成树上最大边的期望边权$n\leqslant10$ , $m\leqslant\frac{n(n-1)}{2}$题解设 $f_{s,i}$ 表示连通块 $s$ 里连了 $i$ 条边的方案数设 $g_{s,i}$ 表示在点集 $s$ 里连了 $i$ 条边且不连通的方案数暂咕[SHOI2017] 分手是祝愿题面题目链接Zeit und Raum trennen dich und mich.时空将你我分开。$\text{B}$ 君在玩一个游戏，这个游戏由 $n$ 个灯和 $n$ 个开关组成，给定这 $n$ 个灯的初始状态，下标为 $1\sim n$ 的正整数。每个灯有两个状态亮或灭，我们用 $1$ 来表示这个灯是亮的，用 $0$ 表示这个灯是灭的，游戏的目标是使所有灯都灭掉。但是当操作第 $i$ 个开关时，所有编号为 $i$ 的约数（包括 $1$ 和 $i$ ）的灯的状态都会被改变，即从亮变成灭，或者是从灭变成亮。$\text{B}$ 君发现这个游戏很难，于是想到了这样的一个策略，每次等概率随机操作一个开关，直到所有灯都灭掉。这个策略需要的操作次数很多， $\text{B}$ 君想到这样的一个优化。如果当前局面，可以通过操作小于等于 $k$ 个开关使所有灯都灭掉，那么他将不再随机，直接选择操作次数最小的操作方法（这个策略显然小于等于 $k$ 步）操作这些开关。$\text{B}$ 君想知道按照这个策略（也就是先随机操作，最后小于等于 $k$ 步，使用操作次数最小的操作方法）的操作次数的期望。这个期望可能很大，但是 $\text{B}$ 君发现这个期望乘以 $n!$ 一定是整数，所以他只需要知道这个整数对 $100003$ 取模之后的结果。$n\leqslant100000$题解设 $f_i$ 为从还剩 $i$ 个位置到还剩 $i-1$ 个位置的期望步数暂咕T6题意在一个直角坐标系上依次插入 $n$ 个点，每次插入之后输出当前有多少个三角形严格覆盖原点。（强制在线）$n\leqslant100000$题解考虑一个不合法的方案，对一个极角最小的点，另两个点一定在原点到该点连线的半平面内用平衡树维护即可T7题意“奋战三星期，举重五百斤”，一大群鸽子来到了 $\text{CJ}$ 的健身房，发现房间里有一排共 $n$ 个铁饼。有 $Q$ 次操作，你需要支持三种操作：1 x y 将第 $x$ 个铁饼的重量设置为 $y$2 L R 翻转第 $L$ 至第 $R$ 个铁饼3 L R W 询问仅使用 $L$ 到 $R$ 之间的铁饼能否拼出一个重量为 $W$ 的杠铃鸽子们还在健身房的天花板上发现了一个数字 $k$ 。机智的它们立刻发现，在任意时刻出现过的不同的铁饼数目是不会超过 $k$ 的。$n,Q,W\leqslant100000$ , $k\leqslant10$题解[HAOI2008]硬币购物暂咕T8题意给你一个长度为 $n$ 的序列 $A$ ，如果 $n$ 不是非降，你必须删掉一个数，直到非降为止，求不同方案数，对 $1000000007$ 取模。$n\leqslant2000$题解设 $f_i$ 表示删到长度为 $i$ 的非降序列的方案数（包含不合法）预处理 $g_i$ 为长度为 $i$ 的非降序列的个数$f_i=g_i\times(n-i)!$从小到大容斥掉不合法的方案T9题意给你一个长度为 $2n$ 的序列 $a$ ，其中有些位置上的元素是 $-1$ ，保证 $1\sim 2n$ 最多只出现一次，定义一个长度为 $n$ 的数组 $b$ ， $b_i=\min(a_{2i-1},a_{2i})$ ，求有多少种不同的 $b$ 数组。$n\leqslant300$题解把 $a$ 分成 $n$ 个二元组，则每个二元组只有 $3$ 种情况$f_{i,j,k}$ 表示从大往小考虑到第 $i$ 个数，有 $j$ 个 $(-1,x)$ ，有 $k$ 个 $(-1,y)$ 。（ $y$ 为已经填进去的）暂咕T10题意给定一个长度为 $n$ 的正整数序列 $a$求有多少个长度为 $n$ 的正整数序列 $x$ 满足对于任意 $1\leqslant i\leqslant n$ , $1\leqslant x_i\leqslant D$对于任意 $1\leqslant i&lt;j\leqslant n$ , $\max(a_i,a_j)&lt;|x_i-x_j|$$n\leqslant50$ , $a_i\leqslant40$题解按 $a_i$ 排序依次插入设 $f_{i,j,s}$ 表示插入到第 $i$ 个，还有 $j$ 个缝隙，压紧后长度为 $s$ 的方案数枚举第 $i$ 个是放在两端还是合并两个已有段转移T11题意给定一个长度为 $n$ 的整数序列 $S$求有多少个长度为 $n$ 的正整数序列 $T$使得将 $S$ 和 $T$ 排序后， $S$ 的每一位都不小于 $T$ 的每一位$n\leqslant1000$题解对 $S$ 和 $T$ 排序设 $f_i$ 表示有多少个 $T$ 的前 $i$ 位满足条件枚举第一个不满足条件的位置，用总方案减去不满足的转移]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试】8.3模拟考试]]></title>
    <url>%2F%E3%80%90%E8%80%83%E8%AF%95%E3%80%918-3%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[校内资料，请输入密码访问 (*╹▽╹*) Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【讲课】8.2网络流]]></title>
    <url>%2F%E3%80%90%E8%AE%B2%E8%AF%BE%E3%80%918-2%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[菊开讲课，必属精品！[bzoj1280] $\text{Emmy}$卖猪pigs题面题目链接$\text{Emmy}$ 在一个养猪场工作。这个养猪场有 $m$ 个锁着的猪圈，但 $\text{Emmy}$ 并没有钥匙。有 $n$ 个顾客会到养猪场来买猪，一个接着一个。每一位顾客都会有一些猪圈的钥匙，他们会将这些猪圈打开并买走固定数目的猪。所有顾客有的钥匙和他们需要买猪的数量在事先都告诉了 $\text{Emmy}$，于是 $\text{Emmy}$ 要订一个计划，使得卖出去的猪最多。买卖的过程是这样的：一个顾客前来，并打开所有他可以打开的猪圈。然后 $\text{Emmy}$ 从这些猪圈里牵出固定数目的猪卖给顾客（最多只能和顾客需要数相等），并可以重新安排这些开着的猪圈中的猪。每个猪圈可以存放任意数目的猪。写一个程序，使得 $\text{Emmy}$ 能够卖出去尽可能多的猪。$n\leqslant100$ , $m\leqslant1000$题解暂咕[bzoj2406] 矩阵题面题目链接给定一个整数矩阵 $A[n\times m]$ ，求一个矩阵 $B[n\times m]$ 满足 $\forall1\leqslant i\leqslant n,1\leqslant j\leqslant m,B_{ij}\in[L,R]$ ，且使下式值最小：\large max= \begin{cases} \mathop{max}\limits_{1\leqslant j\leqslant m} \{|\sum_{i=1}^{n}{(A_{ij}-B_{ij})}|\}\\ \mathop{max}\limits_{1\leqslant i\leqslant n} \{|\sum_{j=1}^{m}{(A_{ij}-B_{ij})}|\} \end{cases}$n,m\leqslant 200$题解暂咕[TJOI2015] 组合数学题面题目链接为了提高智商， $\text{ZJY}$ 开始学习组合数学。某一天她解决了这样一个问题：给一个 $n\times m$ 的网格图，其中某些格子有财宝。每次从左上角出发，只能往右或下走。问至少要走几次才可能把财宝全捡完。但是她还不知足，想到了这个问题的一个变形：假设每个格子中有好多块财宝，而每一次经过一个格子至多只能捡走一块财宝，其它条件不变，至少要走几次才可能把财宝全捡完？这次她不会做了，你能帮帮她吗？$n,m\leqslant1000$题解最长链等于最少反链覆盖每个点向不能到达它的点连边，跑最长路[bzoj1189] 紧急疏散evacuate题面题目链接发生了火警，所有人员需要紧急疏散！假设每个房间是一个 $n\times m$ 的矩形区域。每个格子可以是空地、墙或者门，人们可以从门撤出房间。已知门一定在房间的边界上，并且边界上不会有空地。最初，每块空地上都有一个人，在疏散的时候，每一秒钟每个人都可以向上下左右四个方向移动一格，当然他也可以站着不动。疏散开始后，每块空地上就没有人数限制了（也就是说每块空地可以同时站无数个人）。但是，由于门很窄，每一秒钟只能有一个人移动到门的位置，一旦移动到门的位置，就表示他已经安全撤离了。现在的问题是：如果希望所有的人安全撤离，最短需要多少时间？或者告知根本不可能。$3\leqslant n,m\leqslant20$题解对时间建分层图[POI2010] Bridges题面题目链接$\text{YYD}$ 为了减肥，他来到了瘦海，这是一个巨大的海，海中有 $n$ 个小岛，小岛之间有 $m$ 座桥连接，两个小岛之间不会有两座桥，并且从一个小岛可以到另外任意一个小岛。现在 $\text{YYD}$ 想骑单车从小岛 $1$ 出发，骑过每一座桥，到达每一个小岛，然后回到小岛 $1$ 。霸中同学为了让 $\text{YYD}$ 减肥成功，召唤了大风，由于是海上，风变得十分大，经过每一座桥都有不可避免的风阻碍 $\text{YYD}$ ， $\text{YYD}$ 十分 $ddt$ ，于是用泡芙贿赂了你，希望你能帮他找出一条承受的最大风力最小的路线。$2\leqslant n\leqslant1000$ , $1\leqslant m\leqslant2000$题解二分答案，网络流检验先随机定向，检查每个点的度数对于一个点入度减出度为正的，源点向其连边，否则该点向汇点连边边权为度数差的绝对值[bzoj4213] 贪吃蛇题面题目链接最近 $\text{lwher}$ 迷上了贪吃蛇游戏，在玩了几天却从未占满全地图的情况下，他不得不承认自己是一个弱菜，只能改去开发一款更弱的贪吃蛇游戏。在开发的过程中， $\text{lwher}$ 脑洞大开，搞了一个多条蛇的模式。但由于这种模式太难操作，于是他只好改变游戏的玩法，稍微变化一下游戏目标。新的游戏是这样的：一些蛇覆盖了一个网格。每个格子要么是一个障碍物，要么是蛇的一部分。每条蛇占据了一条折线（拐角处只能水平和竖直连接），且至少占据两个格子。蛇与蛇之间不能重叠，蛇也不会与自己重叠。每条蛇还必须满足以下两个条件中的一个：两个端点所在的格子在网格的边界。蛇构成一个环，即两个端点相邻（垂直或水平，不能斜着），至少要占据 $4$ 个格子（否则没法形成环）。给定一个网格，在满足前面所述的条件下覆盖所有空地，并使得端点在网格边界（即不构成环）的蛇尽量少。（如果一条蛇既构成环，又是端点在边界，那么不计入答案）例如，以下网格：可以由下面三种方案覆盖。还有其它的方案，但是没法仅用一条不构成环的蛇就覆盖整个网格。$n,m\leqslant12$题解黑白染色，边界的点下界为 $1$ ，上界为 $2$内部的点上下界皆为 $2$ ，障碍不连边[CEOI2008] order题面题目链接有 $n$ 个工作， $m$ 种机器，每种机器你可以租或者买过来。每个工作包括若干道工序，每道工序需要某种机器来完成，你可以通过购买或租用机器来完成。现在给出这些参数，求最大利润。$1\leqslant n,m\leqslant1200$题解源点向工作连收益工作向机器连租的价格机器向汇点连买的价格用总收益减去最小割[bzoj3774] 最优选择题面题目链接小 $\text{N}$ 手上有一个 $n\times m$ 的方格图，控制某一个点要付出 $A_{ij}$ 的代价，然后某个点如果被控制了，或者它周围的所有点（上下左右）都被控制了，那么它就算是被选择了的。一个点如果被选择了，那么可以得到 $B_{ij}$ 的回报。现在请你帮小 $\text{N}$ 选一个最优的方案，使得回报减代价尽可能大。$n,m\leqslant 50$题解暂咕T9题意$p\times q$ 的网格，每个位置有 $r$ 种选择，编号为 $1\sim r$ ，每种选择都有对应收益（可能为负）限制每个点分别和它上下左右相邻的 $4$ 个点的选择编号之和不能超过 $d$最大化总收益$p,q,r\leqslant40$题解暂咕]]></content>
      <tags>
        <tag>讲课</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3383]线性筛素数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3383-%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言首先说一下，这个科技是我在 $\text{Min_25}$ 的博客里看见的，那篇博客是 $2017$ 年的了，去翻了下提交记录发现论文哥也用了这个科技，所以也并不是什么新东西。有兴趣的也可以去阅读一下那篇博客。然后，虽然这个题是线性筛素数，但是这篇题解并不是讲筛法的，而是一些奇技淫巧。若是想学习素数筛法的可以跳过这篇题解了。正文相信各位都知道一个 $O(\sqrt n)$ 判断素数的方法，也就是枚举 $2\sim\lfloor\sqrt n\rfloor$ 检查每个数是否是 $n$ 的约数。具体代码如下：123456bool check(int x) &#123; if(x==0||x==1) return false; for(int i=2;i*i&lt;=x;++i) if(x%i==0) return false; return true;&#125;这个题我们只要对于每个询问都这样判断一次即可，复杂度上界 $O(M\sqrt N)$ 。如果我的数据是 $10^6$ 个 $9840769$ ，并且你的程序没有记忆化，这个程序需要 $\text{7.7s}$ 左右的时间才能出解。我们考虑怎样优化。我们判断约数的时候需要取模，而众所周知 $\text{C++}$ 的取模是很慢的，如果能加快取模的效率，就能对运行速度有很大优化。$\text{Min_25}$ 在他的博客里讲到了这样一种优化方法：考虑到判断约数时我们只需要得知取模结果是否为 $0$ ，并不需要知道实际结果。若 $m$ 为奇数， $m’$ 为 $m$ 模 $2^{64}$ 下的逆元，且有 $n\in\left[0,2^{64}\right)$ ，则：n\equiv0\pmod{m}\ \Leftrightarrow\ (n\cdot m')\%2^{64}\leqslant\lfloor\frac{2^{64}}{m}\rfloor对于一个模数 $m$ 我们预处理出 $m’$ 和 $\lfloor\frac{2^{64}}{m}\rfloor$ ，然后我们就可以把判断 $n\%m$ 是否为 $0$ 转化为一次乘法和一次比较大小。使用这个方法，刚刚跑 $\text{7.7s}$ 的程序只需要 $\text{1.9s}$ 即可出解， $4$ 倍的效率优化！最后这个技巧不仅可以用于判断素数，也可以用于质因数分解，杜教筛、洲阁筛、 $\text{Min_25}$ 筛的预处理。但使用场合还是较少，不过效率优化还是十分明显的！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【更新中】浅谈模意义下形式幂级数的几种操作]]></title>
    <url>%2F%E3%80%90%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%91%E6%B5%85%E8%B0%88%E6%A8%A1%E6%84%8F%E4%B9%89%E4%B8%8B%E5%BD%A2%E5%BC%8F%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言近几年信息学竞赛中出现了一类利用 生成函数 进行计数的题目，这类题目往往需要一顿推导之后得出一个或几个容易计算的生成函数与代表答案的生成函数间的关系。由于这类题目往往需要将结果对一个大质数取模，因此我们可以用模意义下形式幂级数的一些操作来进行这些生成函数之间的运算。本文将从简单的离散傅里叶变换开始，逐步带你了解这一类基于离散卷积的形式幂级数操作。你需要知道的几点多项式由数或字母或两者的乘积组成的代数式叫单项式（单个数或字母也为单项式）单项式中的常数因子为单项式的系数单项式中所有字母的指数之和为单项式的次数由若干个单项式相加组成的代数式叫多项式多项式各项中次数最大的单项式的次数为多项式的次数形式幂级数定义域为 $\mathbb Z^+$ 或其有限子集的函数叫数列（也就是一些有序的数）将数列的每一项求和得到的函数叫级数，一般所讲的级数大多指无穷级数，即数列有无穷项形如 $\sum_{i=0}^{\infty}{a_i(x-x_0)^i}$ 的级数叫幂级数（ $x_0$ 为常数）其中 $a_i$ 为幂级数的系数（可以类比多项式的各项系数）若存在一个非负实数 $r$ 使得幂级数在 $ | x - x_0 | &lt; r $ 时趋近于一个确定的值（收敛），在 $ | x - x_0 | &gt; r $ 时不趋于任何值（发散），则称 $ r $ 为幂级数的收敛半径，否则称该幂级数的收敛半径为 $ +\infty $将一个数列的各项作为幂级数的系数，所得到的幂级数不一定是收敛的（收敛半径可能为 $0$ ）。但我们淡化其收敛与发散的性质，认为它是收敛的，则可以得到一个形式上类似幂级数的东西（也就是长得像幂级数），我们将其称为形式幂级数若一个形式幂级数从某一项开始，后面项的系数全部为 $0$ ，则我们称其为形式多项式离散卷积令 $f(x)$ 和 $g(x)$ 为定义在 $\mathbb R$ 上的两个可积函数，则称 $\int_{-\infty}^{\infty}{f(\tau)g(x-\tau)d\tau}$ 关于 $x$ 的函数为 $f(x)$ 与 $g(x)$ 的卷积与卷积类似，我们称数列 $c_n=\sum_{i=-\infty}^{\infty}{a_ib_{n-i}}$ 为数列 $a_n$ 与数列 $b_n$ 的离散卷积形式幂级数与幂级数一样可以进行运算，其加减运算即是将对应位的系数相加减，而其乘法运算结果定义为两个形式幂级数系数的离散卷积构成的形式幂级数形式幂级数存在乘法逆元当且仅当 $a_0\ne0$ ，且若存在，则逆元唯一后面的形式幂级数运算若无特殊说明，全部在 $\pmod{x^{n+1}}$ 意义下进行，也即为形式多项式记号与约定我们记以数列 $\{f_n\}$ 为系数的形式幂级数为 $F(x)$ 。我们记 $[x^n]F(x)$ 为 $F(x)$ 的 $n$ 次项系数。我们记 $f_ig_i$ 为 $f_i\times g_i$ ，而 $F(x)G(x)$ 为 $F(x)$ 与 $G(x)$ 的离散卷积。多项式乘法快速傅里叶变换我们知道，两个形式幂级数做乘法即为它们系数的离散卷积。假设我们已知 $F(x)$ 和 $G(x)$ 的系数，我们要求得 $H(x)=F(x)G(x)$根据定义：h_n=\sum_{i=0}^{n}{f_ig_{n-i}}\Rightarrow H(x)=\sum_{i=0}^{\infty}{\sum_{j=0}^{i}{f_jg_{i-j}x^i}}很显然，我们求出 $H(x)$ 一项的时间复杂度是 $\Theta(n)$ 的，求出 $n$ 项的时间复杂度是 $\Theta(n^2)$ 的，这肯定是不能接受的。我们来考虑怎样更快速地求得 $H(x)$ 。上面的运算是基于用系数来表示多项式的，事实上，由于 $n+1$ 个点可以唯一确定一个 $n$ 次多项式，我们可以改用 $n+1$ 个点来描述我们的多项式。并且由于我们并不关心形式幂级数的 $x$ 的取值，我们可以任意选取实数甚至虚数作为 $x$ 的值。这样做的好处是什么呢？我们发现，两个点值表达式相乘只需要将对应点的值相乘即可，也就是说，两个点值表达式做乘法运算是 $\Theta(n)$ 的！如果我们可以快速地将系数表达式转化成点值表达式，并快速地将点值表达式转化回来，就可以快速地完成多项式乘法。那么具体如何来做呢？我们先介绍一类神奇的数——单位根 $\omega$ 。单位根$n$ 次单位根是 $n$ 次幂为 $1$ 的复数。也即， $n$ 次单位根 $\omega_n$ 满足 $\omega_n^n=1$ 。由欧拉公式有 $\omega_n^k=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})$ 。在后文中，我们假设 $n$ 为 $2$ 的正整数次幂：于是单位根有这几个性质$\omega_n^{k+\frac n2}=-\omega_n^k$$\omega_{2n}^{2k}=\omega_n^k$$\omega_n^0=\omega_n^n=1$我们来简单证明一下这几个性质：$\omega_n^{k+\frac n2}=-\omega_n^k$\begin{align*} \omega_n^{k+\frac n2}&=\cos((k+\frac n2)\frac{2\pi}{n})+i\sin((k+\frac n2)\frac{2\pi}{n}) \\ &=\cos(k\times\frac{2\pi}{n}+\pi)+i\sin(k\times\frac{2\pi}{n}+\pi) \\ &=-(\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n})) \\ &=-\omega_n^k \end{align*}$\omega_{2n}^{2k}=\omega_n^k$\begin{align*} \omega_{2n}^{2k}&=\cos(2k\times\frac{2\pi}{2n})+i\sin(2k\times\frac{2\pi}{2n}) \\ &=\cos(k\times\frac{2\pi}{n})+i\sin(k\times\frac{2\pi}{n}) \\ &=\omega_n^k \end{align*}有了这两个性质，我们就能使用膜法了！快速傅里叶变换我们考虑将 $\omega_n$ 的 $0\sim n-1$ 次幂作为 $x$ 代入多项式 $F(x)$ 并求出点值。也即求出原多项式的离散傅里叶变换（DFT）我们先将 $F(x)$ 的各项按次数奇偶性分类：\begin{align*} F(x)&=\sum_{i=0}^{n-1}{f_ix^i} \\ &=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}+\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}} \\ \end{align*}令 $F_1(x)=\sum_{i=0}^{\frac n2-1}{f_{2i}x^{2i}}$ ， $F_2(x)=\sum_{i=0}^{\frac n2-1}{f_{2i+1}x^{2i+1}}$ ，则有 $F(x)=F_1(x^2)+xF_2(x^2)$ 。将 $\omega_n^k$ 代入 $x$ ：F(\omega_n^k)=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})再将 $\omega_n^{k+\frac n2}$ 代入 $x$ ：\begin{align*} F(\omega_n^{k+\frac n2})&=F_1(\omega_n^{2k+n})+\omega_n^{k+\frac n2}F_2(\omega_n^{2k+n}) \\ &=F_1(\omega_n^{2k}\times\omega_n^n)+(\omega_n^k\times\omega_{2n}^n)F_2(\omega_n^{2k}\times\omega_n^n) \\ &=F_1(\omega_n^{2k})-\omega_n^kF_2(\omega_n^{2k}) \end{align*}发现了吗？这是膜法！这两个式子间只有第二部分的符号有区别，也就是说，我们计算第一个式子的同时可以直接得到第二个式子的值！将这种奇偶分类求一半的操作递归下去，我们就得到了一个可以在 $\Theta(n\log n)$ 的时间复杂度内将多项式从系数表达式转化为以单位根各次幂为自变量的点值表达式的算法。快速傅里叶逆变换接下来我们再来考虑将这样的点值表达式转化回系数表达式的方法。也即离散傅里叶逆变换（IDFT）我们令 $\{y_0,y_1,y_2,\cdots,y_{n-1}\}$ 为 $\{f_0,f_1,f_2,\cdots,f_{n-1}\}$ 的离散傅里叶变换假设存在 $\{c_0,c_1,c_1,\cdots,c_{n-1}\}$ 满足 $c_k=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i}$也即 $Y(x)$ 在 $\omega_n^{-k}$ 处的点值，则有：\begin{align*} c_k&=\sum_{i=0}^{n-1}{y_i(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{(\sum_{j=0}^{n-1}{f_j(\omega_n^i)^j})(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_n^j)^i}(\omega_n^{-k})^i} \\ &=\sum_{i=0}^{n-1}{\sum_{j=0}^{n-1}{f_j(\omega_{n}^{j-k})^i}} \\ &=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}} \end{align*}令 $S(x)=\sum_{i=0}^{n-1}{x^i}$ ，将 $\omega_n^k(k\ne0)$ 代入：\because \begin{cases}\begin{align*} S(\omega_n^k)&=\sum_{i=0}^{n-1}{(\omega_n^k)^i} \\ \omega_n^kS(\omega_n^k)&=\sum_{i=1}^{n}{(\omega_n^k)^i} \\ \end{align*}\end{cases} \Rightarrow\omega_n^kS(\omega_n^k)-S(\omega_n^k)=(\omega_n^k)^n-1 \\ \therefore S(\omega_n^k)=\frac{(\omega_n^k)^n-1}{\omega_n^k-1}=0而当 $k=0$ 时显然 $S(\omega_n^0)=n$ 。接着来看之前的式子：c_k=\sum_{j=0}^{n-1}{f_j\sum_{i=0}^{n-1}{(\omega_n^{j-k})^i}}式子里面的 $\Sigma$ 当 $j\ne k$ 时值为 $0$ ，而 $j=k$ 时值为 $n$ 。因此有 $c_k=nf_k\Rightarrow f_k=\frac{c_k}{n}$于是只要对原多项式的离散傅里叶变换，以 $\omega_n^{-k}$ 为单位根做一次快速傅里叶变换，再将结果除以 $n$ 即可转化回原多项式。代码实现根据上面的理论可以很容易地写出快速傅里叶变换（FFT）的递归实现，但是一般使用时由于递归实现的常数过大，我们一般使用的是迭代实现的快速傅里叶变换。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N],b[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;b[i].re); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*b[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].re+0.1); return 0;&#125;优化三次变两次用刚刚所讲的内容做多项式乘法，需要使用三次 $\text{FFT}$ ：两次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。事实上有一个优化可以优化到只做一次 $\text{DFT}$ 和一次 $\text{IDFT}$ 。我们把 $G(x)$ 的系数放到 $F(x)$ 的虚部里，然后对 $F(x)$ 进行 $\text{DFT}$ ，将 $F(x)$ 平方后进行 $\text{IDFT}$ ，将虚部的系数除以 $2$ 即是答案。考虑为什么这样是对的：对于 $a$ 和 $b$ ，有 $(a+bi)^2=a^2-b^2+(2abi)$ ，因此虚部系数即为答案两倍。【例题】[Luogu3803] 多项式乘法 评测记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 2100010const double pi(acos(-1));struct comp &#123; double re,im; inline comp operator+(const comp&amp;x)const&#123; return(comp)&#123;re+x.re,im+x.im&#125;; &#125; inline comp operator-(const comp&amp;x)const&#123; return(comp)&#123;re-x.re,im-x.im&#125;; &#125; inline comp operator*(const comp&amp;x)const&#123; return(comp)&#123;re*x.re-im*x.im,re*x.im+im*x.re&#125;; &#125;&#125;a[N];inline void swap(comp&amp;a,comp&amp;b) &#123; comp tmp=a; a=b,b=tmp;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125;&#125;inline void IDFT(comp*a) &#123; comp wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=(comp)&#123;cos(pi/i),-sin(pi/i)&#125;; for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=(comp)&#123;1,0&#125;; for(int k=0;k&lt;i;++k,w=w*wt) &#123; x=a[j+k],y=w*a[i+j+k]; a[j+k]=x+y,a[i+j+k]=x-y; &#125; &#125; &#125; for(int i=0;i&lt;lmt;++i) a[i].re/=lmt,a[i].im/=lmt;&#125;int n,m;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%lf",&amp;a[i].re); for(int i=0;i&lt;=m;++i) scanf("%lf",&amp;a[i].im); getRev(n+m+2); DFT(a); for(int i=0;i&lt;lmt;++i) a[i]=a[i]*a[i]; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%.0lf ",a[i].im/2+0.1); return 0;&#125;MTT暂咕快速数论变换如果是在模意义下做运算，我们还有一种算法可以胜任，那就是快速数论变换（NTT）考虑到做快速傅里叶变换时我们将单位根代入求出点值，如果模意义下有与单位根性质类似的数，是否可以代替单位根完成一样的工作呢？答案是肯定的，这一类数是——原根 $g$ 。原根我们先给出阶的定义：若 $a\perp p$ 且 $p&gt;1$ ， $a$ 模 $p$ 的阶为满足 $a^n\equiv1\pmod{p}$ 的最小的 $n$ ，记为 $\delta_p(a)$ 。若 $p$ 为正整数， $a$ 是整数，且 $\delta_p(a)=\varphi(p)$ ，则 $a$ 为模 $p$ 的一个原根。（ $\varphi(n)$ 为小于等于 $n$ 的数中与 $n$ 互质的数的个数）原根有一些很有意思的性质：若模 $p$ 存在原根，则其一定有 $\varphi(\varphi(p))$ 个原根。若 $p$ 为质数， $g$ 为 $p$ 的一个原根，则 $g^i\pmod{p}$ 对于不同的 $i\in[1,p)$ 值都不同同时原根在模意义下与单位根有相同的性质，因此我们可以使用原根代替单位根在模意义下做快速数论变换。代码实现类似快速傅里叶变换，只把里面的单位根相应地换成原根，并注意取模即可。【例题】[Luogu3803] 多项式乘法 评测记录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#define MOD 998244353#define N 2100010typedef long long i64;inline void swap(int&amp;a,int&amp;b) &#123; int tmp(a); a=b,b=tmp;&#125;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt,l,r[N];inline void getRev(int n) &#123; lmt=1,l=0; while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1));&#125;inline void DFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(3,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125;&#125;inline void IDFT(int*a) &#123; int wt,w,x,y; for(int i=0;i&lt;lmt;++i) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int i=1;i&lt;lmt;i&lt;&lt;=1) &#123; wt=pow(332748118,(MOD-1)/(i&lt;&lt;1)); for(int j=0,step=i&lt;&lt;1;j&lt;lmt;j+=step) &#123; w=1; for(int k=0;k&lt;i;++k,w=(i64)w*wt%MOD) &#123; x=a[j+k],y=(i64)w*a[i+j+k]%MOD; a[j+k]=(x+y)%MOD,a[i+j+k]=(x-y+MOD)%MOD; &#125; &#125; &#125; int bk(pow(lmt,MOD-2)); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N];int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); getRev(n+m+2); DFT(a); DFT(b); for(int i=0;i&lt;lmt;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;预处理原根我们来考虑一个优化：在 $\text{NTT}$ 的过程中我们多次使用了原根的各次幂，如果我们能将原根的各次幂预处理出来，而不是每次使用都计算一遍，就能有很大的常数优化！在多项式乘法中我们只做了 $3$ 次 $\text{NTT}$ ，所以看上去常数优化并不明显。但是在后面的内容中，随着 $\text{NTT}$ 次数的增多，预处理原根的优化效果将愈发明显。【例题】[Luogu3803] 多项式乘法 评测记录：$1.83s\rightarrow1.3s$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::reverse;#define MOD 998244353#define N 2100010typedef long long i64;typedef unsigned long long u64;inline int pow(int a,int b) &#123; int ans(1); while(b) &#123; ans=b&amp;1?(i64)ans*a%MOD:ans; a=(i64)a*a%MOD; b&gt;&gt;=1; &#125; return ans;&#125;int lmt(1),r[N],w[N];inline int getLen(int n) &#123; return 1&lt;&lt;(32-__builtin_clz(n));&#125;inline void init(int n) &#123; int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(int i=1;i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); int wn(pow(3,(MOD-1)&gt;&gt;l)); w[lmt&gt;&gt;1]=1; for(int i=(lmt&gt;&gt;1)+1;i&lt;lmt;++i) w[i]=(i64)w[i-1]*wn%MOD; for(int i=(lmt&gt;&gt;1)-1;i;--i) w[i]=w[i&lt;&lt;1]; lmt=l;&#125;inline void DFT(int*a,int l) &#123; static u64 tmp[N]; int u(lmt-__builtin_ctz(l)),t; for(int i=0;i&lt;l;++i) tmp[r[i]&gt;&gt;u]=a[i]; for(int i=1;i&lt;l;i&lt;&lt;=1) for(int j=0,step=i&lt;&lt;1;j&lt;l;j+=step) for(int k=0;k&lt;i;++k) &#123; t=tmp[i+j+k]*w[i+k]%MOD; tmp[i+j+k]=tmp[j+k]+MOD-t; tmp[j+k]+=t; &#125; for(int i=0;i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,int l) &#123; reverse(a+1,a+l); DFT(a,l); int bk(MOD-(MOD-1)/l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*bk%MOD;&#125;int n,m,a[N],b[N],l;int main() &#123; scanf("%d%d",&amp;n,&amp;m); init(n+m+2); for(int i=0;i&lt;=n;++i) scanf("%d",a+i); for(int i=0;i&lt;=m;++i) scanf("%d",b+i); l=getLen(n+m+2); DFT(a,l); DFT(b,l); for(int i=0;i&lt;l;++i) a[i]=(i64)a[i]*b[i]%MOD; IDFT(a,l); for(int i=0;i&lt;=n+m;++i) printf("%d ",a[i]); return 0;&#125;多项式求导 &amp; 积分多项式求导稍微会一点微积分的应该都知道幂法则：\frac{d(x^n)}{dx}=nx^{n-1}以及和法则：\frac{d(f(x)+g(x))}{dx}=\frac{d(f(x))}{dx}+\frac{d(g(x))}{dx}因此多项式求导就是将每一项求导后相加，时间复杂度 $\Theta(n)$ 。代码实现12345inline void getDer(int*a,int*b,int deg) &#123; for(int i=0;i+1&lt;deg;++i) b[i]=(i64)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;多项式积分与求导同理，有积分公式：\int x^ndx=\frac{x^{n+1}}{n+1}+C由不定积分的性质有：\int(f(x)+g(x))dx=\int f(x)dx+\int g(x)dx于是多项式积分也可以每一项积分后相加，时间复杂度 $\Theta(n)$ 。代码实现12345inline void getInt(int*a,int*b,int deg) &#123; for(int i=1;i&lt;deg;++i) b[i]=(i64)a[i-1]*inv[i]%MOD; b[0]=0;&#125;多项式求逆我们已经知道，当 $f_0\ne0$ 时 $F(x)$ 存在唯一乘法逆元。接下来我们就探讨一下如何求得一个多项式的乘法逆元。考虑已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $F(x)G(x)\equiv1\pmod{x^n}$如果 $F(x)$ 只有常数项，答案显然是常数项的乘法逆元，在此基础上，我们考虑倍增地求出整个 $G(x)$ 。假设我们已经求出了一个 $G’(x)$ 满足：F(x)G'(x)\equiv1\pmod{x^{\lceil\frac{n}{2}\rceil}}由于 $F(x)G(x)\equiv1\pmod{x^n}$ ，有：(G'(x)-G(x))\equiv0\pmod{x^{\lceil\frac n2\rceil}}两边同时平方，有：(G'(x)-G(x))^2\equiv0\pmod{x^n}G'(x)^2+G(x)^2-2G'(x)G(x)\equiv0\pmod{x^n}F(x)G'(x)^2+G(x)-2G'(x)\equiv0\pmod{x^n}G(x)\equiv2G'(x)-F(x)G'(x)^2\pmod{x^n}于是我们得到了从 $G’(x)$ 推到 $G(x)$ 的方式。时间复杂度 $T(n)=T(\frac n2)+\Theta(n\log n)$ ，由主定理有 $T(n)=\Theta(n\log n)$ 。代码实现123456789101112131415161718void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); int len=getLen(deg&lt;&lt;1); for(int i=0;i&lt;deg;++i) tmp[i]=a[i]; for(int i=deg;i&lt;len;++i) tmp[i]=0; DFT(tmp,len); DFT(b,len); for(int i=0;i&lt;len;++i) b[i]=(2ll-(i64)b[i]*tmp[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,len); for(int i=deg;i&lt;len;++i) b[i]=0; &#125;&#125;多项式开根已知多项式 $F(x)$ ，要求出一个多项式 $G(x)$ 满足 $G(x)^2\equiv F(x)\pmod{x^n}$ 。同样如果 $F(x)$ 只有常数项，答案显然是常数项的二次剩余，在此基础上我们仍然考虑倍增。假设我们已经求出了一个 $G’(x)$ 满足：G'(x)^2\equiv F(x)\pmod{x^{\lceil\frac n2\rceil}}则有：G'(x)^2-G(x)^2\equiv0\pmod(x^{\lceil\frac n2\rceil})G'(x)^4+G(x)^4-2G'(x)^2G(x)^2\equiv0\pmod{x^n}G'(x)^4+G(x)^4+2G'(x)^2G(x)^2\equiv4G'(x)^2G(x)^2\pmod{x^n}G'(x)^2+G(x)^2\equiv2G'(x)G(x)\pmod{x^n}G(x)\equiv\frac{G'(x)^2+G(x)^2}{2G'(x)}\pod{x^n}因此有 $G(x)\equiv\frac{G’(x)^2+F(x)}{2G’(x)}\pmod{x^n}$ ，于是可以倍增，时间复杂度同样是 $\Theta(n\log n)$ 。代码实现12345678910111213141516171819202122/// 假设常数项为 1void getSqrt(int*a,int*b,int deg) &#123; if(deg==1) b[0]=1; else &#123; static int tmpA[N],tmpB[N]; getSqrt(a,b,(deg+1)&gt;&gt;1); getInv(b,tmpB,deg); int len=getLen(deg&lt;&lt;1); for(int i=0;i&lt;deg;++i) tmpA[i]=a[i]; for(int i=deg;i&lt;len;++i) tmpA[i]=0; DFT(tmpA,len); DFT(tmpB,len); for(int i=0;i&lt;len;++i) tmpB[i]=(i64)tmpB[i]*tmpA[i]%MOD; IDFT(tmpB,len); for(int i=0;i&lt;deg;++i) b[i]=(i64)inv[2]*(b[i]+tmpB[i])%MOD; for(int i=0;i&lt;len;++i) tmpB[i]=0; &#125;&#125;多项式反三角函数多项式对数函数多项式指数函数多项式三角函数]]></content>
      <tags>
        <tag>资料</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5373]多项式复合函数]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5373-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此处题面前言这是这道题复杂度比较正确的一个常数奇大无比的算法，源自 $\text{R.P.BRENT}$ 和 $\text{H.T.KUNG}$ 在 $1978$ 年发表的论文（也就是题面里说的那个全嘤文pdf），我在 $\text{5月15日}$ 蒯到手之后肝了一个晚上，在神犇 rqy 的帮助下成功地写出了66分点名被卡做法awsl，后来研究别人代码的时候发现了 预处理原根 这种神奇操作，于是总算成功AC。正文这种做法基于对外层函数的泰勒展开，我们把内层函数 $G$ 的前 $m$ 项拆出来，记作 $G_m$ ，把剩下的记作 $G_r$ 。(这个 $m$ 到底取多少我们分析复杂度的时候再确定)然后进行泰勒展开：F(G)=F(G_m+G_r)=F(G_m)+F'(G_m)G_r+\frac12F''(G_m)G_r^2+\cdots由于我们只需要求 $F(G)$ 前 $n+1$ 项的值，所以我们只需要知道这个展开式前 $\lceil\frac nm\rceil$ 项的值即可，即：令 $l=\lceil\frac nm\rceil$ ，有F(G(x))\equiv F(G_m(x))+F'(G_m(x))G_r(x)+\cdots+\frac1{l!}F^{(l)}(G_m(x))G_r^l(x)\pmod{x^{n+1}}因此我们只要计算出 $F(G_m(x))$ 的各阶导和 $G_r(x)$ 的各次幂，就可以累加得到 $F(G(x))$ 了。$G_r(x)$ 只需要从 $G(x)$ 中截出来即可，那么如何计算 $F(G_m(x))$ 呢？考虑外层函数最高次项次数为 $2$ 的幂的情况，即：令 $F(x)=f_0+\cdots+f_jx^j$ 且 $j$ 为 $2$ 的正整数次幂，有F(G)=F_1(G)+G^{\frac j2}\cdot F_2(G)这里 $F_1$ 和 $F_2$ 都是最高次项次数为 $\frac j2$ 的多项式，这样一来我们就能递归地计算 $F(G_m(x))$ 了。考虑这一步的时间复杂度：我们令 $M(n)$ 为完成两个 $n$ 次多项式的乘法的时间，即： $M(n)=O(n\log n)$我们设 $T(j)$ 为计算 $G^{\frac j2}$ 和 $F(G)$ 的时间，则有T(j)\leqslant2T(\frac j2)+O(M(\min(jm,n)))我们令 $r$ 为满足 $n\cdot2^k\leqslant jm$ 的最大的 $k$ ，则有T(j)=O(M(n)+2M(n)+\cdots+2^rM(n))+2^{r+1}T(\frac{j}{2^{r+1}})T(j)\leqslant O(\frac{jmM(n)}{n})+(\frac{2jm}{n})T(\frac{j}{2^{r+1}})又因为 $n\cdot2^{r+1}&gt;jm$ ，有T(\frac{j}{2^{r+1}})=O(M(\frac{jm}{2^{r+1}})+2M(\frac{jm}{2^{r+2}})+\cdots)=O(M(n)+2M(\lceil\frac n2\rceil)+4M(\lceil\frac n4\rceil)+\cdots)=O(\log nM(n))因此，我们有 $T(j)=O(\frac{jm\log n}{n}M(n))$ ，所以求解 $F(G_m(x))$ 的时间复杂度为 $O(mn\log^2n)$ 。我们再来考虑对 $F(G_m(x))$ 求导：令 $H(x)=F(G(x))$根据复合函数求导法则，我们有 $H’(x)=F’(G(x))\cdot G’(x)$ ，因此 $F’(G_m(x))=H’(x)\cdot(G_m’(x))^{-1}$ ，由此我们可以计算出泰勒展开式中某一项之后与之前的结果累加得到 $H(x)$ ，同时计算出下一项中 $F(G_m(x))$ 的对应阶导。每计算一次导数的时间复杂度是 $O(n\log n)$ 的，因此计算出所有项的时间复杂度是 $O(l\cdot n\log n)=O(\frac{n^2\log n}{m})$ 。我们已经得到了 $F(G_m(x))$ 的各阶导，而 $G_r(x)$ 的各次幂只需要挨个乘起来即可，时间复杂度也是 $O(\frac{n^2\log n}{m})$ 的。之后各项的计算和累加同样是 $O(\frac{n^2\log n}{m})$ 的，因此这个算法的总复杂度为 $O(mn\log^2n+\frac{n^2\log n}{m})$ 。我们考虑 $m$ 的取值：根据均值不等式，当 $mn\log^2n\sim\frac{n^2\log n}{m}$ 时时间复杂度最优，因此解得当 $m\sim\sqrt{\frac{n}{\log n}}$ 时有最优时间复杂度 $O((n\log n)^{1.5})$ 。最后还是附上参考代码比较好，这个东西由于常数原因必须 预处理原根 才能卡过去，而且好像也没有什么实际用处。。就当是练习码力了 2333123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206#pragma GCC optimize("Ofast,inline")#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native")#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define MOD 998244353#define G 332748118#define N 262210#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(v==0) *pp++=48; else &#123; re int tp(0); while(v) st[++tp]=v%10+48,v/=10; while(tp) *pp++=st[tp--]; &#125; *pp++=32;&#125;inline int pow(re int a,re int b) &#123; re int ans(1); while(b) ans=b&amp;1?(ll)ans*a%MOD:ans,a=(ll)a*a%MOD,b&gt;&gt;=1; return ans;&#125;int inv[N],ifac[N];inline void pre(re int n) &#123; inv[1]=ifac[0]=1; for(re int i(2);i&lt;=n;++i) inv[i]=(ll)(MOD-MOD/i)*inv[MOD%i]%MOD; for(re int i(1);i&lt;=n;++i) ifac[i]=(ll)ifac[i-1]*inv[i]%MOD;&#125;inline int getLen(re int t) &#123; return 1&lt;&lt;(32-__builtin_clz(t));&#125;int lmt(1),r[N],w[N];inline void init(re int n) &#123; re int l(0); while(lmt&lt;=n) lmt&lt;&lt;=1,++l; for(re int i(1);i&lt;lmt;++i) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(l-1)); re int wn(pow(3,(MOD-1)/lmt)); w[lmt&gt;&gt;1]=1; for(re int i((lmt&gt;&gt;1)+1);i&lt;lmt;++i) w[i]=(ll)w[i-1]*wn%MOD; for(re int i((lmt&gt;&gt;1)-1);i;--i) w[i]=w[i&lt;&lt;1];&#125;inline void DFT(int*a,re int l) &#123; static unsigned long long tmp[N]; re int u(__builtin_ctz(lmt)-__builtin_ctz(l)),t; for(re int i(0);i&lt;l;++i) tmp[i]=(a[r[i]&gt;&gt;u])%MOD; for(re int i(1);i&lt;l;i&lt;&lt;=1) for(re int j(0),step(i&lt;&lt;1);j&lt;l;j+=step) for(re int k(0);k&lt;i;++k) t=(ll)w[i+k]*tmp[i+j+k]%MOD, tmp[i+j+k]=tmp[j+k]+MOD-t, tmp[j+k]+=t; for(re int i(0);i&lt;l;++i) a[i]=tmp[i]%MOD;&#125;inline void IDFT(int*a,re int l) &#123; std::reverse(a+1,a+l);DFT(a,l); re int bk(MOD-(MOD-1)/l); for(re int i(0);i&lt;l;++i) a[i]=(ll)a[i]*bk%MOD;&#125;int n,m;int a[N],b[N],c[N];void getInv(int*a,int*b,int deg) &#123; if(deg==1) b[0]=pow(a[0],MOD-2); else &#123; static int tmp[N]; getInv(a,b,(deg+1)&gt;&gt;1); re int l(getLen(deg&lt;&lt;1)); for(re int i(0);i&lt;l;++i) tmp[i]=i&lt;deg?a[i]:0; DFT(tmp,l),DFT(b,l); for(re int i(0);i&lt;l;++i) b[i]=(2ll-(ll)tmp[i]*b[i]%MOD+MOD)%MOD*b[i]%MOD; IDFT(b,l); for(re int i(deg);i&lt;l;++i) b[i]=0; &#125;&#125;inline void getDer(int*a,int*b,int deg) &#123; for(re int i(0);i+1&lt;deg;++i) b[i]=(ll)a[i+1]*(i+1)%MOD; b[deg-1]=0;&#125;void getComp(int*a,int*b,int k,int m,int&amp;n,int*c,int*d) &#123; if(k==1) &#123; for(re int i(0);i&lt;m;++i) c[i]=0,d[i]=b[i]; n=m,c[0]=a[0]; &#125; else &#123; static int t1[N],t2[N]; int nl(n),nr(n),*cl,*cr,*dl,*dr; getComp(a,b,k&gt;&gt;1,m,nl,cl=c,dl=d); getComp(a+(k&gt;&gt;1),b,(k+1)&gt;&gt;1,m,nr,cr=c+nl,dr=d+nl); n=std::min(n,nl+nr-1); re int _l(getLen(nl+nr)); for(re int i(0);i&lt;_l;++i) t1[i]=i&lt;nl?dl[i]:0; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?cr[i]:0; DFT(t1,_l),DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) c[i]=((i&lt;nl?cl[i]:0)+t2[i])%MOD; for(re int i(0);i&lt;_l;++i) t2[i]=i&lt;nr?dr[i]:0; DFT(t2,_l); for(re int i(0);i&lt;_l;++i) t2[i]=(ll)t1[i]*t2[i]%MOD; IDFT(t2,_l); for(re int i(0);i&lt;n;++i) d[i]=t2[i]; &#125;&#125;inline void getComp(int*a,int*b,int*c,int deg) &#123; static int ts[N],ps[N],c0[N],_t1[N],idM[N]; int M(std::max((int)ceil(sqrt(deg/log2(deg))*2.5),2)),_n(deg+deg/M); getComp(a,b,deg,M,_n,c0,_t1); re int _l(getLen(_n+deg)); for(re int i(_n);i&lt;_l;++i) c0[i]=0; for(re int i(0);i&lt;_l;++i) ps[i]=i==0; for(re int i(0);i&lt;_l;++i) ts[i]=M&lt;=i&amp;&amp;i&lt;deg?b[i]:0; getDer(b,_t1,M); for(re int i(M-1);i&lt;deg;++i) _t1[i]=0; /// Important!!! getInv(_t1,idM,deg); for(int i=deg;i&lt;_l;++i) idM[i]=0; DFT(ts,_l),DFT(idM,_l); for(re int t(0);t*M&lt;deg;++t) &#123; for(re int i(0);i&lt;_l;++i) _t1[i]=i&lt;deg?c0[i]:0; DFT(ps,_l),DFT(_t1,_l); for(re int i(0);i&lt;_l;++i) _t1[i]=(ll)_t1[i]*ps[i]%MOD, ps[i]=(ll)ps[i]*ts[i]%MOD; IDFT(ps,_l),IDFT(_t1,_l); for(re int i(deg);i&lt;_l;++i) ps[i]=0; for(re int i(0);i&lt;deg;++i) c[i]=((ll)_t1[i]*ifac[t]+c[i])%MOD; getDer(c0,c0,_n); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; DFT(c0,_l); for(re int i(0);i&lt;_l;++i) c0[i]=(ll)c0[i]*idM[i]%MOD; IDFT(c0,_l); for(re int i(_n-1);i&lt;_l;++i) c0[i]=0; &#125;&#125;int main() &#123; n=read(),m=read(); for(re int i(0);i&lt;=n;++i) a[i]=read(); for(re int i(0);i&lt;=m;++i) b[i]=read(); m=(n&gt;m?n:m)+1; pre(m);init(m*5); getComp(a,b,c,m); for(re int i(0);i&lt;=n;++i) write(c[i]); fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu5431]乘法逆元2]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu5431-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832%2F</url>
    <content type="text"><![CDATA[此处题面题外话其实我觉得这道题的考点是快读.jpg没有快读的后果正文\large\text{以下运算均在模 }p\text{ 意义下进行}\large\sum_{i=1}^{n}{\frac{k^i}{a_i}}=\sum_{i=1}^{n}{k^i\cdot a_i^{-1}}我们考虑先求出 $a$ 序列的前缀积，记为 $s$ ：\large s_i=\prod_{j=1}^{i}{a_j}记 $a$ 序列前缀积的逆元为 $t$ ，此时如果我们知道这个序列，我们就可以知道 $a$ 中任意一个数的逆元：\large a_i^{-1}=s_{i-1}\cdot t_i而 前缀积的逆元 就等于 逆元的前缀积 ，所以我们只要求出 $t_n$ 就可以线性递推出整个 $t$ 序列了：\large t_n=s_n^{p-2}\large t_i=a_{i+1}\cdot t_{i+1}这样我们就求得了 $a$ 序列的逆元，再用秦九韶算法就能在线性时间内算出题目的式子了。参考代码前方极差码风警告！123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#define N 5000010#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++typedef long long ll;static char buf[100000],*pa(buf),*pb(buf);inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline int pow(int a,int b,int p) &#123; int ans(1); while(b) ans=b&amp;1?(ll)ans*a%p:ans,a=(ll)a*a%p,b&gt;&gt;=1; return ans;&#125;int n,p,k,a[N],s[N]=&#123;1&#125;,inv_s[N],ans;int main() &#123; n=read(),p=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(),s[i]=(ll)s[i-1]*a[i]%p; inv_s[n]=pow(s[n],p-2,p); for(int i=n-1;i;--i) inv_s[i]=(ll)inv_s[i+1]*a[i+1]%p; for(int i=n;i;--i) ans=((ll)inv_s[i]*s[i-1]%p+ans)*k%p; printf("%d",ans); return 0;&#125;5e6 的输入，千万记得快读！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu4315]月下“毛景树”]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu4315-%E6%9C%88%E4%B8%8B%E2%80%9C%E6%AF%9B%E6%99%AF%E6%A0%91%E2%80%9D%2F</url>
    <content type="text"><![CDATA[此处题面前言这道题其实就是把 单点修改 、 区间染色 、 区间加 以及 区间最大值 这四种基本的序列操作出到了树上，很明显是用 树链剖分 + 线段树 解决，但是因为我太蒻了，树剖码到一半码不下去了，所以就全删了改码了个 Link/Cut Tree ，顺便 拿了这个题的RANK1 。边转点树剖的边转点大家都知道是把每条边的权值给深度较深的那个点，但是我们不能在 LCT 上也这么做，因为有 makeroot 操作的存在， LCT 上结点的父子关系不是确定的，所以我们采取建立 虚拟结点 的方式：1234// 第 i 条边连接 u 和 v 这两个点，权值为 wval[n+i]=maxv[n+i]=w;link(u,n+i);link(n+i,v);用 $n$ + $i$ 号结点表示第 $i$ 条边，再用它去分别连接原先的边连接的结点。需要注意的地方这种写法会产生 $2n$ 个结点， 空间千万要开够！标记上传下传的时候要分 原结点 和 虚拟结点 两种情况讨论！标记这道题我们只需要维护一个 区间染色 的标记和一个 区间加 的标记就行，我多维护了一个 siz 数组储存子树内 虚拟结点 的数量，上传时判断当前结点是不是 虚拟结点 就行。标记下传的时候要 先下传区间染色，再下传区间加 ，若是先下传了 区间加 ，后面 区间染色 的时候就会 覆盖掉最后附上此题 $AC$ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#define N 200010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re register#define gc pa==pb&amp;&amp;(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++inline int max(int a,int b)&#123;return b&lt;a?a:b;&#125;inline void swap(int&amp;a,int&amp;b)&#123;int tmp(a);a=b,b=tmp;&#125;static char buf[100000],*pa(buf),*pb(buf);static char pbuf[3000000],*pp(pbuf),st[15];inline char gtc() &#123; re char c(gc); while(c!='S'&amp;&amp;c!='h'&amp;&amp;c!='o'&amp;&amp;c!='d'&amp;&amp;c!='a') c=gc; return c;&#125;inline int read() &#123; re int x(0);re char c(gc); while(c&lt;'0'||c&gt;'9')c=gc; while(c&gt;='0'&amp;&amp;c&lt;='9') x=x*10+c-48,c=gc; return x;&#125;inline void write(re int v) &#123; if(!v) *pp++=48; else &#123; re char*tp(st); while(v) *++tp=v%10+48,v/=10; while(tp!=st) *pp++=*tp--; &#125; *pp++='\n';&#125;int n,u,v,w;char opt;int ch[N][2],fa[N],rev[N],val[N],maxv[N],ass[N],addv[N],siz[N];inline void assign(int x,int y)&#123;val[x]=x&gt;n?y:0,maxv[x]=siz[x]&gt;0?y:0,addv[x]=0,ass[x]=y;&#125;inline void add(int x,int y)&#123;val[x]+=x&gt;n?y:0,maxv[x]+=siz[x]&gt;0?y:0,addv[x]+=siz[x]&gt;0?y:0;&#125;inline void up(int x)&#123;siz[x]=siz[lc(x)]+siz[rc(x)]+(x&gt;n),maxv[x]=max(val[x],max(maxv[lc(x)],maxv[rc(x)]));&#125;inline void down(int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,rev[x]=0,swap(lc(x),rc(x)); if(ass[x]) assign(lc(x),ass[x]),assign(rc(x),ass[x]),ass[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(int x) &#123; int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][k^1],ch[x][k^1]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z,up(y);&#125;inline void splay(int x) &#123; int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;up(x);&#125;inline void access(int x)&#123;for(int y(0);x;x=fa[y=x])splay(x),rc(x)=y,up(x);&#125;inline void mrt(int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void split(int x,int y)&#123;mrt(x),access(y),splay(y);&#125;inline void link(int x,int y)&#123;mrt(x),fa[x]=y;&#125;int main() &#123; n=read(); for(re int i(1);i&lt;n;++i) siz[n+i]=1; for(re int i(1);i&lt;n;++i) u=read(),v=read(),val[n+i]=maxv[n+i]=read(),link(u,n+i),link(n+i,v); opt=gtc(); while(opt!='S') &#123; u=read(),v=read(); switch(opt) &#123; case'h': access(n+u),splay(n+u),val[n+u]=v; break; case'o': split(u,v),assign(v,read()); break; case'd': split(u,v),add(v,read()); break; case'a': split(u,v),write(maxv[v]); &#125; opt=gtc(); &#125; fwrite(pbuf,1,pp-pbuf,stdout); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【置顶】学习资料]]></title>
    <url>%2F%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[收集的一些资料，留给自己慢慢啃。各路OJ洛谷、bzoj、POJ、UOJ、LibreOJ、51Nod、OIH、评测鸭、hihoCoder、OHO-OJ、Vijos、ZHZXOJ、ZOJ博文索引yzhang、bztMinamoto、自为风月马前卒、JasonZhan、huyufeifei、xehoth、饕餮传奇、Venus、yyb、rqy、Mrsrz、xht37、Victor、fcwww、EI、诗乃、Siyuan、zzq、zkw数据结构猫树、zkw线段树、Leafy Tree、Link-Cut Tree、树套树、后缀数组、回文自动机算法分治、动态dp、生成函数、计算几何其它OI Wiki、算法可视化、SAM可视化、题号查找器、图可视化、OEIS、MaHua在线Markdown编辑器、矩阵乘法、图床搭建、MiNa]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu3372]线段树1]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu3372-%E7%BA%BF%E6%AE%B5%E6%A0%911%2F</url>
    <content type="text"><![CDATA[此处题面去了 WC2019 的同学应该对 指令集 有些印象，没去的同学 ( 比如我 ) 可能也通过一些途径了解到了这个暴力踩标程的毒瘤 ( 据说现场踩 Ynoi五彩斑斓的世界 ) 。但是由于我太弱，实在过不了那道题 dllxl Orz ，所以我就来拿这道题练手了。一、指令集是什么？其实就是压位，常用的是压256位。也有能压512位的，但大部分情况不支持 ( 硬件 + 软件 ) 。二、它为什么快？就像压位高精会比裸高精快， bitset 比 bool数组 快一样，你把8个32位的 int 压成一个256位的玩意儿，每次操作可以看成是同时对8个 int 进行操作 ( 但其实并不是这样 ) ，所以理论上常数会是原来的 $\frac{1}{8}$ ( 但其实做不到 $\frac{1}{8}$ ) 。三、它要怎么用？请自行摸索首先你需要 immintrin.h 库，里面啥都有然后再在程序前加上 #pragma GCC target(&quot;avx,avx2&quot;) ，这样你就可以把你的 int 啊 long long 啊什么的压成 __m256i ，把 float 压成 __m256 ，还能把 double 压成 __m256d 。什么你问我具体怎么做？我不知道啊.jpg这里是连快读都没用的$O\left(n^2\right)$暴力评测记录。最后附上这道题的程序，想学学指令集的可以看看：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#pragma GCC optimize("Ofast,fast-math")#pragma GCC target("avx,avx2")#include &lt;cstdio&gt;#include &lt;immintrin.h&gt;int n,m,num,x[5],opt,p,q,k;__m256i a[25010];inline void add(int l,int r,int v) &#123; while(((l-1)&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1]+=v,++l; if(l==r+1)return; while((r&amp;3)&amp;&amp;l&lt;=r)((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1]+=v,--r; if(l==r+1)return; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(v,v,v,v); while(l&lt;=r)a[l]=_mm256_add_epi64(a[l],s),++l;&#125;inline long long query(int l,int r) &#123; long long ans(0); while(((l-1)&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(l&gt;&gt;2)+1))[(l&amp;3)-1],++l; if(l==r+1)return ans; while((r&amp;3)&amp;&amp;l&lt;=r)ans+=((long long*)(a+(r&gt;&gt;2)+1))[(r&amp;3)-1],--r; if(l==r+1)return ans; l=(l&gt;&gt;2)+1,r&gt;&gt;=2; __m256i s=_mm256_set_epi64x(0,0,0,0); while(l&lt;=r)s=_mm256_add_epi64(a[l],s),++l; for(int i=0;i&lt;4;++i) ans+=((long long*)&amp;s)[i]; return ans;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m);num=n&gt;&gt;2; for(int i=1;i&lt;=num;++i) &#123; for(int j=1;j&lt;=4;++j) scanf("%d",x+j); a[i]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); &#125; for(int i=1;i&lt;=(n&amp;3);++i) scanf("%d",x+i); a[++num]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]); while(m--) &#123; scanf("%d%d%d",&amp;opt,&amp;p,&amp;q); if(opt==1) scanf("%d",&amp;k),add(p,q,k); else printf("%lld\n",query(p,q)); &#125; return 0;&#125;这道题要开 long long ，如果是 int 的话程序第一句的 Ofast 优化去掉也能过！]]></content>
      <tags>
        <tag>题解</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[JLOI2014]松鼠的新家]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-JLOI2014-%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[此处题面由于树上两点路径唯一，维尼的路线也是唯一的，因此我们只要 统计维尼经过每个点的次数 即可。而树上路径又跟 LCA 什么的有关，因此这道题的做法就多种多样了。由于只有一次询问，比较容易想到的做法是 树上差分 后求 LCA 轻松搞定。再想深一点你会发现这道题简直就是 树链剖分 的板子，再加上这道题不用维护什么子树信息，所以 树链剖分 能做 Link/Cut Tree 当然也能做！需要注意的几点：这道题 LCT 得卡常，写的时候注意不要太飘；由于两条链相交的点会被重复计算，因此每次加的时候链头链尾要有一个减 1 (我是链尾)；最后一个点是不需要准备糖果的！输出答案的时候记得把标记都下放了 (我是先 makeroot 再输出) 。1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;cstdio&gt;#define N 300010#define lc(x) ch[x][0]#define rc(x) ch[x][1]#define re registerinline void swap(re int&amp;a,re int&amp;b)&#123;re int tmp(a);a=b,b=tmp;&#125;int ch[N][2],fa[N],rev[N],val[N],addv[N];inline void add(re int x,re int y)&#123;val[x]+=y,addv[x]+=y;&#125;inline void down(re int x) &#123; if(rev[x]) rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0; if(addv[x]) add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;&#125;inline int nrt(re int x)&#123;return x==lc(fa[x])||x==rc(fa[x]);&#125;void psa(int x)&#123;if(nrt(x))psa(fa[x]);down(x);&#125;inline void rotate(re int x) &#123; re int y(fa[x]),z(fa[y]),k(x==rc(y)); ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x; if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;&#125;inline void splay(re int x) &#123; re int y,z; for(psa(x);nrt(x);rotate(x)) &#123;y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);&#125;&#125;inline void access(re int x)&#123;for(re int y(0);x;x=fa[y=x])splay(x),rc(x)=y;&#125;inline void mrt(re int x)&#123;access(x),splay(x),rev[x]^=1;&#125;inline void link(re int x,re int y)&#123;mrt(x),fa[x]=y;&#125;int n,a[N],x,y;int main() &#123; scanf("%d",&amp;n); for(re int i(1);i&lt;=n;++i) scanf("%d",a+i); for(re int i(1);i&lt;n;++i) scanf("%d%d",&amp;x,&amp;y),link(x,y); for(re int i(1);i&lt;n;++i) --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1); for(re int i(1);i&lt;=n;++i) mrt(i),printf("%d\n",val[i]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Link/Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[SDOI2011]染色]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-SDOI2011-%E6%9F%93%E8%89%B2%2F</url>
    <content type="text"><![CDATA[此处题面这道题的做法其实已经很明显了， 树链剖分 + 线段树 ，只是看到区间赋值心血来潮想用 珂朵莉树 水，结果就过了╮(╯▽╰)╭操作 1 就是 区间推平 ( assign ) ，操作 2 可以像找 最近公共祖先 ( LCA ) 一样一边往上方跳一边统计，由于珂朵莉树的结点存储的是一段值相同的连续区间，我们只需要记录上一次访问的结点的值与当前结点的值比较，若不同则更新并计数。值得注意的 $3$ 点：由于我们是统计链上的连续段，所以我们应从深度大的结点往小的枚举。由于我们是从链的两端分别往上跳，所以我们需要分别记录两边上次访问的结点的值。最后处于同一条链上时，需要考虑两端的值相同的情况。最后放上 $AC$ 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include &lt;cstdio&gt;#include &lt;set&gt;using std::set;#define N 100010struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V)&#123;&#125; inline int operator&lt;(const node&amp;x)const&#123;return l&lt;x.l;&#125;&#125;;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;inline IT split(int pos) &#123; IT it(--s.upper_bound(node(pos))); if(it-&gt;l==pos) return it; int L(it-&gt;l),R(it-&gt;r),V(it-&gt;v); s.erase(it),s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;inline void assign(int l,int r,int v) &#123; IT itr(split(r+1)),itl(split(l)); s.erase(itl,itr);s.insert(node(l,r,v));&#125;int n,m,a[N],x,y,z;char opt;int e,bg[N],nx[N&lt;&lt;1],to[N&lt;&lt;1];inline void link(int u,int v)&#123;to[++e]=v,nx[e]=bg[u],bg[u]=e;&#125;int fa[N],dep[N],siz[N],ws[N];void dfs1(int now,int f) &#123; fa[now]=f,dep[now]=dep[f]+1,siz[now]=1; int mx(-1); for(int i=bg[now];i;i=nx[i]) if(to[i]!=f) &#123; dfs1(to[i],now); siz[now]+=siz[to[i]]; if(siz[to[i]]&gt;mx) mx=siz[to[i]],ws[now]=to[i]; &#125;&#125;int cnt,top[N],id[N],wt[N];void dfs2(int now,int tp) &#123; top[now]=tp,id[now]=++cnt,wt[cnt]=a[now]; if(!ws[now]) return; dfs2(ws[now],tp); for(int i=bg[now];i;i=nx[i]) if(to[i]!=fa[now]&amp;&amp;to[i]!=ws[now]) dfs2(to[i],to[i]);&#125;inline void change(int x,int y,int z) &#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; assign(id[top[x]],id[x],z); x=fa[top[x]]; &#125; else &#123; assign(id[top[y]],id[y],z); y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) assign(id[y],id[x],z); else assign(id[x],id[y],z);&#125;inline int query(int x,int y) &#123; int ans(0),lasta(0),lastb(0); IT itl,itr; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) &#123; itr=split(id[x]+1),itl=split(id[top[x]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; x=fa[top[x]]; &#125; else &#123; itr=split(id[y]+1),itl=split(id[top[y]]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) &#123; itr=split(id[x]+1),itl=split(id[y]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lasta) lasta=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; else &#123; itr=split(id[y]+1),itl=split(id[x]); for(--itr;;--itr) &#123; if(itr-&gt;v!=lastb) lastb=itr-&gt;v,++ans; if(itr==itl) break; &#125; &#125; return ans-(lasta==lastb);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) scanf("%d",a+i); for(int i=1;i&lt;n;++i) &#123; scanf("%d%d",&amp;x,&amp;y); link(x,y),link(y,x); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=n;++i) s.insert(node(i,i,wt[i])); while(m--) &#123; scanf("\n%c%d%d",&amp;opt,&amp;x,&amp;y); if(opt=='C') &#123; scanf("%d",&amp;z); change(x,y,z); &#125; else printf("%d\n",query(x,y)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[Luogu1047]校门外的树]]></title>
    <url>%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu1047-%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[此处题面看见一堆 dalao 题解写树状数组线段树，蒟蒻在这里安利一种毒瘤数据结构——珂朵莉树。一、介绍。珂朵莉树 (ChthollyTree) ，又名 OldDriverTree (老司机树)，简称 ODT ，是一种非常暴力的数据结构，它将一段值相同的区间以三元组 &lt; 左端点，右端点，值 &gt; 的方式存储起来，因此它的效率是建立在区间推平操作 (assign) 上的(也就是本题的砍树)。二、存储方式。珂朵莉树的存储基于平衡树(我这里为了方便用了 STL 的 set )，这里定义珂朵莉树的结点为：1234567struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;这里的 l 和 r 是区间的左右端点(闭区间)，v 是该区间的值(表示这一区间内所有元素的值都是v)，然后是构造函数和重载运算符，这里重载成比较区间左端点。最后把区间扔进平衡树就行了：12set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;三、核心操作。珂朵莉树的操作是基于一个核心操作 split 的，传入参数 pos 后，它能返回左端点值为 pos 的结点的迭代器，如果不存在这样的结点，它就会把包含 pos 的结点 &lt; l，r，v &gt; 拆成 &lt; l , pos-1 , v &gt; 和 &lt; pos , r , v &gt; ，然后返回后面这个结点的迭代器。先上代码：123456789IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;一行行来看：1IT it=s.lower_bound(node(pos));lower_bound 是获取左端点大于等于 pos 的第一个结点。1if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it;如果这个结点的左端点正好是 pos ，我们就直接返回它。12--it;int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v;否则的话 —it 得到的就是包含 pos 的结点，我们用 L、R、V 储存它的左右端点和值。1s.erase(it);然后我们删掉这个结点。12s.insert(node(L,pos-1,V));return s.insert(node(pos,R,V)).first;最后我们插入两个新的结点，左右端点分别是 &lt; L、pos-1 &gt; 和 &lt; pos、R &gt; ，顺便返回后面这个结点的迭代器。这样我们就完成了 split 操作。四、区间推平。这是保证珂朵莉树复杂度不至于爆炸的重要操作，它能将一个区间内的值变得一样，本题的砍树就是区间赋值为 0 。先上代码：12345void assign(int l,int r,int v) &#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,v));&#125;看上去十分的暴力，事实上珂朵莉树就是这么暴力的数据结构。稍微解释一下代码：1IT itl=split(l),itr=split(r+1);itl 指向的结点左端点为 l ，itr 指向的结点左端点为 r+1 。1s.erase(itl,itr);删去平衡树中 [ itl , itr ) 的结点(左闭右开区间)。1s.insert(node(l,r,v));直接插入一个 &lt; l , r &gt; ，值为v的区间。就是这么直接暴力！Upd：由于某些未知原因（珂学规定），珂朵莉树提取区间时需要先 split 右端点！五、其他操作。1. 初始化初始化操作就是直接插入，本题所有树默认都是种上的，全部赋值为 1 就行：1s.insert(node(0,l,1));2. 区间操作区间操作的话这里就以题目的求和为例，先上代码：1234567int sum(int l,int r) &#123; int _sum=0; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) _sum+=(itl-&gt;v)*((itl-&gt;r)-(itl-&gt;l)+1); return _sum;&#125;同样是非常的暴力，直接取出所有区间内的结点暴力求和就行了，其他的操作如区间加法乘法什么的也是一样的，取出结点遍历一遍就行。六、本题代码。最后放上本题AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;cstdio&gt;#include&lt;set&gt;using namespace std;struct node &#123; int l,r,v; node(int L,int R=-1,int V=0):l(L),r(R),v(V) &#123;&#125; bool operator&lt;(const node&amp; x)const&#123; return l&lt;x.l; &#125;&#125;;int l,m,x,y,_sum;set&lt;node&gt;s;typedef set&lt;node&gt;::iterator IT;IT split(int pos) &#123; IT it=s.lower_bound(node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int L=it-&gt;l,R=it-&gt;r,V=it-&gt;v; s.erase(it); s.insert(node(L,pos-1,V)); return s.insert(node(pos,R,V)).first;&#125;void remove(int l,int r) &#123; IT itl=split(l),itr=split(r+1); s.erase(itl,itr); s.insert(node(l,r,0));&#125;void sum() &#123; for(IT it=s.begin();it!=s.end();++it) _sum+=it-&gt;v*(it-&gt;r-it-&gt;l+1);&#125;int main() &#123; scanf("%d%d",&amp;l,&amp;m); s.insert(node(0,l,1)); for(int i=1;i&lt;=m;++i) &#123; scanf("%d%d",&amp;x,&amp;y); remove(x,y); &#125; sum(); printf("%d",_sum);&#125;七、总结珂朵莉树的效率建立在区间推平操作 (assign) 上，它能使结点数量快速减小从而保证时间复杂度，因此珂朵莉树十分容易被卡，不到万不得已还是得乖乖用别的数据结构，不过它的代码十分简单，考场上写不出别的数据结构时也是可以交一个珂朵莉树的。]]></content>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
</search>
